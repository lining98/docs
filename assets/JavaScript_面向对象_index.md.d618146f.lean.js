import{_ as a,v as t,b as i,R as e}from"./chunks/framework.814cacce.js";const _=JSON.parse('{"title":"JavaScript 面向对象","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/面向对象/index.md","filePath":"JavaScript/面向对象/index.md","lastUpdated":1689833984000}'),r={name:"JavaScript/面向对象/index.md"},s=e('<h1 id="javascript-面向对象" tabindex="-1">JavaScript 面向对象 <a class="header-anchor" href="#javascript-面向对象" aria-label="Permalink to &quot;JavaScript 面向对象&quot;">​</a></h1><h2 id="是什么" tabindex="-1">是什么？ <a class="header-anchor" href="#是什么" aria-label="Permalink to &quot;是什么？&quot;">​</a></h2><p>JavaScript 面向对象是一种编程范式，其中程序被组织为一组对象，每个对象都有自己的状态和行为。在面向对象编程中，对象是数据和操作数据的方法的封装单元，它们通过相互之间的交互来完成特定的任务。</p><h2 id="特点" tabindex="-1">特点： <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点：&quot;">​</a></h2><ul><li><p>对象： 对象是面向对象编程的核心概念。对象是一个复合的数据类型，它可以包含属性（也称为数据成员）和方法（也称为函数成员）。</p></li><li><p>类： 类是对象的模板或蓝图，它定义了对象将具有的属性和方法。类是一种抽象的概念，它描述了对象的共同特征。</p></li><li><p>封装： 封装是面向对象编程的重要原则，它指的是将数据和操作数据的方法封装在一个单元中，以隐藏内部实现细节，只暴露必要的接口。</p></li><li><p>继承： 继承是一种对象之间共享属性和方法的机制。通过继承，一个类（子类）可以继承另一个类（父类）的属性和方法，从而实现代码的重用和扩展。</p></li><li><p>多态性： 多态性允许不同的对象对相同的消息作出不同的响应。它可以通过函数重载或方法覆盖来实现。</p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>JavaScript 作为一种支持面向对象编程的语言，提供了创建对象、定义类、实现继承和封装等功能。在 ES6 之后，JavaScript 引入了 class 关键字，使得定义类和创建对象更加简洁和直观。通过面向对象编程，JavaScript 开发者可以更好地组织和管理代码，提高代码的可维护性和可重用性，并使得复杂的程序更易于理解和扩展。</p></div>',6),p=[s];function c(l,o,d,n,h,v){return t(),i("div",null,p)}const m=a(r,[["render",c]]);export{_ as __pageData,m as default};
