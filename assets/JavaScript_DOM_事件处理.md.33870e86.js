import{_ as s,c as a,o as e,V as n}from"./chunks/framework.b3911a66.js";const u=JSON.parse('{"title":"DOM 事件处理","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/DOM/事件处理.md","filePath":"JavaScript/DOM/事件处理.md","lastUpdated":1689326952000}'),l={name:"JavaScript/DOM/事件处理.md"},o=n(`<h1 id="dom-事件处理" tabindex="-1">DOM 事件处理 <a class="header-anchor" href="#dom-事件处理" aria-label="Permalink to &quot;DOM 事件处理&quot;">​</a></h1><p>DOM 事件处理是 JavaScript 中常用的一项功能，它允许你监听和响应用户与网页元素之间的交互。下面是一些常见的方法和技巧来处理 DOM 事件：</p><h2 id="添加事件监听器" tabindex="-1">添加事件监听器 <a class="header-anchor" href="#添加事件监听器" aria-label="Permalink to &quot;添加事件监听器&quot;">​</a></h2><ul><li><p>使用 <code>addEventListener</code> 方法来添加事件监听器：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eventName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> eventHandler)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中 <code>&#39;eventName&#39;</code> 是要监听的事件名称，例如 <code>&#39;click&#39;</code>、<code>&#39;mouseover&#39;</code>、<code>&#39;keyup&#39;</code> 等。<code>eventHandler</code> 是一个函数，它会在事件触发时执行。</p></li><li><p>使用匿名函数来定义事件处理程序：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eventName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 事件处理程序的逻辑代码</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>也可以使用箭头函数来定义事件处理程序：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eventName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 事件处理程序的逻辑代码</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h2 id="事件对象" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象" aria-label="Permalink to &quot;事件对象&quot;">​</a></h2><ul><li><p>事件处理程序的第一个参数是事件对象 <code>event</code>，它包含有关事件的信息，例如事件类型、目标元素等。你可以在事件处理程序中使用这些信息来执行逻辑操作。</p></li><li><p>阻止事件默认行为：使用 <code>event.preventDefault()</code> 方法来阻止事件的默认行为，例如阻止表单提交或超链接跳转。</p></li></ul><h2 id="事件冒泡和事件捕获" tabindex="-1">事件冒泡和事件捕获 <a class="header-anchor" href="#事件冒泡和事件捕获" aria-label="Permalink to &quot;事件冒泡和事件捕获&quot;">​</a></h2><ul><li><p>事件冒泡：默认情况下，事件会从触发它的元素向上冒泡到祖先元素。你可以使用 <code>event.stopPropagation()</code> 方法来停止事件冒泡。</p></li><li><p>事件捕获：可以通过将第三个参数设置为 <code>true</code> 来启用事件捕获模式。在事件捕获模式下，事件将从祖先元素开始，向下传播到触发事件的元素。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eventName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> eventHandler</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h2 id="常见事件类型" tabindex="-1">常见事件类型 <a class="header-anchor" href="#常见事件类型" aria-label="Permalink to &quot;常见事件类型&quot;">​</a></h2><p>以下是一些常见的 DOM 事件类型：</p><ul><li><p>鼠标事件：<code>click</code>、<code>mouseover</code>、<code>mouseout</code>、<code>mousemove</code> 等。</p></li><li><p>键盘事件：<code>keyup</code>、<code>keydown</code>、<code>keypress</code> 等。</p></li><li><p>表单事件：<code>submit</code>、<code>input</code>、<code>change</code>、<code>focus</code>、<code>blur</code> 等。</p></li><li><p>页面加载事件：<code>load</code>、<code>DOMContentLoaded</code> 等。</p></li><li><p>视图事件：<code>resize</code>、<code>scroll</code> 等。</p></li><li><p>触摸事件：<code>touchstart</code>、<code>touchend</code>、<code>touchmove</code> 等。</p></li></ul><h2 id="事件委托" tabindex="-1">事件委托 <a class="header-anchor" href="#事件委托" aria-label="Permalink to &quot;事件委托&quot;">​</a></h2><p>事件委托是一种处理多个子元素的事件的技术。通过将事件监听器添加到父元素上，可以捕获子元素触发的事件，并根据需要执行相应的操作。这样可以减少事件监听器的数量，提高性能。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">parentElement</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eventName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">matches</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.className</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 适配子元素的逻辑代码</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这个例子中，当子元素的事件触发时，通过使用 <code>event.target</code> 属性来检查目标元素是否匹配指定的选择器，并执行相应的操作。</p>`,15),p=[o];function t(c,r,i,d,D,y){return e(),a("div",null,p)}const C=s(l,[["render",t]]);export{u as __pageData,C as default};
