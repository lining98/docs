import{_ as i,c as e,o as t,V as c}from"./chunks/framework.b3911a66.js";const A=JSON.parse('{"title":"ECMAScript 的介绍","description":"","frontmatter":{},"headers":[],"relativePath":"ECMAScript/es6/index.md","filePath":"ECMAScript/es6/index.md","lastUpdated":1689930732000}'),l={name:"ECMAScript/es6/index.md"},r=c('<h1 id="ecmascript-的介绍" tabindex="-1">ECMAScript 的介绍 <a class="header-anchor" href="#ecmascript-的介绍" aria-label="Permalink to &quot;ECMAScript 的介绍&quot;">​</a></h1><h2 id="es6-入门教程" tabindex="-1">ES6 入门教程 <a class="header-anchor" href="#es6-入门教程" aria-label="Permalink to &quot;ES6 入门教程&quot;">​</a></h2><p><a href="https://es6.ruanyifeng.com/" target="_blank" rel="noreferrer">阮一峰ECMAScript 6 入门</a></p><h2 id="ecmascript-简介" tabindex="-1">ECMAScript 简介 <a class="header-anchor" href="#ecmascript-简介" aria-label="Permalink to &quot;ECMAScript 简介&quot;">​</a></h2><blockquote><p>ECMAScript（简称 ES）是一种由 ECMA 国际（European Computer Manufacturers Association）<strong>制定和维护的脚本语言标准</strong>。它是 JavaScript（JS）的基础，并且也被其他编程语言（如 ActionScript、JScript 等）所使用。</p></blockquote><p>ECMAScript 定义了脚本语言的语法规范、类型、操作符、对象和一系列的内置函数等内容。JavaScript 作为 ECMAScript 的一种实现，是最广泛使用的一种。其他脚本语言可以基于 ECMAScript 标准进行实现，以保持互操作性和一致性。</p><h2 id="ecmascript-与-javascript-的关系" tabindex="-1">ECMAScript 与 JavaScript 的关系？ <a class="header-anchor" href="#ecmascript-与-javascript-的关系" aria-label="Permalink to &quot;ECMAScript 与 JavaScript 的关系？&quot;">​</a></h2><ul><li>ECMAScript 简称 ES。ES 是一个脚本语言。注意，是 ES 也是脚本语言。</li><li>ES 通常可以看作是 JavaScript 的标准化规范。</li><li>ES 只提供了最基本的语法。如：怎样定义变量和函数。</li><li>JS 实现了 ES 的语言标准。JS 还在此基础上新增了一些拓展，使得我们可以在浏览器可以操作 DOM/BOM，在 Node 环境中可以读写文件等操作。</li><li>因为 JS 是在 ES 基础上的拓展，所有 JS 是 ES 的扩展语言。</li><li>JS 在浏览器环境中的组成关系：ES + Web Apis (BOM + DOM 等)。</li><li>JS 在 Node 环境中的组成关系：ES + Node Apis（fs + net 等）。</li></ul><h2 id="ecmascript-版本发布记录" tabindex="-1">ECMAScript 版本发布记录 <a class="header-anchor" href="#ecmascript-版本发布记录" aria-label="Permalink to &quot;ECMAScript 版本发布记录&quot;">​</a></h2><p>以下是每个 ECMAScript 版本的主要内容概述：</p><ol><li><p>ECMAScript 1 (ES1) - 1997:</p><ul><li>第一个 ECMAScript 版本，定义了基本的语法和数据类型，包括变量、操作符、函数和控制结构等。</li></ul></li><li><p>ECMAScript 2 (ES2) - 1998:</p><ul><li>对 ES1 进行了一些修订，没有引入大的新功能。</li></ul></li><li><p>ECMAScript 3 (ES3) - 1999:</p><ul><li>在 ES2 的基础上做了大量改进，包括正则表达式、异常处理、更严格的错误定义等。</li></ul></li><li><p>ECMAScript 4 (ES4) - 未完成（被放弃）:</p><ul><li>在制定过程中遇到了较大的争议和复杂性，最终被放弃，相关特性后来分别在后续版本中被引入。</li></ul></li><li><p>ECMAScript 5 (ES5) - 2009:</p><ul><li>添加了严格模式（strict mode），提供更安全的编程环境。</li><li>新增了 JSON 对象，使得操作 JSON 数据更方便。</li><li>引入了<code>Object.defineProperty</code>，允许更灵活地定义对象属性。</li><li>提供了<code>Array</code>方法（如<code>forEach</code>、<code>map</code>、<code>reduce</code>等），方便数组处理。</li><li>改进了<code>Function</code>对象，引入了<code>bind</code>方法。</li></ul></li><li><p>ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015) - 2015:</p><ul><li>引入了<code>let</code>和<code>const</code>关键字，提供块级作用域。</li><li>支持箭头函数（<code>=&gt;</code>），简化函数定义和<code>this</code>的处理。</li><li>新增模板字符串，支持多行字符串和插入表达式。</li><li>引入了解构赋值，可以方便地从数组或对象中提取值。</li><li>提供了类和模块化的支持，更接近传统面向对象编程。</li><li>添加了<code>Promise</code>对象，用于更好地处理异步操作。</li><li>新增了<code>for...of</code>循环，用于遍历可迭代对象。</li><li>引入<code>Symbol</code>类型，用于创建唯一的对象属性名。</li></ul></li><li><p>ECMAScript 7 (ES7) / ECMAScript 2016 (ES2016) - 2016:</p><ul><li>引入了<code>Array.prototype.includes</code>方法，用于检查数组是否包含某个元素。</li><li>引入指数运算符（<code>**</code>）。</li></ul></li><li><p>ECMAScript 8 (ES8) / ECMAScript 2017 (ES2017) - 2017:</p><ul><li>引入了<code>Object.entries</code>和<code>Object.values</code>方法，用于遍历对象的键值对和值。</li><li>添加了<code>String.prototype.padStart</code>和<code>String.prototype.padEnd</code>方法，用于字符串填充。</li><li>引入<code>async/await</code>语法，更方便地处理异步操作。</li><li>添加了<code>Object.getOwnPropertyDescriptors</code>方法，返回对象属性的描述符。</li></ul></li><li><p>ECMAScript 9 (ES9) / ECMAScript 2018 (ES2018) - 2018:</p><ul><li>引入了<code>Promise.prototype.finally</code>方法，用于在 Promise 结束时执行回调。</li><li>引入了<code>Rest/Spread</code>属性，提供了更便捷的对象和数组操作。</li></ul></li><li><p>ECMAScript 10 (ES10) / ECMAScript 2019 (ES2019) - 2019:</p><ul><li>引入了<code>Array.prototype.flat</code>和<code>Array.prototype.flatMap</code>方法，用于数组的扁平化和映射。</li><li>添加了<code>String.prototype.trimStart</code>和<code>String.prototype.trimEnd</code>方法，用于去除字符串两端的空白字符。</li><li>引入<code>Object.fromEntries</code>方法，用于将键值对列表转换为对象。</li></ul></li></ol><p>从 ES6 开始，ECMAScript 标准每年都会发布一个新版本，每个版本都会引入一些新的特性和改进，以使 JavaScript 语言变得更加强大、现代和易用。</p>',12),o=[r];function a(p,d,S,E,s,n){return t(),e("div",null,o)}const M=i(l,[["render",a]]);export{A as __pageData,M as default};
