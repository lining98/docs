import{_ as s,c as a,o as n,V as l}from"./chunks/framework.b3911a66.js";const A=JSON.parse('{"title":"内置对象 RegExp","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/内置对象/RegExp.md","filePath":"JavaScript/内置对象/RegExp.md","lastUpdated":1689579676000}'),o={name:"JavaScript/内置对象/RegExp.md"},p=l(`<h1 id="内置对象-regexp" tabindex="-1">内置对象 RegExp <a class="header-anchor" href="#内置对象-regexp" aria-label="Permalink to &quot;内置对象 RegExp&quot;">​</a></h1><h2 id="什么是-regexp" tabindex="-1">什么是 RegExp？ <a class="header-anchor" href="#什么是-regexp" aria-label="Permalink to &quot;什么是 RegExp？&quot;">​</a></h2><p>RegExp（正则表达式）是一种用于匹配和操作字符串模式的强大工具。它是一种模式匹配的语法，可以用来搜索、替换和提取字符串中的特定部分。在 JavaScript 中，RegExp 是一个内置的对象类型，可以通过字面量或构造函数来创建。</p><p>正则表达式是一种由字符和特殊符号组成的模式，用于定义字符串的搜索规则。在 JavaScript 中，可以使用正则表达式执行以下操作：</p><ul><li><strong>匹配（Matching）</strong>：使用正则表达式来检查字符串是否符合特定模式。</li><li><strong>搜索（Searching）</strong>：使用正则表达式在字符串中查找特定模式的出现位置。</li><li><strong>替换（Replacing）</strong>：使用正则表达式来查找匹配的模式，并进行替换操作。</li></ul><p>当涉及到字符串模式匹配和替换时，JavaScript 的正则表达式（Regular Expression）提供了强大的工具。正则表达式是一种描述字符串模式的表达式，它可以用来检查、匹配、搜索和替换字符串。下面是关于 JavaScript 正则表达式的详细介绍。</p><h2 id="正则表达式基础语法" tabindex="-1">正则表达式基础语法 <a class="header-anchor" href="#正则表达式基础语法" aria-label="Permalink to &quot;正则表达式基础语法&quot;">​</a></h2><p>在 JavaScript 中，正则表达式可以使用字面量形式或构造函数形式来创建。</p><h3 id="字面量形式" tabindex="-1">字面量形式 <a class="header-anchor" href="#字面量形式" aria-label="Permalink to &quot;字面量形式&quot;">​</a></h3><p>使用斜杠（<code>/</code>）将正则表达式模式包围起来，后面可以跟上一些修饰符（如 <code>g</code>、<code>i</code>、<code>m</code>）。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pattern </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="构造函数形式" tabindex="-1">构造函数形式 <a class="header-anchor" href="#构造函数形式" aria-label="Permalink to &quot;构造函数形式&quot;">​</a></h3><p>使用 <code>RegExp</code> 构造函数创建正则表达式，它接收两个参数：模式字符串和可选的修饰符字符串。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pattern </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RegExp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="元字符" tabindex="-1">元字符 <a class="header-anchor" href="#元字符" aria-label="Permalink to &quot;元字符&quot;">​</a></h2><ul><li><code>.</code>：匹配除换行符之外的任何单个字符。</li><li><code>^</code>：匹配字符串的开头。</li><li><code>$</code>：匹配字符串的结尾。</li><li><code>\\*</code>：匹配前面的元素零次或多次。</li><li><code>+</code>：匹配前面的元素一次或多次。</li><li><code>?</code>：匹配前面的元素零次或一次。</li><li><code>[]</code>：定义字符类，匹配括号内的任意字符。</li><li><code>()</code>：标记子表达式的开始和结束位置，并捕获匹配的子字符串。</li></ul><h2 id="正则表达式修饰符" tabindex="-1">正则表达式修饰符 <a class="header-anchor" href="#正则表达式修饰符" aria-label="Permalink to &quot;正则表达式修饰符&quot;">​</a></h2><p>修饰符用于在正则表达式中添加额外的规则，影响匹配的行为。以下是常用的修饰符：</p><ul><li><strong>g</strong>：全局匹配，找到所有匹配项而不仅仅是第一个。</li><li><strong>i</strong>：不区分大小写匹配。</li><li><strong>m</strong>：多行匹配，允许 <code>^</code> 和 <code>$</code> 来匹配字符串的开始和结束。</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pattern </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">gi</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="常用的正则表达式模式" tabindex="-1">常用的正则表达式模式 <a class="header-anchor" href="#常用的正则表达式模式" aria-label="Permalink to &quot;常用的正则表达式模式&quot;">​</a></h2><p>以下是一些常用的正则表达式模式示例：</p><ul><li><strong>匹配字母或数字字符</strong>：<code>/[a-zA-Z0-9]/</code></li><li><strong>匹配多个字母或数字字符</strong>：<code>/[a-zA-Z0-9]+/</code></li><li><strong>匹配数字</strong>：<code>/\\d/</code></li><li><strong>匹配非数字</strong>：<code>/\\D/</code></li><li><strong>匹配空格字符</strong>：<code>/\\s/</code></li><li><strong>匹配非空格字符</strong>：<code>/\\S/</code></li><li><strong>匹配单词字符</strong>：<code>/\\w/</code></li><li><strong>匹配非单词字符</strong>：<code>/\\W/</code></li><li><strong>匹配邮箱</strong>：<code>/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/</code></li></ul><h2 id="正则表达式方法" tabindex="-1">正则表达式方法 <a class="header-anchor" href="#正则表达式方法" aria-label="Permalink to &quot;正则表达式方法&quot;">​</a></h2><p>JavaScript 的字符串对象提供了一些与正则表达式相关的方法来执行匹配、搜索和替换操作。</p><p>以下是一些常用的方法：</p><ul><li><strong><code>match()</code></strong>：在字符串中搜索匹配正则表达式的结果，并返回一个数组或 <code>null</code>。</li><li><strong><code>search()</code></strong>：在字符串中搜索匹配正则表达式的结果，并返回第一个匹配的索引，如果没有找到则返回 <code>-1</code>。</li><li><strong><code>replace()</code></strong>：使用新的字符串替换匹配正则表达式的结果，并返回替换后的字符串。</li><li><strong><code>test()</code></strong>：检查字符串是否匹配正则表达式，并返回 <code>true</code> 或 <code>false</code>。</li><li><strong><code>exec()</code></strong>: 在字符串中执行正则表达式匹配，返回匹配结果的数组或 null。</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello, World!</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pattern </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(pattern)) </span><span style="color:#676E95;font-style:italic;">// 输出：[&#39;Hello&#39;]</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">search</span><span style="color:#A6ACCD;">(pattern)) </span><span style="color:#676E95;font-style:italic;">// 输出：0</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(pattern</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hi</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// 输出：&#39;Hi, World!&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(str)) </span><span style="color:#676E95;font-style:italic;">// 输出：true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="正则表达式的分组和捕获" tabindex="-1">正则表达式的分组和捕获 <a class="header-anchor" href="#正则表达式的分组和捕获" aria-label="Permalink to &quot;正则表达式的分组和捕获&quot;">​</a></h2><p>正则表达式还支持使用圆括号进行分组和捕获。通过使用圆括号将模式的一部分括起来，可以创建子模式，并将匹配到的子串捕获到一个分组中。</p><p>以下是一些常用的分组和捕获的示例：</p><ul><li><strong>使用括号进行分组</strong>：<code>(abc)+</code> 会匹配一个或多个连续的 &quot;abc&quot;。</li><li><strong>捕获分组</strong>：使用括号进行分组后，可以通过编号或名称将捕获的子串提取出来。</li></ul><p>使用编号访问捕获的子串：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello, World!</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pattern </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/(</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">, </span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">World</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">!</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> match </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(pattern)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(match[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]) </span><span style="color:#676E95;font-style:italic;">// 输出：&#39;Hello, World!&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(match[</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">]) </span><span style="color:#676E95;font-style:italic;">// 输出：&#39;Hello&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(match[</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">]) </span><span style="color:#676E95;font-style:italic;">// 输出：&#39;World&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>使用名称访问捕获的子串：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello, World!</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pattern </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/(?&lt;</span><span style="color:#A6ACCD;">greeting</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">, </span><span style="color:#89DDFF;">(?&lt;</span><span style="color:#A6ACCD;">subject</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">World</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">!</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> match </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(pattern)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(match[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]) </span><span style="color:#676E95;font-style:italic;">// 输出：&#39;Hello, World!&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(match</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">groups</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">greeting) </span><span style="color:#676E95;font-style:italic;">// 输出：&#39;Hello&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(match</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">groups</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">subject) </span><span style="color:#676E95;font-style:italic;">// 输出：&#39;World&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在上述示例中，正则表达式 <code>(Hello), (World)!</code> 使用括号进行分组，并将 &quot;Hello&quot; 和 &quot;World&quot; 捕获到两个分组中。使用编号或名称可以访问捕获的子串。</p><p>捕获分组可用于从字符串中提取特定部分的信息，进行更精确的匹配和处理。</p><h2 id="正则表达式标志" tabindex="-1">正则表达式标志 <a class="header-anchor" href="#正则表达式标志" aria-label="Permalink to &quot;正则表达式标志&quot;">​</a></h2><p>除了修饰符外，JavaScript 正则表达式还支持标志（Flags），用于提供更多的匹配选项。</p><p>以下是常用的正则表达式标志：</p><ul><li><strong>g</strong>：全局匹配，找到所有匹配项而不仅仅是第一个。</li><li><strong>i</strong>：不区分大小写匹配。</li><li><strong>m</strong>：多行匹配，允许 <code>^</code> 和 <code>$</code> 来匹配字符串的开始和结束。</li><li><strong>s</strong>：允许点号（<code>.</code>）匹配任意字符，包括换行符。</li><li><strong>u</strong>：启用 Unicode 匹配模式。</li><li><strong>y</strong>：粘附模式，只从上次匹配结束的位置开始匹配。</li></ul><p>标志可以通过在正则表达式字面量或构造函数中使用单个字符的方式添加。例如：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pattern </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">gi</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pattern2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RegExp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">gi</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><p>正则表达式在 JavaScript 中具有广泛的应用场景，例如：</p><ul><li><strong>表单验证</strong>：使用正则表达式验证用户输入的表单数据，如邮箱、电话号码、密码等。</li><li><strong>字符串替换</strong>：使用正则表达式进行文本替换、格式化或删除特定的字符。</li><li><strong>数据提取</strong>：使用正则表达式从文本中提取特定的信息，如 URL、日期、数字等。</li><li><strong>语法解析</strong>：使用正则表达式解析特定的语法或格式，如 Markdown、JSON 等。</li></ul><p>正则表达式是 JavaScript 中强大的工具之一，它提供了灵活和高效的字符串处理能力。通过学习和掌握正则表达式的语法和方法，可以提高字符串处理的效率和精确度，从而更好地应对各种字符串操作的需求。</p>`,48),e=[p];function t(r,c,i,D,y,d){return n(),a("div",null,e)}const F=s(o,[["render",t]]);export{A as __pageData,F as default};
