const t={map:'[{"关于作者":["0.0"],"算法":["1.0"],"demo2":["2.0"],"demo3":["3.0"],"该内容正在努力建设中":["4.0"],"es6":["5.0","6.1","8.0","10.0","12.0","13.0","14.0","95.4"],"创建类":["5.1"],"创建对象":["5.2","92.1"],"类的继承":["5.3"],"方法重写":["5.4"],"静态方法":["5.5"],"getter":["5.6"],"ecmascript":["6.0","6.2","6.3","6.4"],"map":["7.0","48.32"],"简述":["7.1","9.1"],"方法":["7.2","14.7","23.1","23.2","86.2","87.2"],"对象操作":["7.3"],"转换":["7.4","9.12","14.4","14.5"],"克隆":["7.5"],"合并":["7.6"],"引言":["8.1"],"模块化的意义":["8.2"],"避免命名冲突":["8.3"],"更好的代码组织和维护":["8.4"],"代码重用":["8.5"],"导出模块":["8.6"],"导出变量":["8.7"],"导出函数":["8.8"],"导出类":["8.9"],"导入模块":["8.10"],"导入单个变量":["8.11"],"导入函数":["8.12"],"导入类":["8.13"],"导入全部内容":["8.14"],"默认导出":["8.15"],"默认导出变量":["8.16"],"默认导出函数":["8.17"],"默认导出类":["8.18"],"同时使用命名导出和默认导出":["8.19"],"重命名导入和导出":["8.20"],"重命名导入":["8.21"],"重命名导出":["8.22"],"动态导入":["8.23"],"注意事项":["8.24","10.11","13.10","65.5","73.9","81.4","82.6","83.6","93.4"],"文件扩展名":["8.25"],"模块的类型":["8.26"],"严格模式":["8.27"],"导入和导出位置":["8.28"],"set":["9.0"],"实例的方法与属性":["9.2"],"add":["9.3"],"clear":["9.4"],"delete":["9.5"],"entries":["9.6","14.12"],"has":["9.7"],"values":["9.8","14.14"],"keys":["9.9","14.13"],"size":["9.10"],"使用":["9.11","20.3","20.7","20.8","30.14","30.17","33.9","35.2","36.2","39.3","63.9","71.5","97.3","117.0","119.3","126.2","130.1","142.1","145.3"],"去重":["9.13"],"并集":["9.14"],"交集":["9.15"],"差集":["9.16"],"函数参数的默认值":["10.1"],"认识函数参数的默认值":["10.2"],"函数参数默认值的基本用法":["10.3"],"默认值的生效条件":["10.4"],"与解构赋值默认值结合使用":["10.5"],"参数默认值的位置":["10.6"],"函数参数默认值的应用":["10.7"],"rest":["10.8"],"前言":["10.9"],"函数参数":["10.10"],"剩余参数的应用":["10.12"],"小结":["10.13","54.20"],"箭头函数":["10.14"],"基本语法":["10.15"],"没有参数或多个参数":["10.16"],"箭头函数与":["10.17"],"使用注意事项":["10.18"],"函数参数的尾逗号":["10.19"],"catch":["10.20"],"js":["11.0","136.3","138.3"],"一":["11.1","44.1","45.1","48.5","54.1","105.9","110.1","110.6","127.2","154.1"],"增":["11.2","48.6"],"concat":["11.3","48.10"],"删":["11.4","48.11"],"改":["11.5","48.16"],"trim":["11.6"],"repeat":["11.7"],"padstart":["11.8"],"tolowercase":["11.9"],"查":["11.10","48.18"],"charat":["11.11"],"indexof":["11.12","48.19"],"startwith":["11.13"],"at":["11.14"],"二":["11.15","44.5","45.2","48.22","54.8","63.2","105.10","127.6","154.5"],"split":["11.16"],"三":["11.17","45.3","48.25","54.13","63.7","127.7","154.11"],"match":["11.18"],"search":["11.19"],"replace":["11.20"],"模板字符串":["12.1"],"字符串插值":["12.2"],"多行字符串":["12.3"],"嵌套模板字符串":["12.4"],"带标签的模板字符串":["12.5"],"属性的简洁表示法":["13.1"],"方括号语法":["13.2"],"方括号语法的用法":["13.3"],"方括号中可以放什么":["13.4"],"方括号语法和点语法的区别":["13.5"],"super":["13.6"],"对象的展开运算符":["13.7"],"展开对象":["13.8"],"合并对象":["13.9"],"空对象的展开":["13.11"],"非对象的展开":["13.12"],"字符串的展开":["13.13"],"数组的展开":["13.14"],"对象中对象属性的展开":["13.15"],"对象展开运算符的应用":["13.16"],"复制对象":["13.17"],"用户参数和默认参数":["13.18"],"对象的新增方法":["13.19"],"object":["13.20","13.21","13.22","54.9","85.2","92.6","92.7","92.8","92.9","92.10","92.11","92.12","92.13","92.14","92.15","92.16","92.17","92.18","92.19","92.20"],"array":["14.1","14.2","54.10","85.3"],"转换类数组":["14.3"],"转换字符串":["14.6"],"find":["14.8","48.21"],"findindex":["14.9"],"fill":["14.10"],"copywithin":["14.11"],"includes":["14.15","48.20"],"flat":["14.16"],"flatmap":["14.17"],"解构赋值":["15.0"],"数组解构赋值":["15.1"],"基本用法":["15.2","15.8"],"忽略不需要的元素":["15.3"],"给变量指定默认值":["15.4","15.10"],"剩余元素":["15.5"],"交换变量的值":["15.6"],"对象解构赋值":["15.7"],"重命名变量":["15.9"],"嵌套解构":["15.11"],"css":["16.0","19.1","20.0","21.0","23.0"],"通配符选择器":["16.1"],"元素选择器":["16.2"],"类选择器":["16.3"],"id":["16.4"],"交集选择器":["16.5"],"并集选择器":["16.6"],"后代选择器":["16.7"],"子选择器":["16.8"],"兄弟选择器":["16.9"],"伪类选择器":["16.10"],"动态伪类选择器":["16.11"],"结构伪类选择器":["16.12"],"属性选择器":["16.13"],"伪元素选择器":["16.14"],"相关链接":["16.15"],"flex":["17.0","17.5"],"如何启用":["17.1"],"主轴和交叉轴":["17.2"],"主轴对齐与交叉轴对齐":["17.3"],"换行与排列":["17.4"],"弹性增长与缩小":["17.6"],"弹性基准值":["17.7"],"嵌套":["17.8"],"多行对齐":["17.9"],"实现常见布局需求":["17.10"],"grid":["18.0"],"选择器优先级":["19.0"],"行内元素":["20.1"],"块级元素":["20.2"],"使用定位":["20.4"],"定宽高":["20.5"],"不定宽高":["20.6"],"单行溢出隐藏":["21.1"],"多行溢出隐藏":["21.2","21.3"],"滚动条样式":["22.0"],"html5":["24.0","24.5","24.6","25.3"],"音视频频格式的":["24.1"],"音频格式":["24.2"],"视频格式":["24.3"],"音视频标签描述":["24.4"],"video":["24.7","24.11"],"音视频对象的方法":["24.8"],"代码实例":["24.9"],"audio":["24.10"],"html":["25.0","25.1","25.2","27.0"],"实践和进阶":["25.4"],"常用标签及用法":["26.0"],"标题标签":["26.1"],"段落标签":["26.2"],"超链接标签":["26.3"],"图像标签":["26.4"],"无序列表和列表项标签":["26.5"],"有序列表和列表项标签":["26.6"],"容器标签":["26.7"],"内联容器标签":["26.8"],"表格标签":["26.9"],"换行标签":["26.10"],"输入标签":["26.11"],"按钮标签":["26.12"],"表单标签":["26.13"],"标题":["26.14"],"多媒体标签":["26.15"],"块级标签":["27.1"],"内联标签":["27.2"],"嵌套标签":["27.3"],"属性":["27.4","86.1","87.1","129.1"],"自定义标签":["27.5"],"input":["28.0","28.1"],"react":["29.0","29.2","29.21","29.22","30.0","31.0","32.0","33.0","33.2","34.0","35.0","36.0"],"简介":["29.1","30.1","37.1"],"核心概念":["29.7","39.1"],"方式一":["29.23"],"方式二":["29.24"],"jsx":["30.2","30.9","30.13","30.16","30.18","30.19","30.20","30.21","30.22"],"基本语法规则":["30.3"],"函数组件":["30.10"],"类组件":["30.11"],"组件的使用":["30.12"],"使用三元表达式":["30.15"],"生命周期阶段":["31.1"],"组件创建阶段":["31.2"],"constructor":["31.3"],"static":["31.4","31.8","102.8"],"render":["31.5"],"componentdidmount":["31.6"],"组件更新阶段":["31.7"],"shouldcomponentupdate":["31.9"],"getsnapshotbeforeupdate":["31.10"],"componentdidupdate":["31.11"],"组件销毁阶段":["31.12"],"componentwillunmount":["31.13"],"什么是":["32.1","33.1","34.1","88.1","124.1","127.1"],"props":["32.2","32.6","32.12","32.13","32.14"],"默认":["32.15"],"安装":["33.8","37.3","97.2","105.7","124.2","126.1"],"嵌套路由":["33.13"],"路由参数":["33.14"],"路由链接和导航":["33.15"],"state":["34.2","34.6","34.7"],"什么是列表渲染":["35.1"],"条件渲染列表元素":["35.3"],"列表渲染和数据来源":["35.4"],"添加列表项":["35.5"],"列表渲染的最佳实践":["35.6"],"什么是条件渲染":["36.1"],"使用三元表达式实现条件渲染":["36.3"],"使用逻辑与":["36.4"],"使用条件运算符实现条件渲染":["36.5"],"条件渲染的最佳实践":["36.6"],"vue":["37.0","38.0","40.0"],"开始":["37.2"],"第一个":["37.4"],"数据绑定":["37.5"],"插值表达式":["37.6"],"指令":["37.7"],"条件渲染":["37.8"],"v":["37.9","37.10","37.12","43.17"],"列表渲染":["37.11"],"事件处理":["37.13"],"表单输入绑定":["37.14"],"组件":["37.15"],"定义组件":["37.16"],"使用组件":["37.17"],"生命周期钩子":["37.18"],"vuex":["39.0"],"优点":["39.2","105.5"],"mutations":["39.4"],"actions":["39.5"],"getters":["39.6"],"vue2响应式原理":["40.1"],"vue3响应式原理":["40.2"],"vue3":["41.0","42.0","43.0","46.0","110.0","136.4","138.4"],"setup":["41.1"],"ref":["41.2"],"ref全家桶":["41.3"],"isref":["41.4"],"shallowref":["41.5"],"triggerref":["41.6"],"customref":["41.7"],"reactive全家桶":["41.8"],"readonly":["41.9","102.7"],"shallowreactive":["41.10"],"to系列全家桶":["41.11"],"toref":["41.12"],"torefs":["41.13"],"toraw":["41.14"],"computed":["41.15"],"watch":["41.16"],"watcheffect":["41.21"],"清除副作用":["41.22"],"停止监听":["41.23"],"配置选项":["41.24"],"生命周期":["41.25"],"自定义指令":["41.26"],"vue3指令的钩子函数":["41.27"],"在setup内定义局部指令":["41.28"],"生命周期钩子参数详解":["41.29"],"案列":["41.30"],"自定义hooks":["41.31"],"通信方式":["42.1"],"注册":["43.1"],"全局组件":["43.2"],"批量注册全局组件":["43.4"],"局部组件":["43.5"],"父子组件传参":["43.6"],"插槽":["43.7"],"匿名插槽":["43.8"],"具名插槽":["43.9"],"作用域插槽":["43.10"],"动态插槽":["43.11"],"异步组件":["43.12"],"suspense":["43.13"],"teleport":["43.14"],"keep":["43.15"],"provide":["43.16"],"创建vue3项目":["44.0"],"安装或者升级":["44.2"],"保证":["44.3"],"创建项目":["44.4"],"认识vue3":["45.0"],"defineprops":["46.1"],"defineemits":["46.2"],"defineoptions":["46.3"],"defineslots":["46.4"],"javascript":["48.0","49.0","50.0","51.0","52.0","53.0","54.0","55.0","58.0","63.0","65.0","66.0","67.0","68.0","71.0","72.0","72.5","74.0","76.0","81.0","82.0","83.0","85.0","85.1","91.0","93.0","94.0"],"创建":["48.1","71.1"],"获取数组元素":["48.2"],"数组方法":["48.4"],"push":["48.7"],"unshift":["48.8"],"splice":["48.9","48.14","48.17"],"pop":["48.12"],"shift":["48.13"],"slice":["48.15"],"reverse":["48.23"],"sort":["48.24"],"join":["48.26"],"四":["48.27","54.17","127.8"],"some":["48.28"],"every":["48.29"],"foreach":["48.30"],"filter":["48.31"],"if":["49.1","49.2"],"switch":["49.3"],"循环语句":["49.4"],"while":["49.5"],"do":["49.6"],"for":["49.7","49.8","49.9","49.10","49.11","55.6"],"break":["49.12","50.9"],"函数的使用":["50.1"],"声明函数":["50.2"],"调用函数":["50.3"],"函数的封装":["50.4"],"函数的参数":["50.5"],"形参和实参":["50.6"],"函数形参和实参个数不匹配问题":["50.7"],"函数的返回值":["50.8"],"匿名函数":["50.10"],"函数表达式":["50.11"],"立即执行函数":["50.12"],"输出语句":["51.1"],"引入方式":["51.2"],"内部方式":["51.3"],"外部方式":["51.4"],"注释":["51.5"],"单行注释":["51.6"],"多行注释":["51.7"],"概述":["52.1"],"生成方法":["52.2"],"键名":["52.3"],"对象的引用":["52.4"],"表达式还是语句":["52.5"],"属性的操作":["52.6"],"属性的读取":["52.7"],"属性的赋值":["52.8"],"属性的查看":["52.9"],"属性的删除":["52.10"],"属性是否存在":["52.11"],"属性的遍历":["52.12"],"with":["52.13"],"运算符":["53.1"],"算数运算符":["53.2"],"赋值运算符":["53.3"],"自增和自减":["53.4"],"自增运算符":["53.5"],"自减运算符":["53.6"],"比较运行符":["53.7"],"逻辑运算符":["53.8"],"逻辑与":["53.9"],"逻辑或":["53.10"],"逻辑非":["53.11"],"条件运算符":["53.12"],"运算符的优先级":["53.13"],"number":["54.2","85.5"],"undefined":["54.3"],"string":["54.4","85.4"],"null":["54.5","101.9"],"boolean":["54.6","85.6"],"symbol":["54.7"],"function":["54.11"],"其他引用类型":["54.12"],"转换为字符串":["54.14"],"转换为数字型":["54.15"],"转换为布尔型":["54.16"],"基本类型":["54.18","101.0"],"引用类型":["54.19"],"var":["55.1"],"let":["55.2"],"暂时性死区":["55.3"],"全局声明":["55.4"],"条件声明":["55.5"],"const":["55.7"],"函数声明提升与":["55.8"],"bom":["56.0","57.0","59.0","60.0","61.0","62.0"],"常见操作":["56.1"],"示例":["56.2","57.2","59.2","60.2","61.2","62.2","73.2","135.1","136.1","137.1","138.1","152.2","152.5","152.11"],"常见方法":["57.1"],"常见属性和方法":["59.1","62.1"],"常见属性":["60.1","61.1"],"ajax简介":["63.1"],"封装":["63.8","89.2","98.0"],"轮播图":["64.0"],"代码实现":["64.1"],"创建闭包":["65.1"],"捕获外部变量":["65.2"],"保护数据":["65.3"],"实际用途":["65.4"],"浅拷贝":["66.1"],"深拷贝":["66.2"],"什么是函数柯里化":["67.1"],"函数柯里化的优点和应用场景":["67.2"],"实现函数柯里化的方法":["67.3"],"节流":["68.1"],"定义":["68.2","68.5"],"其他写法":["68.3"],"防抖":["68.4"],"立即执行":["68.6"],"用法":["68.7"],"数组去重":["69.0"],"数组扁平化":["70.0"],"处理":["71.2"],"promise":["71.3","71.4"],"原型":["72.1","93.1"],"原型链":["72.2","93.2"],"原型对象":["72.3"],"原型继承":["72.4"],"原型继承与传统继承的区别":["72.10"],"使用原型的最佳实践":["72.14"],"详解数组中的":["73.0"],"语法如下":["73.1"],"全局作用域":["74.1"],"局部作用域":["74.2"],"作用域链":["74.3"],"词法作用域":["74.4"],"dom":["75.0","76.2","76.3","77.0","78.0","79.0","80.0"],"插入节点":["75.1"],"删除节点":["75.2"],"查找节点":["75.3"],"父子关系":["75.4"],"兄弟关系":["75.5"],"概念":["76.1"],"document":["76.4"],"事件":["77.1"],"事件监听":["77.2"],"事件移除":["77.3"],"事件类型":["77.4"],"鼠标事件":["77.5"],"键盘事件":["77.6"],"焦点事件":["77.7"],"文本框输入事件":["77.8"],"事件对象":["77.9"],"事件冒泡和事件捕获":["77.10"],"常见事件类型":["77.11"],"事件委托":["77.12"],"创建元素":["78.1"],"设置元素属性和内容":["78.2"],"操作元素的父子关系":["78.3"],"样式操作":["79.1"],"类操作":["79.2"],"获取元素":["80.1"],"修改元素":["80.2"],"设置":["81.1"],"获取":["81.2"],"删除":["81.3"],"存储数据":["82.1","83.1"],"获取数据":["82.2","83.2"],"更新数据":["82.3","83.3"],"删除数据":["82.4","83.4"],"清除所有数据":["82.5","83.5"],"内置对象":["84.0","86.0","87.0","88.0"],"date":["84.1","85.7"],"创建日期":["84.2"],"设置日期":["84.3"],"时间戳":["84.4"],"两个日期比较":["84.5"],"math":["85.8","86.3","86.4","86.5","86.6","86.7","86.8","86.9","86.10","86.11","86.12","86.13","86.14"],"regexp":["85.9"],"正则表达式基础语法":["88.2"],"字面量形式":["88.3"],"构造函数形式":["88.4"],"元字符":["88.5"],"正则表达式修饰符":["88.6"],"常用的正则表达式模式":["88.7"],"正则表达式方法":["88.8"],"正则表达式的分组和捕获":["88.9"],"正则表达式标志":["88.10"],"应用场景":["88.11"],"继承":["89.0","89.1","102.2","106.3"],"多态":["89.3"],"类和构造函数":["90.0"],"构造函数":["90.1"],"类":["90.2","102.0"],"是什么":["91.1","141.1","150.1"],"特点":["91.2","141.2"],"实例对象与方法":["92.0"],"利用":["92.2"],"利用字面量创建对象":["92.3"],"利用构造函数创建对象":["92.4"],"常用方法":["92.5"],"使用原型的好处":["93.3"],"this":["95.0","95.2"],"执行期上下文":["95.1"],"es5":["95.3"],"改变函数内部的":["95.5"],"call":["95.6","95.7","95.8"],"apply":["95.9","95.10","95.11","95.12"],"bind":["95.13","95.14"],"前端导航":["96.0"],"常用工具":["96.2"],"axios":["97.0"],"什么是axios":["97.1"],"拦截器":["97.4"],"错误处理":["97.5"],"相关文章":["98.7"],"git基本命令使用":["99.0"],"账户配置":["99.1"],"本地基本操作":["99.2"],"初始化本地库":["99.3"],"查看状态":["99.4"],"添加暂存区":["99.5"],"提交本地库":["99.6"],"比较差异":["99.7"],"查看日志信息":["99.8"],"分支命令":["99.9"],"创建分支":["99.10"],"查看本地分支":["99.11"],"删除分支":["99.12"],"切换分支":["99.13"],"合并分支":["99.14"],"版本穿梭与回滚":["99.15"],"修改":["99.16"],"远程仓库交互":["99.17"],"git":["99.18","99.19","99.20","99.21"],"git安装":["100.0"],"tortoisegit安装":["100.7"],"字符串类型":["101.1","113.3"],"数字类型":["101.2"],"布尔类型":["101.3"],"数组":["101.4"],"元组":["101.5"],"枚举":["101.6"],"any":["101.7"],"void":["101.8"],"never":["101.10","101.11"],"联合类型":["101.12"],"交叉类型":["101.13"],"类型断言":["101.14"],"基本实例":["102.1"],"类的修饰符":["102.3"],"默认为":["102.4"],"理解":["102.5","102.6"],"interface":["102.9"],"存储器":["102.10"],"抽象类":["102.11"],"函数":["103.0"],"函数的类型":["103.1"],"可选参数":["103.2"],"默认参数":["103.3"],"剩余参数":["103.4"],"函数重载":["103.5"],"泛型":["104.0"],"函数泛型":["104.1"],"给函数加上类型":["104.2"],"使用泛型优化":["104.3"],"多个泛型参数的函数":["104.4"],"泛型接口":["104.5"],"泛型类":["104.6"],"泛型约束":["104.7"],"初识typescript":["105.0"],"ts是什么":["105.1"],"ts和js的关系":["105.2"],"ts和js的区别":["105.3"],"typescript的优缺点":["105.4"],"缺点":["105.6"],"监视编译和在node下运行typescript":["105.8"],"接口和对象类型":["106.0"],"对象的类型":["106.1"],"重名interface":["106.2"],"可选属性":["106.4"],"任意属性":["106.5"],"只读属性":["106.6"],"添加函数":["106.7"],"对象类型":["107.0"],"tsconfig":["108.0"],"类型推论":["109.0","109.1"],"类型别名":["109.2"],"nginx":["111.0"],"nginx部署项目":["111.1"],"mysql":["112.0","113.0","116.0"],"管理数据库和表的命令":["112.1"],"数据操作命令":["112.2"],"授权和权限管理命令":["112.3"],"整数类型":["113.1"],"浮点数类型":["113.2"],"日期和时间类型":["113.4"],"其他常用类型":["113.5"],"数据库概述":["114.0"],"mysql介绍":["114.1"],"安装mysql":["115.0"],"express":["118.0","118.1","118.4","118.5","122.11","122.14"],"基本使用":["118.2"],"托管静态资源":["118.3"],"全局中间件":["118.6"],"局部中间件":["118.7"],"中间件分类":["118.8"],"cors":["118.9","118.10","118.11","118.12","118.13"],"简单请求":["118.14"],"预检请求":["118.15"],"nodejs":["119.0","119.2","121.4"],"初识":["119.1","141.0","151.0"],"nodejs内置模块":["120.0"],"fs":["120.1"],"读取文件":["120.2"],"简单文件读取":["120.3"],"流式文件读取":["120.4"],"写入文件":["120.5"],"简单文件写入":["120.6"],"流式文件写入":["120.7"],"buffer":["120.8"],"路径动态拼接问题":["120.9"],"其它操作":["120.10"],"path":["120.11"],"路径拼接":["120.12"],"获取路径中文件名":["120.13"],"获取路径中文件扩展名":["120.14"],"http":["120.15"],"创建基本":["120.16"],"实现简陋路由效果":["120.17"],"模块化":["121.0"],"基本概念":["121.1"],"什么是模块化":["121.2"],"模块化的好处":["121.3"],"node":["121.5","121.6","122.1"],"模块作用域的成员":["121.7"],"commonjs":["121.8"],"模块加载机制":["121.9"],"内置模块加载":["121.10"],"自定义模块加载":["121.11"],"第三方模块加载":["121.12"],"目录作为模块加载":["121.13"],"npm":["121.14","121.16","123.0","124.0"],"包":["121.15"],"通过切换源解决":["121.17"],"开发包":["121.18"],"模块的加载机制":["121.19"],"内置模块的加载机制":["121.20"],"自定义模块的加载机制":["121.21"],"第三方模块的加载机制":["121.22"],"目录作为模块":["121.23"],"数据库和身份认证":["122.0"],"配置":["122.2"],"操作":["122.3"],"web":["122.4"],"服务端渲染":["122.5"],"前后端分离":["122.6"],"如何选择":["122.7"],"身份认证":["122.8"],"session":["122.9","122.10"],"jwt":["122.12","122.13"],"常用命令":["124.3"],"package":["124.4"],"使用依赖项":["124.5"],"开发和发布包":["124.6"],"发布包到":["125.0"],"步骤":["125.1","125.2","125.3","125.4","125.5","125.6","125.7"],"yarn":["126.0"],"初始":["127.0"],"canvas":["128.0","129.0","130.0","131.0","132.0","133.0","134.0"],"属性方法":["130.2"],"绘制图形":["133.1"],"绘制矩形":["133.2"],"绘制圆弧":["133.3","147.4"],"绘制线段":["133.4","147.5"],"绘制图像":["133.5"],"绘制文本":["133.6"],"绘制贝塞尔二次曲线":["134.1"],"绘制贝塞尔三次曲线":["134.2"],"刮刮乐":["135.0"],"代码":["135.2","136.2","137.2","138.2","144.1","148.2","152.3","152.9","152.12","153.5"],"时钟":["136.0"],"梅花特效":["137.0"],"画板":["138.0"],"echarts":["139.0"],"pixijs":["140.0","142.0","143.0","145.0","146.0","147.0","149.0"],"为精灵添加事件":["140.1"],"为图形添加事件":["140.2"],"用法示例":["141.7"],"graphics":["142.2"],"添加文字":["143.1"],"使用文字作为精灵的遮罩":["143.2"],"波纹涟漪效果":["144.0"],"创建应用":["145.1"],"添加滤镜":["145.2"],"绘制椭圆":["147.1"],"绘制多边形":["147.2"],"创建圆角矩形":["147.3"],"谷歌恐龙小游戏":["148.0"],"素材图片":["148.1"],"单次添加资源":["149.1"],"一次添加多个资源":["149.2"],"svg":["150.0"],"基本图形":["150.2"],"线条":["150.3"],"矩形":["150.4"],"圆形":["150.5"],"椭圆":["150.6"],"多边形":["150.7"],"折线":["150.8"],"路径":["150.9"],"渲染场景和物体":["152.0"],"渲染第一个场景和物体":["152.1"],"轨道控制器查看物体":["152.4"],"导入轨道控制器":["152.6"],"创建轨道控制器":["152.7"],"每一帧根据控制器更新画面":["152.8"],"坐标轴辅助器":["152.10"],"物体的缩放":["153.0"],"缩放":["153.1"],"位移":["153.2"],"旋转":["153.3"],"效果":["153.4"],"vitepress":["154.0"],"初始化项目":["154.2"],"npx":["154.3"],"本地运行":["154.4"],"目录结构":["154.6"],"配置导航栏部分":["154.9"],"配置侧边栏部分":["154.10"]},{"0":["10.12","23.1","41.1","48.9","54.15","54.16","55.6","84.1","113.1","131.1","136.3"],"1":["6.4","7.2","9.15","10.5","10.18","13.5","13.21","14.11","14.16","15.2","17.10","18.1","18.2","18.3","18.4","18.6","18.18","18.22","18.27","18.30","19.1","21.3","23.1","29.3","29.8","30.4","31.1","32.3","32.7","33.3","33.10","34.3","35.6","36.6","38.1","39.1","39.3","41.1","41.17","42.2","42.4","44.6","48.28","49.1","52.3","52.10","52.12","52.13","53.2","53.5","53.6","54.14","63.3","65.4","67.4","68.3","68.7","69.1","70.1","72.6","72.11","72.15","73.3","73.9","84.1","87.1","87.2","93.3","95.3","95.8","98.1","99.1","99.7","99.8","99.14","99.15","99.16","99.18","99.19","99.21","100.1","110.2","110.3","110.4","110.5","110.7","110.8","110.11","111.1","116.1","117.1","118.8","121.18","122.2","122.3","122.11","122.14","125.1","125.5","127.3","127.4","127.5","128.1","131.1","141.3","146.1","150.1","154.7"],"2":["6.4","7.2","13.21","14.11","14.16","18.3","18.5","18.6","18.7","18.8","18.9","18.10","18.11","18.12","18.13","18.14","18.15","18.16","18.19","18.23","18.28","23.2","29.4","29.9","30.5","32.4","32.8","33.4","33.11","34.4","38.2","39.3","40.1","40.2","41.18","42.3","42.5","44.7","49.1","52.12","52.13","53.2","63.4","67.5","69.2","70.2","72.7","72.12","72.16","73.3","73.4","87.2","98.2","100.2","110.4","110.8","110.9","110.10","110.11","110.12","116.2","117.2","118.8","121.18","122.3","122.11","122.14","125.2","127.4","128.2","131.2","141.4","146.2","154.8"],"3":["6.4","7.2","13.21","18.4","18.8","18.17","18.18","18.19","18.20","18.24","29.5","29.10","30.6","32.5","32.9","33.5","33.12","34.5","38.3","40.2","41.19","42.6","46.0","52.3","52.12","63.5","67.6","69.3","70.3","72.8","72.13","72.17","73.3","73.5","98.3","100.3","113.2","116.3","117.3","125.3","127.5","128.3","131.3","141.5","146.3"],"4":["18.9","18.21","18.22","18.23","18.24","18.25","18.33","29.6","29.11","30.7","32.10","33.6","38.4","41.20","42.7","63.6","69.4","70.4","72.9","72.18","73.6","98.4","100.4","116.4","117.4","125.4","128.4","131.4","141.6","146.4"],"5":["10.5","18.10","18.26","18.27","18.28","29.12","30.8","32.11","33.7","38.5","42.8","69.5","73.3","73.7","98.5","100.5","110.9","116.5","117.5","117.6","125.5","128.5"],"6":["18.11","18.29","18.30","18.31","18.32","18.33","29.13","38.6","42.9","69.6","73.8","98.6","100.6","110.10","116.6","117.6","125.6"],"7":["18.12","29.14","38.7","42.10","110.11","116.7","117.6","125.7"],"8":["18.13","29.15","38.8","42.11","110.12","116.8"],"9":["18.14","29.16","38.9","42.12","117.6"],"10":["18.15","29.17","38.10","49.6"],"11":["18.16","29.18","38.12"],"12":["29.19"],"13":["29.20"],"14":["149.1"],"15":["149.2"],"18":["10.7"],"19":["149.1"],"26":["149.2"],"28":["95.8"],"31":["84.1"],"50":["133.3"],"100":["55.1","133.4"],"123":["1.1","52.5"],"127":["113.1"],"128":["113.1"],"200":["133.3","134.1"],"300":["133.3","134.1","136.3"],"400":["135.2","136.3"],"404":["111.0"],"500":["68.3"],"600":["130.1","135.2","136.3"],"800":["136.3"],"1970":["84.4"],"1997":["6.4"],"1998":["6.4"],"2013":["110.6"],"2050":["84.3"],"12345":["97.5"],"qq":["0.0"],"class":["5.0","5.1","16.5","21.2","32.10","32.11","72.8","75.4","90.2","102.1","102.6","102.8","104.6","138.4"],"使用":["5.1","5.5","5.6","8.7","8.8","8.9","8.11","8.12","8.13","8.14","8.20","12.2","15.5","17.6","20.1","20.6","23.2","29.24","35.6","37.13","37.14","38.2","38.5","48.2","51.6","51.7","54.15","54.16","55.6","66.2","69.1","69.3","69.4","69.5","69.6","70.1","70.3","78.1","78.2","78.3","79.1","79.2","80.1","80.2","88.4","98.6","102.6","106.4","116.6","116.7","120.13","121.21","122.14","124.5","127.6","127.7","130.0"],"关键字可以定义一个类":["5.1"],"通过类创建对象时":["5.2"],"需要使用":["5.2"],"new":["5.2","7.6","9.15","48.1","71.1","71.5","84.2","90.1","92.2","92.4","147.2","147.3","147.4","147.5","149.1","149.2"],"es6":["5.3","7.2","8.23","10.14","12.1","13.1","13.6","15.0","52.3","72.8","90.2","108.0"],"的类支持继承":["5.3"],"可以使用":["5.3","17.3","17.9","34.4","52.9","56.1","81.1","81.2","82.1","82.2","82.4","82.5","82.6","83.1","83.2","83.4","83.5","83.6"],"子类可以重写继承自父类的方法":["5.4"],"js":["5.4","5.6","7.4","7.5","7.6","8.16","8.17","8.18","8.19","8.21","8.22","9.12","9.13","9.14","9.15","9.16","10.5","10.6","10.10","10.15","10.16","11.3","11.13","13.1","13.6","13.21","14.3","14.4","14.5","14.6","14.9","14.10","14.12","14.16","29.22","29.23","33.11","33.13","33.14","33.15","37.0","37.3","37.4","37.7","41.4","41.6","41.17","48.15","48.21","48.24","48.32","49.2","49.3","49.5","49.6","50.3","50.8","50.11","50.12","53.11","54.2","54.14","54.18","54.19","55.1","55.2","55.3","55.6","55.8","56.2","60.2","61.2","62.2","63.8","63.9","68.3","68.6","68.7","69.0","69.2","69.6","70.0","70.4","72.2","73.1","73.3","73.4","73.5","73.6","73.7","73.8","77.6","77.7","78.3","79.1","79.2","84.5","92.3","92.6","92.8","92.18","95.8","97.3","97.5","98.3","98.4","98.5","98.6","103.1","110.8","117.4","118.2","118.4","118.6","118.7","118.12","119.1","120.3","120.4","120.6","120.7","120.12","120.14","120.16","120.17","121.5","121.6","121.12","121.15","122.3","128.4","131.2","131.3","132.0","133.2","133.3","133.4","133.5","134.1","134.2","140.1","140.2","141.7","142.2","143.1","143.2","145.1","145.2","146.1","146.3","147.1","147.2","147.3","147.4","147.5","149.1","149.2","151.0","152.6","152.7","152.8","153.1","153.2","153.3","154.9","154.10"],"static":["5.5","118.3"],"关键字定义静态方法":["5.5"],"静态方法属于类本身":["5.5"],"和":["5.6","13.22","16.14","26.5","26.6","26.14","26.15","29.22","31.4","37.9","39.4","41.2","41.7","49.11","49.12","50.3","54.16","99.14","101.5","101.9","102.8","102.10","123.0"],"setter":["5.6"],"get":["5.6","7.2","41.7","97.3","97.5","98.5","102.10","118.8","118.14","118.15"],"set":["5.6","7.2","9.1","9.3","9.4","9.6","9.8","9.10","9.11","9.12","9.15","14.5","14.15","49.10","69.1"],"关键字定义属性的读取器和设置器":["5.6"],"的介绍":["6.0"],"入门教程":["6.1"],"简介":["6.2","38.1"],"简称":["6.2","6.3"],"es":["6.2","6.3"],"与":["6.3","41.15","42.9","42.10","101.11","123.0","154.11"],"javascript":["6.3","8.1","8.2","10.3","10.7","10.12","10.20","12.2","12.3","12.5","13.3","13.4","13.9","13.13","13.14","13.15","13.17","13.18","15.2","15.3","15.5","15.8","15.9","15.11","29.1","29.9","30.1","36.2","36.3","36.4","37.16","51.1","51.2","51.4","52.2","52.3","52.4","52.5","52.7","52.8","52.10","52.12","52.13","53.13","54.10","57.2","59.2","65.2","65.3","66.2","67.1","67.4","67.5","67.6","71.5","72.1","72.2","72.3","72.4","72.10","74.1","74.3","74.4","76.4","77.12","87.1","88.8","88.10","88.11","89.2","89.3","90.0","90.1","90.2","91.1","93.1","101.4","101.6","103.4","105.3","151.0"],"的关系":["6.3"],"版本发布记录":["6.4"],"以下是每个":["6.4"],"版本的主要内容概述":["6.4"],"es1":["6.4"],"第一个":["6.4","41.29"],"版本":["6.4"],"定义了基本的语法和数据类型":["6.4"],"包括变量":["6.4"],"操作符":["6.4","106.4"],"函数和控制结构等":["6.4"],"es2":["6.4"],"对":["6.4"],"进行了一些修订":["6.4"],"没有引入大的新功能":["6.4"],"es3":["6.4","108.0"],"数据结构":["7.0","9.0"],"map":["7.1","7.2","7.6","14.4","30.17","35.2","35.3","35.6","49.10","69.6"],"在":["7.2","8.6","9.3","10.10","18.4","30.4","30.5","30.18","31.3","31.9","31.11","31.13","33.10","34.1","34.3","34.6","34.7","35.2","35.3","35.4","35.5","36.1","36.2","39.1","41.0","41.31","42.2","42.6","42.8","43.2","43.13","50.0","66.2","67.3","68.0","88.2","89.2","89.3","90.0","90.1","90.2","93.1","95.3","103.4","110.10","110.12","154.1","154.7","154.9"],"中":["7.2","10.10","30.18","31.3","31.9","31.11","31.13","34.1","34.3","34.6","34.7","35.2","35.3","35.4","35.5","36.2","39.1","43.13","66.2","68.0","89.2","89.3","90.0","93.1"],"数据结构提供了以下常用的方法":["7.2"],"key":["7.2","35.6"],"value":["7.2","9.3","9.5","9.7","41.2","41.5","41.29","87.1"],"向":["7.2"],"中添加键值对":["7.2"],"如果键已存在":["7.2"],"则更新对应的值":["7.2"],"获取指定键对应的值":["7.2"],"如果键不存在则返回":["7.2"],"undefined":["7.2","10.5","55.1","101.9"],"has":["7.2"],"var":["7.4","7.5","7.6","9.12","9.13","9.14","9.15","9.16","10.10","50.8","52.3","52.4","52.7","52.10","52.12","52.13","54.19","55.2","55.6","55.8","73.4","73.8","84.5","92.3","120.4","136.3"],"kvarray":["7.4"],"key1":["7.4"],"mymap1":["7.5"],"first":["7.6","16.12"],"模块化":["8.0"],"随着前端技术的不断发展":["8.1"],"在传统的":["8.2"],"在模块中定义的变量":["8.3"],"模块化将代码分割成多个小块":["8.4"],"模块化使得代码可以被多个模块共享和复用":["8.5"],"export":["8.9","8.18","98.5"],"关键字导出一个类":["8.9"],"通过使用":["8.10"],"import":["8.11","8.12","8.13","33.11","33.13","33.14","33.15","35.5","41.4","41.6","110.10","142.2","143.1","145.1","149.1","149.2"],"关键字导入其他模块中的类":["8.13"],"as":["8.14","33.15","142.2","143.1","145.1","149.1","149.2"],"来导入整个模块的内容":["8.14"],"并将其绑定到一个变量上":["8.14"],"除了命名导出":["8.15"],"module2":["8.16","8.17","8.18"],"default":["8.18","108.0"],"一个模块可以同时有命名导出和默认导出":["8.19"],"module3":["8.19"],"module4":["8.21","8.22"],"除了静态导入外":["8.23"],"还引入了动态导入":["8.23"],"可以在代码运行时根据条件来导入模块":["8.23"],"在使用":["8.24","35.6","120.9"],"模块文件必须以":["8.25"],"在浏览器环境中":["8.26"],"模块中的代码在严格模式下运行":["8.27"],"导入和导出语句只能位于模块的顶层":["8.28"],"不能嵌套在其他块中":["8.28"],"tip":["8.28","19.1","73.9","77.2","92.4"],"方法":["9.3","9.4","9.5","9.6","9.7","9.8","9.9","13.22","30.17","78.2","78.3","79.2","80.1","84.1","95.9","95.13","95.14","120.13"],"移除":["9.4"],"移除值为":["9.5"],"的元素":["9.5"],"并返回一个布尔值来表示是否移除成功":["9.5"],"返回一个新的迭代器对象":["9.6","9.8"],"该对象包含":["9.6","9.8"],"对象中的按插入顺序排列的所有元素的值的":["9.6"],"返回一个布尔值":["9.7"],"表示该值在":["9.7"],"属性":["9.10","24.7","30.5","35.6","80.2"],"返回":["9.10"],"array":["9.12","14.0","14.3","73.1"],"转":["9.12"],"myset":["9.12"],"a":["9.14","9.15","9.16","13.21","19.1","26.3","28.1","44.4","52.3","52.12","53.3","53.5","53.6","54.18","88.7","99.14"],"函数的扩展":["10.0"],"调用函数的时候传参了":["10.2"],"之前的默认值实现方式":["10.3"],"const":["10.3","10.7","10.12","10.15","13.1","13.3","13.4","13.6","13.9","13.15","13.17","13.18","13.21","15.2","15.3","15.8","15.11","41.28","48.21","67.6","69.0","69.2","70.4","71.5","73.3","77.6","77.7","95.8","117.4","118.2","118.4","118.6","118.7","120.12","120.16","120.17","122.3","140.2","142.2","143.2","145.1","145.2","147.1","147.2","147.3","147.4","147.5","149.1","149.2"],"multiply":["10.3"],"x":["10.3","10.5","10.6","103.5","128.2"],"y":["10.3","10.5","103.5","128.2","154.2"],"不传参数":["10.4"],"参数默认值可以与解构赋值的默认值":["10.5"],"结合起来使用":["10.5"],"function":["10.5","10.6","12.5","30.15","48.24","50.2","50.8","63.8","65.2","65.3","67.4","67.5","68.3","68.6","68.7","71.5","72.2","72.4","95.8","97.5","98.5","103.1","103.3","103.5","104.4","136.3","152.8"],"foo":["10.5","13.1","13.6","52.3","52.5"],"console":["10.5","10.7","14.16","55.2","61.2","95.8"],"log":["10.5","10.7","14.16","55.2","61.2","95.8","99.8"],"通常情况下":["10.6"],"定义了默认值的参数":["10.6"],"应该是函数的尾参数":["10.6"],"因为这样比较容易看出来":["10.6"],"到底省略了哪些参数":["10.6"],"如果非尾部的参数设置默认值":["10.6"],"实际上这个参数是没法省略的":["10.6"],"例一":["10.6","52.13"],"f":["10.6"],"接收很多参数的时候":["10.7"],"普通时候":["10.7"],"loguser":["10.7","13.18"],"username":["10.7","13.18","98.6"],"zjr":["10.7"],"age":["10.7","13.3","13.4","95.8"],"sex":["10.7"],"male":["10.7"],"需要能够记住参数的顺序":["10.7"],"如果参数较多那么需要配合文档":["10.7"],"使用不方便":["10.7"],"jerry":["10.7"],"接收一个对象作为参数":["10.7"],"不需要记住参数的顺序":["10.7"],"参数":["10.8"],"剩余语法":["10.9"],"在讲解剩余参数前":["10.10"],"我们先来看看":["10.10"],"剩余参数在函数参数中都解决了哪些问题":["10.10"],"为什么会引入剩余参数的概念":["10.10"],"es5":["10.10","10.13","13.20","90.1","108.0"],"函数经常会传入不定参数":["10.10"],"在传入不定参数时":["10.10"],"的给出的解决方案是通过":["10.10"],"arguments":["10.10","10.12"],"对象来获取函数调用时传递的参数":["10.10"],"对象不是一个数组":["10.10"],"它是一个类数组对象":["10.10"],"所谓类数组对象":["10.10"],"就是指可以":["10.10"],"通过索引属性访问元素":["10.10"],"并且":["10.10"],"拥有":["10.10"],"length":["10.10","10.12","48.2"],"属性的对象":["10.10"],"一个简单的类数组对象是长这样的":["10.10"],"箭头函数的剩余参数":["10.11"],"箭头函数的参数部分即使只有一个剩余参数":["10.11"],"作为数组的应用":["10.12"],"add":["10.12","39.3","79.2","99.5","103.1","103.5"],"args":["10.12"],"let":["10.12","14.3","14.10","14.12","48.15","48.32","49.6","53.3","54.18","55.4","55.6","55.7","68.7","73.5","73.7","97.3","98.4","98.6","101.2","101.3","101.9","141.7"],"sum":["10.12"],"for":["10.12","14.12","37.12","52.12","69.2"],"i":["10.12","49.6","55.6"],"当然此处":["10.12"],"本节结合了":["10.13"],"箭头函数的基本语法如下":["10.15"],"functionname":["10.15"],"当箭头函数没有参数或有多个参数时":["10.16"],"需要使用括号来表示参数列表":["10.16"],"this":["10.17","13.6","34.4","34.5","95.3","95.4","95.5","95.8","95.11","95.14"],"箭头函数与传统函数有一个重要的区别":["10.17"],"箭头函数没有自己的":["10.17"],"它继承自外层作用域的":["10.17"],"在传统函数中":["10.17"],"的值是在函数调用时动态确定的":["10.17"],"取决于调用方式":["10.17"],"如果箭头函数只有一个参数":["10.18"],"可以省略参数列表的括号":["10.18"],"es2017":["10.19","108.0"],"允许函数的最后一个参数有尾逗号":["10.19"],"trailing":["10.19"],"comma":["10.19"],"此前":["10.19"],"函数定义和调用时":["10.19"],"命令的参数省略":["10.20"],"语言的":["10.20"],"try":["10.20"],"字符串的常用方法":["11.0"],"操作方法":["11.1","48.5"],"这里增的意思并不是说直接增添内容":["11.2"],"用于将一个或多个字符串拼接成一个新字符串":["11.3"],"这里的删的意思并不是说删除原字符串的内容":["11.4"],"而是创建字符串的一个副本":["11.4"],"再进行操作":["11.4"],"常见的有":["11.4"],"slice":["11.4"],"substr":["11.4"],"substring":["11.4"],"这里改的意思也不是改变原字符串":["11.5"],"trimleft":["11.6"],"trimright":["11.6"],"删除前":["11.6"],"接收一个整数参数":["11.7"],"padend":["11.8"],"复制字符串":["11.8"],"如果小于指定长度":["11.8"],"则在相应一边填充字符":["11.8"],"touppercase":["11.9"],"大小写转化":["11.9"],"返回给定索引位置的字符":["11.11"],"从字符串开头去搜索传入的字符串":["11.12"],"并返回位置":["11.12"],"includes":["11.13"],"从字符串中搜索传入的字符串":["11.13"],"并返回一个表示是否包含的布尔值":["11.13"],"方法接受一个整数作为参数":["11.14"],"转换方法":["11.15","48.25"],"把字符串按照指定的分割符":["11.16"],"拆分成数组中的每一项":["11.16"],"模板匹配方法":["11.17"],"接收一个参数":["11.18","11.19"],"可以是一个正则表达式字符串":["11.18","11.19"],"也可以是一个":["11.18","11.19"],"接收两个参数":["11.20"],"第一个参数为匹配的内容":["11.20"],"第二个参数为替换的元素":["11.20"],"字符串的扩展":["12.0"],"来在模板字符串中插入变量或表达式":["12.2"],"其中":["12.2"],"中的内容会被解析并替换为实际的值":["12.2"],"使用模板字符串可以很方便地创建多行文本":["12.3"],"不需要使用":["12.3"],"n":["12.3"],"来手动添加换行符":["12.3"],"模板字符串可以嵌套在其他模板字符串中":["12.4"],"使得字符串拼接更加灵活":["12.4"],"可以在模板字符串前添加一个标签函数":["12.5"],"这个标签函数将模板字符串的各个部分解析成多个参数":["12.5"],"使得我们可以对字符串进行自定义处理":["12.5"],"tagfunc":["12.5"],"strings":["12.5"],"对象的扩展":["13.0"],"允许在大括号里面":["13.1"],"直接写入变量和函数":["13.1"],"作为对象的属性和方法":["13.1"],"这样的书写更加简洁":["13.1"],"bar":["13.1","52.3"],"baz":["13.1"],"prop":["13.3","13.4","92.11","92.20"],"值":["13.4"],"可以得到值的表达式":["13.4"],"func":["13.4","67.4","67.5","68.7"],"age2":["13.4"],"点语法是方括号语法的特殊形式":["13.5"],"关键字":["13.6","55.1","90.2","95.0","109.2"],"我们知道":["13.6","95.12"],"关键字总是指向函数所在的当前对象":["13.6"],"又新增了另一个类似的关键字":["13.6"],"指向当前对象的原型对象":["13.6"],"proto":["13.6","92.5","92.7","93.1"],"hello":["13.6","52.3","52.7"],"obj":["13.6","52.3","52.7","52.10","52.12","52.13","92.8","92.11","92.12","92.13","92.14","92.16","92.18","92.19"],"world":["13.6","52.3","52.7"],"find":["13.6"],"对象不能直接展开":["13.8"],"必须在":["13.8"],"中展开":["13.8"],"apple":["13.9","13.15"],"color":["13.9","138.3"],"红色":["13.9"],"如果展开一个空对象":["13.11"],"如果展开的不是对象":["13.12"],"则会自动将其转为对象":["13.12"],"再将其属性罗列出来":["13.12"],"如果展开运算符后面是字符串":["13.13"],"它会自动转成一个类似数组的对象":["13.13"],"因此返回的不是空对象":["13.13"],"不会展开对象中的对象属性":["13.15"],"userparam":["13.18"],"defaultperam":["13.18"],"is":["13.20","92.15","119.1"],"比较两个值是否相等":["13.20"],"只有两个运算符":["13.20"],"相等运算符":["13.20"],"和严格相等运算符":["13.20"],"它们都有缺点":["13.20"],"前者会自动转换数据类型":["13.20"],"assign":["13.21","92.5","92.6"],"方法用于对象的合并":["13.21"],"将源对象":["13.21"],"source":["13.21","24.0","129.1"],"的所有可枚举属性":["13.21"],"复制到目标对象":["13.21"],"target":["13.21","92.5","92.6","108.0"],"source1":["13.21"],"b":["13.21","52.12"],"source2":["13.21"],"c":["13.21","52.12","110.6"],"注意":["13.21","52.11","73.9"],"keys":["13.22","52.10","92.16"],"values":["13.22","92.19"],"entries":["13.22","92.8"],"返回一个数组":["13.22"],"成员是参数对象自身的":["13.22"],"不含继承的":["13.22"],"所有可遍历":["13.22"],"enumerable":["13.22"],"属性的键名":["13.22"],"方法返回一个数组":["13.22"],"属性的键值":["13.22"],"of":["14.1","49.10","49.11"],"from":["14.2","14.3","33.13","33.14","33.15","35.5","122.3","142.2","143.1","143.2","145.1","149.1","149.2"],"将类数组对象或可迭代对象转化为数组":["14.2"],"arr":["14.3","69.2","73.4"],"查找":["14.8","14.15"],"则返回符合条件的第一个元素":["14.8"],"查找索引":["14.9"],"则返回符合条件的第一个元素的索引":["14.9"],"填充":["14.10"],"覆盖":["14.11"],"开始覆盖的位置索引":["14.11"],"遍历":["14.12"],"遍历键值对":["14.12"],"遍历键名":["14.13"],"遍历键值":["14.14"],"数组是否包含指定值":["14.15"],"嵌套数组转一维数":["14.16"],"先遍历元素":["14.17"],"再对数组执行":["14.17"],"flat":["14.17"],"引入了解构赋值":["15.0"],"数组解构赋值允许我们根据数组的顺序":["15.1"],"numbers":["15.2","73.3"],"我们可以使用逗号将不需要的元素跳过":["15.3"],"如果数组元素不足以匹配变量的个数":["15.4"],"可以为变量指定默认值":["15.4"],"避免出现":["15.4"],"语法可以将剩余的数组元素赋值给一个新数组":["15.5"],"使用解构赋值":["15.6"],"可以非常简洁地交换两个变量的值":["15.6"],"无需使用第三个变量":["15.6"],"对象解构赋值允许我们根据对象的属性名":["15.7"],"person":["15.8","15.11","92.3","102.1","102.6","106.7"],"我们可以通过在解构时为变量指定新的名称":["15.9"],"来实现重命名":["15.9"],"和数组解构一样":["15.10"],"可以为对象解构赋值时":["15.10"],"为变量指定默认值":["15.10"],"对象解构也支持嵌套解构":["15.11"],"从嵌套对象中提取值":["15.11"],"选择器":["16.0","16.4"],"选择页面所有元素":["16.1"],"通过标签名选择元素":["16.2"],"通过类名选择元素":["16.3"],"html":["16.5","16.9","16.14","18.22","18.23","18.24","18.25","20.2","21.0","21.2","24.10","24.11","25.4","26.11","26.13","27.3","27.4","27.5","28.1","29.23","37.17","43.9","55.5","75.4","76.2","122.5","130.1","135.2","138.3","150.3","150.4","150.5","150.7","150.8","150.9","154.7"],"p":["16.5","26.2","52.7","52.10"],"good":["16.5"],"作用":["16.6","77.5"],"选中多个选择器对应的元素":["16.6"],"在所有后代节点中选":["16.7"],"只在亲儿子中选":["16.8"],"选择所有指定元素的":["16.9"],"相邻":["16.9"],"后一个兄弟节点":["16.9"],"h1":["16.9","26.1"],"根据元素状态或所处":["16.10"],"css":["16.11","16.14","20.5","20.6","21.1","21.3","22.0","23.1"],"按这个顺序声明":["16.11"],"c3":["16.12","16.13","16.14"],"选择符":["16.12","16.13"],"含义":["16.12","16.13"],"e":["16.12","16.13"],"child":["16.12","43.8"],"第一个子元素":["16.12"],"last":["16.12"],"最后一个子元素":["16.12"],"att":["16.13"],"选择具有":["16.13"],"伪元素选择器利用":["16.14"],"创建新标签元素":["16.14"],"而不需要":["16.14"],"标签":["16.14","24.0","27.0","30.4"],"从而简化":["16.14"],"结构":["16.14"],"before":["16.14"],"after":["16.14"],"一篇搞清伪类和伪元素":["16.15"],"布局":["17.0","17.1","18.0","20.7"],"灵活的网页布局解决方案":["17.0"],"flex":["17.1","17.2","17.4","17.6","17.7","17.8","17.9","17.10","20.7"],"要启用":["17.1"],"布局具有一个主轴和一个交叉轴":["17.2"],"默认情况下":["17.2","17.4","77.10"],"主轴是水平方向":["17.2"],"交叉轴是垂直方向":["17.2"],"justify":["17.3","17.10","18.13","18.14","18.15"],"content":["17.3","18.14","21.1"],"属性控制主轴上的对齐方式":["17.3"],"align":["17.3","17.9","24.11"],"items":["17.3","18.13"],"属性控制交叉轴上的对齐方式":["17.3"],"项目会在一行中排列":["17.4"],"flow":["17.5"],"是":["17.5","30.22","32.1","32.14","52.2","58.0","76.4","150.1"],"容器":["17.8"],"在多行":["17.9"],"容器中":["17.9"],"布局非常适合实现常见的网页布局需求":["17.10"],"例如":["17.10","25.2","32.3","88.11"],"居中对齐":["17.10"],"通过":["17.10","51.3","63.4","63.5","80.1","95.8","95.11","103.2","118.3","118.6","118.8"],"理解":["18.1","41.1"],"grid":["18.1","18.3","18.6","18.7","18.8","18.10","18.11","18.12","18.16","18.18","18.19","18.20","18.22","18.23","18.24","18.25","20.8"],"网格容器与网格项":["18.2"],"行与列":["18.3"],"布局的核心是行和列":["18.3"],"网格线与网格跨度":["18.4"],"template":["18.6","18.7","18.8","42.12","46.1","46.2","46.4","138.4"],"columns":["18.6"],"areas":["18.7"],"column":["18.10","18.16"],"gap":["18.10"],"auto":["18.11"],"网格轨道的大小和增长":["18.18"],"网格轨道":["18.18"],"网格模板的定义":["18.19"],"通过使用网格模板":["18.19"],"响应式设计与媒体查询":["18.20"],"布局与响应式设计完美结合":["18.20"],"通过使用媒体查询":["18.20"],"media":["18.20"],"简单网页布局":["18.22"],"布局可以用于创建简单的网页布局":["18.22"],"如标题":["18.22"],"导航栏和内容区域":["18.22"],"复杂网页布局":["18.23"],"布局可以应用于创建复杂的网页布局":["18.23"],"如新闻网站的首页布局":["18.23"],"doctype":["18.23","18.24","18.25","76.2"],"布局的嵌套与组合":["18.24"],"布局可以嵌套使用":["18.24"],"从而创建更加复杂和多样化的布局":["18.24"],"网格的动态调整":["18.25"],"布局的一个重要特点是网格项目的动态调整":["18.25"],"网格项可以根据内容的大小自动调整":["18.25"],"也可以通过调整网格容器的大小来实现动态布局":["18.25"],"lang":["18.25","76.2"],"en":["18.25"],"head":["18.25","118.14"],"meta":["18.25"],"最佳实践与优化建议":["18.33"],"一般情况下":["19.0"],"权重":["19.1"],"详细描述":["19.1"],"计算方式":["19.1"],"每个选择器":["19.1"],"都可以算出一组权重":["19.1"],"格式为":["19.1","113.4"],"水平垂直居中":["20.0"],"line":["20.1","147.5","150.3"],"height":["20.1","23.1","135.2","149.2"],"div":["20.2","21.2","24.11","26.7","42.12","43.9","46.1","46.2","135.2","138.4"],"margin":["20.3"],"父元素使用":["20.3"],"box":["20.5","20.6"],"transform":["20.6","128.4","153.4"],"width":["20.6","21.1","22.0","23.1","61.1","130.1","135.2","149.1","149.2"],"文本溢出隐藏":["21.0"],"webkit":["21.2","22.0"],"内核":["21.2"],"text":["21.2","21.3","24.11"],"这里是多行文本内容":["21.2"],"兼容较好":["21.3"],"滚动条":["22.0"],"scrollbar":["22.0"],"纵向":["22.0"],"8px":["22.0"],"绘制三角形":["23.0"],"使用边框":["23.1"],"朝上的三角形":["23.1"],"arrow":["23.1"],"up":["23.1"],"border":["23.1"],"clip":["23.2"],"path":["23.2","120.3","120.10","120.12","120.13","120.14","150.9"],"音视频标签":["24.0"],"音视频标签中的资源除了可以用":["24.0"],"src":["24.0","110.12"],"属性来指定外":["24.0"],"还可以用":["24.0"],"mime":["24.1"],"format":["24.2"],"格式":["24.3"],"audio":["24.5"],"video":["24.6","26.15"],"标签的属性":["24.7"],"描述":["24.7","37.18","53.2","53.3","53.7","84.1"],"方法名":["24.8"],"音频":["24.10"],"视频":["24.11"],"style":["24.11","79.1"],"center":["24.11"],"button":["24.11","26.12","75.4","138.3"],"onclick":["24.11"],"playpause":["24.11"],"超文本标记语言":["25.0"],"的基本结构":["25.1"],"文档由一系列嵌套的":["25.1"],"标签组成":["25.1"],"一个基本的":["25.1"],"标签和元素":["25.2"],"标签用于定义网页的结构和内容":["25.2"],"它们由尖括号包围":["25.2"],"标签通常成对出现":["25.2"],"包含开始标签和结束标签":["25.2"],"tagname":["25.2"],"的新特性":["25.3"],"学习":["25.4"],"最重要的是通过实践来加深理解":["25.4"],"创建简单的网页":["25.4"],"当描述":["26.0"],"到":["26.1","84.1","113.1"],"img":["26.4","117.6"],"ul":["26.5","75.4"],"ol":["26.6"],"span":["26.8"],"table":["26.9","112.2","112.3"],"tr":["26.9"],"th":["26.9"],"br":["26.10"],"input":["26.11","77.6","77.8","138.3"],"form":["26.13"],"脚注和导航标签":["26.14"],"header":["26.14"],"footer":["26.14"],"nav":["26.14"],"block":["27.1"],"level":["27.1"],"elements":["27.1","27.2"],"块级标签通常用于创建页面的大型结构和组织":["27.1"],"它们会单独占据一行":["27.1"],"inline":["27.2"],"内联标签用于包裹文本的一部分":["27.2"],"它们不会独占一行":["27.2"],"标签可以嵌套在其他标签中":["27.3"],"标签可以包含属性":["27.4"],"属性用于为标签提供额外的信息或设置":["27.4"],"html5":["27.5"],"允许开发者创建自定义的标签":["27.5"],"这些标签可能在":["27.5"],"type":["28.1","109.2","138.3"],"password":["28.1"],"浏览器自动填充账号和密码":["28.1"],"用于构建现代":["29.0"],"react":["29.1","29.4","30.18","30.19","30.21","30.22","31.1","33.1","33.8","33.9","33.10","33.13","33.14","33.15","34.1","34.3","34.6","34.7","35.2","35.3","35.4","35.5","36.2"],"是由":["29.1"],"facebook":["29.1"],"开源的":["29.1"],"库":["29.1","29.23","39.3","145.3","151.0"],"的特点":["29.2","119.2"],"虚拟":["29.4"],"dom":["29.4","29.22","31.6","42.4","75.1","75.2","75.3","76.0","76.1","77.2","77.11"],"生态系统丰富":["29.6"],"在学习":["29.7"],"组件":["29.8","31.0","33.13"],"components":["29.8"],"jsx":["29.9","30.0","30.1","30.15","30.17","32.3","32.7","32.8","32.9","32.10","32.11","33.11","33.13","33.14","33.15","35.5"],"props":["29.10","31.4","32.0","32.1","32.3","32.4","32.5","32.15","34.7","35.4","42.2"],"state":["29.11","34.0","34.1","34.3","34.4","34.5","39.1","39.6"],"事件处理":["29.13","77.0"],"列表渲染":["29.15","35.0"],"表单处理":["29.16"],"高阶组件":["29.18","30.20"],"hooks":["29.20","30.22"],"环境搭建":["29.21"],"本地引入相关的":["29.23"],"入门的时候":["29.23"],"我们建议采取方式一":["29.23"],"如果是本地引入的话":["29.23"],"可以这样写":["29.23"],"引入react相关的js库":["29.23"],"如果是通过":["29.23"],"cdn":["29.23"],"的方式引入的话":["29.23"],"脚手架":["29.24"],"vite":["29.24","110.4","110.10"],"创建":["29.24","54.9","114.0","117.4","120.16"],"选择":["29.24","44.4"],"原理":["30.2"],"并不是直接由浏览器理解的语法":["30.2"],"而是通过":["30.2"],"babel":["30.2"],"等工具进行转换后":["30.2"],"再变成普通的":["30.2"],"嵌套":["30.6"],"表达式":["30.7","53.12"],"注释":["30.8"],"中的组件化开发":["30.9"],"函数组件是一种简单的声明式组件":["30.10"],"它是一个纯函数":["30.10"],"类组件是一种功能更强大的组件":["30.11"],"它是一个":["30.11"],"使用组件时":["30.12"],"中的条件渲染":["30.13"],"if":["30.14","36.2","36.3","36.4","36.6","37.9","55.2"],"语句":["30.14","49.1","49.2","49.3","49.5","52.13"],"中的列表渲染":["30.16"],"中的表单处理":["30.18"],"处理用户输入的表单数据是":["30.18"],"web":["30.18","120.16","151.0"],"应用程序中的常见任务":["30.18"],"我们可以通过对表单元素的事件监听和状态更新":["30.18"],"中的状态提升":["30.19"],"状态提升是一种在":["30.19"],"中共享状态的技术":["30.19"],"允许将共享的状态提升到共同的父组件":["30.19"],"实现组件之间的数据共享":["30.19"],"中的高阶组件":["30.20"],"hoc":["30.20"],"是一种在":["30.20","94.0"],"中的上下文":["30.21"],"context":["30.21","131.2","131.3","132.0","133.3","133.4","133.5","134.1","134.2","136.3"],"的上下文允许在组件树中共享数据":["30.21"],"而不必通过":["30.21"],"中的":["30.22"],"生命周期可以分为三个阶段":["31.1"],"组件创建":["31.1"],"组件更新和组件销毁":["31.1"],"组件创建阶段":["31.1"],"constructor":["31.1"],"组件被创建时调用":["31.1"],"是组件创建阶段的第一个方法":["31.3"],"它在组件实例被创建时调用":["31.3"],"getderivedstatefromprops":["31.4","31.8"],"是组件创建和更新阶段的一个静态方法":["31.4"],"在组件每次渲染之前都会被调用":["31.4"],"它接收":["31.4"],"是组件创建阶段的第三个方法":["31.5"],"它用于渲染组件的内容":["31.5"],"是组件创建阶段的最后一个方法":["31.6"],"它在组件挂载到":["31.6"],"后调用":["31.6"],"在组件更新阶段":["31.8"],"的作用和在组件创建阶段是一样的":["31.8"],"用于根据":["31.8"],"是组件更新阶段的第二个方法":["31.9"],"它在组件更新之前调用":["31.9"],"是组件更新阶段的第四个方法":["31.10"],"它在":["31.10"],"render":["31.10","136.3"],"之后":["31.10"],"是组件更新阶段的最后一个方法":["31.11"],"它在组件更新之后调用":["31.11"],"是组件销毁阶段的唯一一个方法":["31.13"],"在组件即将被销毁时调用":["31.13"],"我们应该进行一些清理操作":["31.13"],"比如取消订阅":["31.13"],"的使用":["32.2","34.2","39.4","39.5","39.6"],"传递":["32.3"],"在父组件中":["32.3"],"可以通过在子组件上设置属性来传递":["32.3"],"默认":["32.4","55.1","129.1"],"有时候":["32.4","32.15","33.13"],"使用解构赋值简化":["32.5"],"在组件中访问":["32.5"],"的值类型":["32.6"],"字符串类型":["32.7"],"数字类型":["32.8"],"布尔值类型":["32.9"],"数组类型":["32.10"],"对象类型":["32.11"],"mycomponent":["32.11"],"的传递规则":["32.12"],"的不可变性":["32.13","34.6"],"验证":["32.14"],"为了确保组件接收到正确的":["32.14"],"我们可以使用":["32.14","36.2"],"proptypes":["32.14"],"来对":["32.14"],"进行验证":["32.14"],"我们希望在未传递某个":["32.15"],"时":["32.15","39.4"],"组件能够使用一个默认值":["32.15"],"这时可以通过设置组件的":["32.15"],"defaultprops":["32.15"],"来实现":["32.15"],"路由":["33.0","33.1","33.3","118.4"],"router":["33.2","33.8","33.13","33.14","33.15","38.0","38.3","118.4","118.8"],"路由是":["33.3"],"路由参数":["33.5"],"路由参数允许我们在":["33.5"],"编程式导航":["33.7"],"要开始使用":["33.8"],"创建路由组件":["33.10"],"首先":["33.10"],"我们需要创建几个页面组件":["33.10"],"它们将用于显示不同的页面视图":["33.10"],"定义路由":["33.11"],"接下来":["33.11"],"我们需要在应用中定义路由":["33.11"],"可以在顶层组件":["33.11"],"通常是":["33.11"],"app":["33.11","33.13","33.14","33.15","43.2","118.6","118.7","118.8","141.7","142.2","149.1","149.2"],"中使用":["33.11","122.11"],"route":["33.11","33.13","33.15"],"组件来定义路由":["33.11"],"渲染页面":["33.12"],"最后":["33.12"],"我们希望在一个页面中显示其他页面的内容":["33.13"],"这就需要使用嵌套路由":["33.13"],"允许我们在一个页面组件中定义嵌套的":["33.13"],"在实际开发中":["33.14"],"我们经常需要从":["33.14"],"url":["33.14","71.5","118.12"],"中获取参数来加载不同的数据或进行页面的定向":["33.14"],"允许我们在":["33.14"],"路径中定义参数":["33.14"],"并将参数传递给页面组件":["33.14"],"提供了":["33.15"],"link":["33.15"],"组件和编程式导航来实现页面之间的导航":["33.15"],"browserrouter":["33.15"],"状态":["34.0","39.1","132.0"],"初始化":["34.3","98.2"],"更新":["34.4"],"要更新":["34.4"],"的值":["34.4","34.6"],"异步更新":["34.5"],"需要注意的是":["34.5","106.5"],"setstate":["34.5"],"方法是异步的":["34.5"],"这意味着在调用":["34.5"],"是不可变的":["34.6"],"意味着我们不应该直接修改":["34.6"],"如果直接修改":["34.6"],"的传递":["34.7"],"通常是在组件的父组件中定义的":["34.7"],"并通过":["34.7"],"传递给子组件":["34.7"],"这样的设计有助于保持组件之间的独立性和可预测性":["34.7"],"当":["34.7","53.9","53.10","95.1"],"需要在多个组件中共享时":["34.7"],"可以将":["34.7"],"提升到共同的父组件中":["34.7"],"列表渲染是指根据数据数组来动态生成多个相似的元素":["35.1"],"方法实现列表渲染":["35.2"],"使用数组的":["35.2"],"方法是实现列表渲染的常见方式":["35.2"],"方法可以遍历数组的每个元素":["35.2"],"在实际应用中":["35.3","35.4","35.5"],"我们可能需要根据特定条件来渲染列表元素":["35.3"],"我们可以在":["35.3"],"方法中使用条件语句来实现条件渲染":["35.3"],"数据通常来自于父组件的状态或从外部":["35.4"],"api":["35.4","41.0","110.12"],"获取":["35.4","75.4"],"我们可以通过":["35.4"],"将数据传递给子组件":["35.4"],"然后在子组件中使用":["35.4"],"我们可能需要通过用户的交互来添加新的列表项":["35.5"],"我们可以通过修改数据数组的方式来实现添加列表项":["35.5"],"下面是一个示例":["35.5"],"演示了如何通过按钮点击来添加新的列表项":["35.5"],"方法渲染列表项时":["35.6"],"每个列表项都应该有一个唯一的":["35.6"],"条件渲染":["36.0"],"条件渲染是指根据特定条件来决定是否渲染组件或组件的一部分":["36.1"],"else":["36.2","36.3","36.4","36.6","49.2"],"实现条件渲染":["36.2","36.4"],"的":["36.2","39.3","101.8","117.6"],"除了使用":["36.3"],"我们还可以使用":["36.3"],"的三元表达式":["36.3"],"ternary":["36.3"],"operator":["36.3","53.13"],"来实现条件渲染":["36.3","36.4","36.5"],"除了":["36.4"],"和三元表达式":["36.4"],"我们还可以使用逻辑与":["36.4"],"逻辑与在":["36.4"],"除了上述方法":["36.5"],"我们还可以使用条件运算符":["36.5"],"也称为逻辑或":["36.5"],"nullish":["36.5"],"coalescing":["36.5"],"运算符":["36.5","52.11","53.0","53.2"],"条件运算符是":["36.5"],"使用适合场景的条件渲染方法":["36.6"],"根据具体的场景和需求选择合适的条件渲染方法":["36.6"],"例如使用":["36.6"],"三元表达式":["36.6"],"逻辑与":["36.6"],"vue":["37.1","37.3","37.4","37.7","38.3","40.1","40.2","41.23","41.28","41.30","42.4","42.5","42.12","43.8","43.11","44.3","44.4","45.1","46.1","46.2","46.4","110.8","137.2","138.4","142.1","144.1","148.2"],"您可以通过直接引入":["37.3"],"应用":["37.4"],"使用双花括号":["37.6"],"提供了一些指令":["37.7"],"show":["37.10"],"循环渲染列表中的元素":["37.12"],"v":["37.13","42.7","43.6"],"on":["37.13","112.3"],"定义一个名为":["37.16"],"钩子函数":["37.18"],"阶段":["37.18"],"beforecreate":["37.18"],"创建前":["37.18"],"在实例被创建之前调用":["37.18"],"此时":["37.18"],"组件的数据观察和事件还未初始化":["37.18"],"created":["37.18","41.27"],"创建后":["37.18"],"安装":["38.2","39.3","118.2","121.16","122.2","122.11","122.14","126.2","154.2"],"基本用法":["38.3"],"创建一个":["38.3","39.3"],"实例并将其与":["38.3"],"路由视图":["38.4"],"路由导航":["38.5"],"路由传参":["38.6"],"嵌套路由":["38.7"],"是一个专为":["39.0"],"vuex":["39.1","39.2","39.3","39.4","39.6"],"状态即应用程序中需要共享的数据":["39.1"],"它类似于组件的":["39.1"],"集中式管理":["39.2"],"所有的状态都集中在":["39.2"],"npm":["39.3","44.2","44.6","105.7","118.2","121.17","121.18","122.11","122.14","124.1","124.2","124.3","124.5","124.6","125.0","145.3","154.2"],"或":["39.3","87.2","113.1","118.8","121.22"],"yarn":["39.3","111.1","123.0","126.1","126.2","154.2"],"在终端中运行以下命令":["39.3"],"install":["39.3","110.10","118.2","122.11","122.14"],"当使用":["39.4"],"通常会将状态的修改拆分为两个部分":["39.4"],"actions":["39.4"],"用于处理异步操作":["39.5"],"并且可以包含任意异步代码":["39.5"],"它们不直接修改状态":["39.5"],"而是通过调用":["39.5"],"mutations":["39.5"],"来间接修改状态":["39.5"],"通常":["39.5"],"在组件中通过":["39.5"],"dispatch":["39.5"],"用于派生出":["39.6"],"store":["39.6"],"中的状态":["39.6"],"类似于组件的计算属性":["39.6"],"computed":["39.6"],"但是":["39.6","41.31","104.7"],"可以被多个组件共用":["39.6"],"避免了重复逻辑代码":["39.6"],"可以对":["39.6"],"进行处理和过滤":["39.6"],"返回一个新的衍生状态":["39.6"],"而不改变原始状态":["39.6"],"以下是一个使用":["39.6"],"响应式原理":["40.0"],"的响应式原理主要是基于":["40.1"],"object":["40.1","40.2","52.2","52.10","58.0","72.7","72.9","76.1","92.2","92.5","107.1"],"defineproperty":["40.1","40.2"],"实现的":["40.1"],"以下是":["40.1","40.2"],"响应式系统的核心原理":["40.1"],"的响应式原理使用了":["40.2"],"proxy":["40.2"],"对象":["40.2","52.0","52.2","52.13","76.3","91.2","121.7","122.14","133.6"],"相比":["40.2"],"使用的":["40.2"],"有一些重要的改进和性能优化":["40.2"],"vue在线学习工具":["41.0"],"vue3":["41.1","41.16","42.2","42.8","110.7"],"reactive":["41.2"],"函数用来根据给定的值创建一个响应式的数据对象":["41.2"],"函数调用的返回值是一个对象":["41.2"],"这个对象上只包含一个":["41.2"],"判断是不是一个ref对象":["41.4"],"ref":["41.4","42.9"],"创建一个跟踪自身":["41.5"],"变化的":["41.5"],"强制更新页面dom":["41.6"],"自定义ref":["41.7"],"是个工厂函数要求我们返回一个对象":["41.7"],"并且实现":["41.7"],"reactive是不可以绑定普通的":["41.8"],"数据类型":["41.8","54.0"],"只能对浅层的数据":["41.10"],"如果是深层的数据只会改变值":["41.10"],"把一个响应式对象转换成普通对象":["41.12"],"该普通对象的每个":["41.12"],"torefs相当于对对象内每个属性调用toref":["41.13"],"torefs返回的对象内的属性使用时需要加":["41.13"],"将响应式对象修改为普通对象":["41.14"],"的作用和":["41.16"],"监听ref定义的一个响应式数据":["41.17"],"监听多个ref":["41.18"],"写法变为数组的形式":["41.18"],"监听reactive定义的响应式对象":["41.19"],"使用reactive监听深层对象开启和不开启deep":["41.19"],"监听reactive":["41.20"],"定义响应式对象的单一属性":["41.20"],"立即执行传入的一个函数":["41.21"],"watcheffect":["41.22"],"watcheffect的第二个参数":["41.24"],"用来定义副作用刷新时机":["41.24"],"简单来说就是一个组件从创建":["41.25"],"元素初始化的时候":["41.27"],"这里有一个需要注意的限制":["41.28"],"必须以":["41.28"],"vnameofdirective":["41.28"],"的形式来命名本地自定义指令":["41.28"],"以使得它们可以直接在模板中使用":["41.28"],"vmovedirective":["41.28"],"el":["41.29"],"当前绑定的dom":["41.29"],"元素":["41.29"],"第二个":["41.29"],"binding":["41.29"],"instance":["41.29"],"使用指令的组件实例":["41.29"],"自定义拖拽指令":["41.30"],"vue2":["41.31","42.1","42.6","43.13"],"中有个东西叫":["41.31"],"mixins":["41.31"],"他可以将多个组件中相同的逻辑抽离出来":["41.31"],"实现一次写代码":["41.31"],"多组件受益的效果":["41.31"],"的副作用就是引用的多了变量的来源就不清晰了":["41.31"],"而且还会有变量来源不明确":["41.31"],"组件通信方式":["42.0"],"通信仓库地址":["42.1"],"项目地址":["42.1"],"不管是":["42.1"],"可以实现父子组件通信":["42.2"],"中我们可以通过":["42.2"],"自定义事件":["42.3","42.5"],"原生":["42.4"],"事件":["42.4","63.6","77.8"],"代码如下":["42.4"],"自定义事件可以实现子组件给父组件传递数据":["42.5"],"在项目中是比较常用的":["42.5"],"比如在父组件内部给子组件":["42.5"],"event2":["42.5"],"绑定一个自定义事件":["42.5"],"全局事件总线":["42.6"],"全局事件总线可以实现任意组件通信":["42.6"],"model":["42.7","43.17","58.0","76.1"],"指令可是收集表单数据":["42.7"],"数据双向绑定":["42.7"],"除此之外它也可以实现父子组件数据同步":["42.7"],"useattrs":["42.8"],"中可以利用":["42.8"],"parent":["42.9"],"提及到":["42.9"],"provide":["42.10"],"piniapinia":["42.11"],"slot":["42.12","43.9","46.4"],"插槽":["42.12"],"默认插槽":["42.12"],"具名插槽":["42.12"],"作用域插槽可以实现父子组件通信":["42.12"],"在子组件内部的模板中书写":["42.12"],"全局组件标签":["42.12"],"在父组件内部提供结构":["42.12"],"todo":["42.12"],"深入组件":["43.0"],"main":["43.2"],"ts":["43.2","101.1","101.2","101.3","101.9","101.10","101.12","101.13","102.1","102.6","102.8","102.9","103.2","103.3","103.5","104.2","104.4","104.6","104.7","105.1","106.2","106.3","106.7","109.1","109.2","110.10","149.1"],"引入组件跟随在":["43.2"],"createapp":["43.2"],"局部注册的组件需要在使用它的父组件中显式导入":["43.5"],"父组件通过":["43.6"],"bind":["43.6"],"绑定一个数据":["43.6"],"然后子组件通过":["43.6"],"defineprops":["43.6"],"在子组件放置一个插槽":["43.8"],"具名插槽其实就是给插槽取个名字":["43.9"],"一个子组件可以放多个插槽":["43.9"],"而且可以放在不同的地方":["43.9"],"而父组件填充内容时":["43.9"],"可以根据这个名字把内容填充到对应插槽中":["43.9"],"插槽内容可以访问到父组件的数据作用域":["43.10"],"因为插槽内容本身是在父组件模板中定义的":["43.10"],"插槽可以是一个变量名":["43.11"],"在大型应用中":["43.12"],"需要将应用分割成小一些的代码块":["43.12"],"允许应用程序在等待异步组件时渲染一些其它内容":["43.13"],"必须使用条件判断":["43.13"],"传送组件":["43.14"],"是一种能够将我们的模板渲染至指定dom节点":["43.14"],"不受父级style":["43.14"],"alive":["43.15"],"缓存组件":["43.15"],"事件挂载的方法等":["43.15"],"只执行一次的放在":["43.15"],"onmounted中":["43.15"],"组件每次进去执行的方法放在":["43.15"],"onactivated中":["43.15"],"inject":["43.16"],"可以在祖先组件中指定我们想要提供给后代组件的数据或方法":["43.16"],"而在任何后代组件中":["43.16"],"升级":["43.17"],"在vue3":["43.17"],"是破坏性更新的":["43.17"],"是props":["43.17"],"使用vue":["44.1"],"create":["44.4","72.7","92.5","92.7","112.1"],"my":["44.4"],"project":["44.4"],"然后的步骤":["44.4"],"please":["44.4"],"pick":["44.4"],"preset":["44.4"],"manually":["44.4"],"select":["44.4","122.3"],"使用vite创建":["44.5"],"推荐":["44.5"],"vite的优势":["44.5"],"使用vite初始化一个项目":["44.6"],"bash":["44.6","99.1","99.3","99.4","99.8","99.10","99.11","99.13","99.15","99.21","105.7","110.10","118.2","121.17","122.11","122.14","145.3","154.2","154.11"],"了解相关信息":["45.1"],"性能提升":["45.2"],"新增特性":["45.3"],"composition":["45.3"],"组合":["45.3"],"父组件":["46.1","46.2","46.4"],"主要是用来定义":["46.3"],"options":["46.3","63.8","120.3","120.6"],"用来约束":["46.4"],"数组":["48.0"],"创建数组有两种方式":["48.1"],"利用":["48.1"],"数组的长度":["48.2"],"数组名":["48.2"],"可以访问数组元素的数量":["48.2"],"数组长度":["48.2"],"数组的索引":["48.2"],"索引":["48.2"],"下标":["48.2"],"下面前三种是对原数组产生影响的增添方法":["48.6"],"方法接收任意数量的参数":["48.7"],"在数组开头添加任意多个值":["48.8"],"传入三个参数":["48.9","48.17"],"分别是开始位置":["48.9","48.14","48.17"],"要删除的元素数量":["48.9"],"首先会创建一个当前数组的副本":["48.10"],"然后再把它的参数添加到副本末尾":["48.10"],"最后返回这个新构建的数组":["48.10"],"不会影响原始数组":["48.10","48.15"],"下面三种都会影响原数组":["48.11"],"方法用于删除数组的最后一项":["48.12"],"同时减少数组的":["48.12","48.13"],"方法用于删除数组的第一项":["48.13"],"传入两个参数":["48.14"],"删除元素的数量":["48.14"],"用于创建一个包含原有数组中一个或多个元素的新数组":["48.15"],"即修改原来数组的内容":["48.16"],"要删除元素的数量":["48.17"],"要插入的任意多个元素":["48.17"],"即查找元素":["48.18"],"返回要查找的元素在数组中的位置":["48.19","48.20"],"如果没找到则返回":["48.19"],"找到返回":["48.20"],"返回第一个匹配的元素":["48.21"],"排序方法":["48.22"],"顾名思义":["48.23"],"将数组元素方向反转":["48.23"],"方法接受一个比较函数":["48.24"],"用于判断哪个值应该排在前面":["48.24"],"compare":["48.24"],"value1":["48.24","92.15"],"value2":["48.24","92.15"],"方法接收一个参数":["48.26"],"即字符串分隔符":["48.26"],"迭代方法":["48.27"],"对数组每一项都运行传入的测试函数":["48.28","48.29"],"如果至少有":["48.28"],"个元素返回":["48.28"],"如果所有元素都返回":["48.29"],"true":["48.29","48.31","52.10","53.9","54.6","55.2","87.2","110.8","113.5"],"对数组每一项都运行传入的函数":["48.30","48.31","48.32"],"没有返回值":["48.30"],"函数返回":["48.31"],"的项会组成数组之后返回":["48.31"],"返回由每次函数调用的结果构成的数组":["48.32"],"流程控制":["49.0"],"流程控制语句可以用来改变程序执行的顺序":["49.1"],"条件判断语句":["49.1"],"语法":["49.2","49.3"],"条件表达式":["49.2","49.5","53.12"],"条件表达式1":["49.2"],"通过循环语句可以使指定的代码反复执行":["49.4"],"while":["49.6"],"循环":["49.8","49.9","49.10","52.12","69.2"],"in":["49.9","49.11","52.11","52.12"],"用于迭代对象的属性":["49.9"],"通常是迭代对象的键":["49.9"],"属性名":["49.9"],"适用于对象":["49.9"],"用于迭代可迭代对象的值":["49.10"],"例如数组":["49.10"],"字符串":["49.10","54.15","122.14"],"的区别":["49.11"],"循环和":["49.11"],"continue":["49.12","50.9"],"用来终止":["49.12"],"switch":["49.12"],"和循环语句":["49.12"],"执行后":["49.12"],"当前的":["49.12"],"或循环会立刻停止":["49.12"],"函数":["50.0","86.14","95.3","101.8"],"是声明函数的关键字":["50.2"],"函数名":["50.3","50.8"],"函数使用分为两步":["50.3"],"声明函数":["50.3","50.8"],"在声明函数时":["50.6"],"可以在函数名称后面的小括号中添加一些参数":["50.6"],"这些参数被称为":["50.6"],"形参":["50.6"],"在调用该函数时":["50.6"],"参数个数":["50.7"],"说明":["50.7"],"实参个数等于形参个数":["50.7"],"输出正确结果":["50.7"],"实参个数多于形参个数":["50.7"],"只取到形参的个数":["50.7"],"实参个数少于形参个数":["50.7"],"有的时候":["50.8"],"我们会希望函数将值返回给调用者":["50.8"],"此时通过使用":["50.8"],"return":["50.8","50.9","67.5","71.5"],"语句就可以实现":["50.8"],"语法格式":["50.8","120.3","120.6"],"需要返回的值":["50.8"],"调用函数":["50.8","95.8"],"result":["50.8"],"函数可以分为具名函数和匿名函数":["50.10"],"基本语法":["51.0"],"是一种脚本语言":["51.0"],"以下是一个简单的":["51.1"],"程序不能独立运行":["51.2"],"script":["51.3"],"标签包裹":["51.3"],"一般将":["51.4"],"语言的核心概念":["52.2"],"也是最重要的数据类型":["52.2"],"对象的所有键名都是字符串":["52.3"],"又引入了":["52.3"],"symbol":["52.3","107.1"],"值也可以作为键名":["52.3"],"所以加不加引号都可以":["52.3"],"上面的代码也可以写成下面这样":["52.3"],"如果键名是数值":["52.3"],"会被自动转为字符串":["52.3"],"如果不同的变量名指向同一个对象":["52.4"],"那么它们都是这个对象的引用":["52.4"],"也就是说指向同一个内存地址":["52.4"],"修改其中一个变量":["52.4"],"会影响到其他所有变量":["52.4"],"o1":["52.4"],"o2":["52.4"],"对象采用大括号表示":["52.5"],"这导致了一个问题":["52.5"],"如果行首是一个大括号":["52.5"],"它到底是表达式还是语句":["52.5"],"读取对象的属性":["52.7"],"有两种方法":["52.7"],"一种是使用点运算符":["52.7"],"还有一种是使用方括号运算符":["52.7"],"点运算符和方括号运算符":["52.8"],"不仅可以用来读取值":["52.8"],"还可以用来赋值":["52.8"],"查看一个对象本身的所有属性":["52.9"],"delete":["52.10"],"命令":["52.10","123.0","124.3"],"命令用于删除对象的属性":["52.10"],"删除成功后返回":["52.10"],"运算符用于检查对象是否包含某个属性":["52.11"],"检查的是键名":["52.11"],"不是键值":["52.11"],"循环用来遍历一个对象的全部属性":["52.12"],"语句的格式如下":["52.13"],"它的作用是操作同一个对象的多个属性时":["52.13"],"提供一些书写的方便":["52.13"],"p1":["52.13"],"p2":["52.13"],"实例":["53.2","53.3","71.4"],"加":["53.2"],"运算符名称":["53.3","53.7"],"赋值":["53.3"],"使用后会使得原来的变量立刻增加":["53.5"],"自增分为前自增":["53.5"],"和后自增":["53.5"],"无论是":["53.5"],"使用后会使得原来的变量立刻减小":["53.6"],"自减分为前自减":["53.6"],"案列":["53.7"],"结果":["53.7","71.2"],"一假即假":["53.9"],"可以对两个值进行与运算":["53.9"],"左右都为":["53.9"],"一真即真":["53.10"],"可以对两个值进行或运算":["53.10"],"左右有":["53.10"],"各种运算符的优先级别":["53.13"],"基本类型":["54.1"],"数值最常见的整数类型格式则为十进制":["54.2"],"还可以设置八进制":["54.2"],"零开头":["54.2"],"十六进制":["54.2"],"0x":["54.2"],"开头":["54.2","121.22"],"类型只有一个值":["54.3"],"就是特殊值":["54.3"],"字符串可以使用双引号":["54.4"],"单引号":["54.4"],"或反引号":["54.4"],"类型同样只有一个值":["54.5"],"即特殊值":["54.5"],"布尔值":["54.6"],"类型有两个字面值":["54.6"],"符号":["54.7"],"是原始值":["54.7"],"且符号实例是唯一":["54.7"],"引用类型":["54.8"],"数组是一组有序的数据":["54.10"],"函数实际上是对象":["54.11"],"每个函数都是":["54.11"],"类型的实例":["54.11"],"而":["54.11"],"除了上述说的三种之外":["54.12"],"类型转换":["54.13"],"把数字转换为字符串型":["54.14"],"变量":["54.14","55.0"],"将其他的数据类型转换为数值":["54.15"],"number":["54.15","87.0","87.1","87.2","107.1"],"函数来将其他类型转换为数值":["54.15"],"转换的情况":["54.15","54.16"],"如果字符串是一个合法的数字":["54.15"],"则会自动转换为对应的数字":["54.15"],"如果字符串不是合法数字":["54.15"],"则转换为":["54.15"],"nan":["54.15","87.2"],"如果字符串是空串或纯空格的字符串":["54.15"],"boolean":["54.16","101.3","107.1","113.5"],"函数来将其他类型转换为布尔值":["54.16"],"数字":["54.16"],"存储区别":["54.17"],"obj1":["54.19","95.8"],"声明变量时不同的内存地址分配":["54.20"],"msg":["55.1"],"声明后可以改变类型":["55.1"],"但不推荐":["55.1"],"hi":["55.1"],"声明":["55.2","55.6","55.7"],"声明的范围是块作用域":["55.2"],"name":["55.2","55.3","92.3","97.3","102.1","112.1","112.2","112.3","138.3"],"zhangsan":["55.2","95.8"],"在全局作用域中声明的变量不会成为":["55.4"],"window":["55.4","62.0","62.1","95.3","95.8","149.1","149.2"],"对象的属性":["55.4"],"循环中的":["55.6"],"时变量会渗透到外面":["55.6"],"的行为与":["55.7"],"基本相同":["55.7"],"声明提升":["55.8"],"document":["56.0","56.1","76.1","77.6","81.1","136.3"],"获取元素":["56.1"],"获取具有id为":["56.2"],"myelement":["56.2"],"history":["57.0","57.1"],"bom":["58.0"],"browser":["58.0","110.8"],"中用于与浏览器交互的一组对象和方法集合":["58.0"],"它提供了访问和控制浏览器窗口及其内容的功能":["58.0"],"location":["59.0","59.1"],"href":["59.1"],"当前窗口的完整":["59.1"],"获取当前窗口的url":["59.2"],"navigator":["60.0","60.1"],"获取用户代理字符串":["60.2"],"screen":["61.0","61.1"],"获取屏幕的宽度":["61.2"],"open":["62.1"],"打开一个新窗口":["62.2"],"ajax":["63.0","63.1","63.2","63.8","63.9","71.5","122.5","122.6"],"全称":["63.1"],"async":["63.1"],"实现过程":["63.2"],"实现":["63.2","136.3","136.4","138.3","138.4"],"与服务器建立连接":["63.4"],"xmlhttprequest":["63.4","63.5","63.6","63.8","71.5"],"给服务端发送数据":["63.5"],"绑定":["63.6"],"onreadystatechange":["63.6"],"事件用于监听服务器端的通信状态":["63.6"],"主要监听的属性为":["63.6"],"readystate":["63.6"],"关于":["63.6","98.7"],"封装与使用":["63.7"],"通过上面对":["63.8"],"对象的了解":["63.8"],"下面来封装一个简单的":["63.8"],"请求":["63.8","97.3"],"封装一个ajax请求":["63.8"],"使用方式如下":["63.9"],"code":["64.1","152.3","152.9","152.12","153.5"],"闭包":["65.0"],"要创建一个闭包":["65.1"],"通常需要在一个函数内部定义另一个函数":["65.1"],"并将其返回":["65.1"],"返回的函数就是闭包":["65.1"],"闭包可以捕获并访问其外部函数的变量":["65.2"],"即使外部函数已经执行完毕":["65.2"],"这使得闭包可以在不同的上下文中使用和保留外部变量的状态":["65.2"],"通过使用闭包":["65.3","65.4"],"可以创建私有变量":["65.3"],"这些变量无法从外部访问":["65.3"],"只能通过内部函数提供的公共接口访问和修改":["65.3"],"createperson":["65.3"],"封装私有变量和方法":["65.4"],"可以创建私有变量和方法":["65.4"],"将其封装在函数内部":["65.4"],"只暴露公共接口给外部":["65.4"],"闭包会导致内存占用增加":["65.5"],"因为外部函数的变量和作用域在闭包中被保留":["65.5"],"即使外部函数执行完毕也不会被释放":["65.5"],"深浅拷贝":["66.0"],"浅拷贝是创建一个新对象":["66.1"],"新对象的属性值是原始对象属性值的引用":["66.1"],"也就是说":["66.1"],"新对象和原始对象共享相同的引用类型属性":["66.1"],"深拷贝是创建一个新对象":["66.2"],"新对象的属性值与原始对象的属性值完全独立":["66.2"],"二者互不影响":["66.2"],"由于对象的属性可能是引用类型":["66.2"],"所以需要递归复制对象的所有属性":["66.2"],"包括嵌套的对象和数组":["66.2"],"以下是一些常用的实现深拷贝的方法":["66.2"],"json":["66.2","82.6","83.6","108.0","110.7","117.6","122.14","124.4"],"parse":["66.2","110.8"],"函数柯里化":["67.0"],"函数柯里化是一种将多个参数的函数转化为一系列接受单个参数的函数的过程":["67.1"],"通过函数柯里化":["67.1"],"可以将原始函数分解为多个嵌套的函数":["67.1"],"每个函数都接收一个参数":["67.1"],"并返回一个新函数等待接收下一个参数":["67.1"],"最终":["67.1"],"所有参数都被传递完毕后":["67.1"],"原始函数会被调用执行":["67.1"],"函数柯里化有助于创建可复用和可组合的函数":["67.1"],"提供更灵活和精确的函数调用方式":["67.1"],"参数复用和定制":["67.2"],"通过柯里化":["67.2"],"可以将函数的一部分参数预先设置":["67.2"],"然后在后续调用时只传递剩余的参数":["67.2"],"这使得函数的复用和定制变得更加灵活和方便":["67.2"],"延迟执行":["67.2"],"使用闭包递归":["67.4"],"curry":["67.4","67.5"],"使用递归和占位符":["67.5"],"使用箭头函数和递归":["67.6"],"节流和防抖":["68.0"],"节流函数适用事件":["68.1"],"节流是一种控制函数执行频率的技术":["68.2"],"当一个函数被频繁调用时":["68.2","68.5"],"节流可以限制函数在一定时间间隔内只执行一次":["68.2"],"节流的实现思路是设置一个定时器":["68.2"],"在函数被调用时先检查定时器是否存在":["68.2"],"如果定时器不存在":["68.2"],"使用时间戳写法":["68.3"],"事件会立即执行":["68.3"],"停止触发后没有办法再次执行":["68.3"],"throttled1":["68.3"],"fn":["68.3"],"delay":["68.3","68.7"],"防抖函数适用事件":["68.4"],"防抖是一种控制函数执行频率的技术":["68.5"],"防抖可以延迟函数的执行":["68.5"],"直到某个连续的时间段内没有新的函数调用发生":["68.5"],"防抖如果需要立即执行":["68.6"],"可加入第三个参数用于判断":["68.6"],"实现如下":["68.6"],"debounce":["68.6","68.7"],"导入或定义防抖":["68.7"],"节流函数":["68.7"],"unique":["69.2"],"indexof":["69.3"],"include":["69.4"],"数组扁平化是指将一个多维数组变为一个一维数组":["70.0"],"利用正则":["70.2"],"reduce":["70.3","73.0","73.3","73.9"],"函数递归":["70.4"],"promise":["71.0","71.1","71.2","71.5"],"是一种异步编程的解决方案":["71.0"],"它可以避免回调地狱":["71.0"],"使代码更加简洁易读":["71.0"],"可以通过":["71.1","84.2"],"通过调用":["71.2"],"链式调用":["71.3"],"的一个重要特性是可以通过链式调用来串联多个异步操作":["71.3"],"通过在":["71.3"],"then":["71.3"],"all":["71.4"],"方法接收一个":["71.4"],"实例数组":["71.4"],"返回一个新的":["71.4"],"该新实例在数组中的所有":["71.4"],"封装一个":["71.5"],"下面是一个使用":["71.5"],"封装的基本":["71.5"],"请求的示例":["71.5"],"method":["71.5"],"data":["71.5","98.4","120.6"],"resolve":["71.5"],"reject":["71.5"],"xhr":["71.5"],"原型":["72.0"],"原型是":["72.1"],"原型链是一个对象和它的原型对象之间的连接":["72.2"],"当你访问一个对象的属性或方法时":["72.2"],"会首先查找该对象本身是否有这个属性或方法":["72.2"],"如果没有":["72.2"],"它会沿着原型链向上查找":["72.2"],"直到找到为止":["72.2","93.2"],"每个":["72.3"],"对象都有一个关联的原型对象":["72.3"],"原型继承是":["72.4"],"中对象之间共享属性和方法的一种方式":["72.4"],"当一个对象继承了另一个对象的原型时":["72.4"],"它可以访问该原型对象上的属性和方法":["72.4"],"让我们再次看一个例子":["72.4"],"animal":["72.4"],"中的原型继承方式":["72.5"],"构造函数和原型链":["72.6"],"这是最常见的原型继承方式":["72.6"],"它使用构造函数来创建对象属性":["72.6"],"同时使用原型链来共享方法":["72.6"],"在前面的例子中":["72.6"],"类继承":["72.8"],"引入了类":["72.8"],"的概念":["72.8"],"setprototypeof":["72.9"],"在使用原型时":["72.14"],"计算数组累积结果":["73.3"],"演示如何使用":["73.3"],"方法来计算数组中所有元素的和":["73.3"],"计算数组中每个元素出现的次数":["73.4"],"one":["73.4"],"two":["73.4"],"three":["73.4","151.0"],"six":["73.4"],"four":["73.4"],"five":["73.4"],"数组去重":["73.5"],"数组扁平化":["73.6","73.7"],"二维转一维":["73.6"],"多维转一维":["73.7"],"对象属性求和":["73.8"],"方法适用于对数组的每个元素执行同一个累积操作":["73.9"],"作用域":["74.0"],"全局作用域是指在代码的任何地方都可访问的变量和函数":["74.1"],"在全局作用域中声明的变量和函数可以被代码中的任何地方访问":["74.1"],"局部作用域是指在特定代码块":["74.2"],"如函数":["74.2"],"循环或条件语句":["74.2"],"内部声明的变量和函数":["74.2"],"这些变量和函数只能在其声明的代码块内部访问":["74.2"],"作用域链是指":["74.3"],"引擎在查找变量时的嵌套作用域链条":["74.3"],"当访问一个变量时":["74.3"],"引擎首先在当前作用域的变量对象中查找":["74.3"],"中的作用域是通过代码的结构和位置来确定的":["74.4"],"而不是通过运行时的状态":["74.4"],"这被称为词法作用域":["74.4"],"函数在定义时就确定了自己的作用域":["74.4"],"而不是在调用时":["74.4"],"节点":["75.0","75.1","75.2","76.3"],"在已有的":["75.1"],"节点中插入新的":["75.1"],"节点时":["75.1"],"需要关注两个关键因素":["75.1"],"首先要得到新的":["75.1"],"其次在哪个位置插入这个节点":["75.1"],"createelement":["75.1","78.1"],"删除现有的":["75.2"],"childnodes":["75.4"],"获取全部的子节点":["75.4"],"回车换行会被认为是空白文本节点":["75.4"],"children":["75.4"],"只获取元素类型节点":["75.4"],"body":["75.4"],"btn1":["75.4"],"所有的子节点":["75.4"],"previoussibling":["75.5"],"获取前一个节点":["75.5"],"以相对位置查找节点":["75.5"],"是一种用于表示和操作":["76.1"],"树":["76.2"],"节点是文档树的组成部分":["76.3"],"每一个节点都是一个":["76.3"],"事件是编程语言中的术语":["77.1"],"结合":["77.2"],"使用事件时":["77.2"],"需要为":["77.2"],"对象添加事件监听":["77.2"],"当我们不再需要一个事件监听器时":["77.3"],"鼠标事件是指跟鼠标操作相关的事件":["77.5"],"如单击":["77.5"],"双击":["77.5"],"移动等":["77.5"],"事件名":["77.5"],"click":["77.5"],"当用户点击鼠标左键时触发":["77.5"],"dblclick":["77.5"],"当用户在文本框中输入":["77.8"],"删除或修改文本时触发":["77.8"],"无论是键盘输入":["77.8"],"粘贴":["77.8"],"事件处理程序的第一个参数是事件对象":["77.9"],"event":["77.9","77.10"],"它包含有关事件的信息":["77.9"],"例如事件类型":["77.9"],"事件冒泡":["77.10"],"事件会从触发它的元素向上冒泡到祖先元素":["77.10"],"你可以使用":["77.10","102.7"],"stoppropagation":["77.10"],"以下是一些常见的":["77.11"],"事件类型":["77.11"],"鼠标事件":["77.11"],"事件委托是一种利用事件冒泡原理来简化事件处理的技术":["77.12"],"通过将事件监听器绑定到一个父元素上":["77.12"],"然后利用事件冒泡机制":["77.12"],"从父元素中捕获和处理子元素触发的事件":["77.12"],"这样可以减少事件处理程序的数量":["77.12"],"并且可以动态地处理后续添加的子元素":["77.12"],"提高性能和代码的可维护性":["77.12"],"创建和操作元素":["78.0"],"设置元素的属性":["78.2"],"setattribute":["78.2"],"将新元素添加到父元素中":["78.3"],"appendchild":["78.3"],"样式和类操作":["79.0"],"修改元素的内联样式":["79.1"],"对象来访问和修改元素的样式属性":["79.1"],"添加类名":["79.2"],"classlist":["79.2"],"属性的":["79.2"],"element":["79.2"],"获取和修改元素":["80.0"],"getelementbyid":["80.0","80.1","136.3"],"id":["80.1","130.1","135.2","138.3"],"修改元素的文本内容":["80.2"],"textcontent":["80.2"],"属性或":["80.2"],"innertext":["80.2"],"cookie":["81.0","81.1","81.2","81.3","81.4","122.13"],"属性来设置":["81.1"],"可以通过将":["81.3"],"每个域名下的":["81.4"],"是相互独立的":["81.4"],"不同域名之间的":["81.4"],"是隔离的":["81.4"],"localstorage":["82.0","82.1","82.2","82.6"],"setitem":["82.1","83.1"],"可以通过重新设置相同的键来更新":["82.3","83.3"],"存储的值必须是字符串类型":["82.6","83.6"],"如果需要存储其他数据类型":["82.6","83.6"],"如对象或数组":["82.6","83.6"],"stringify":["82.6","83.6"],"方法将其转换为字符串存储":["82.6","83.6"],"然后在需要时使用":["82.6","83.6"],"sessionstorage":["83.0","83.1","83.2","83.6"],"date":["84.0","84.2","113.4"],"getdate":["84.1"],"获取日期":["84.1"],"月份中的日期":["84.1"],"返回值为":["84.1"],"之间的整数":["84.1"],"getday":["84.1"],"获取星期几":["84.1"],"表示星期日":["84.1"],"对象用于处理日期和时间":["84.2"],"通过使用针对日期对象的方法":["84.3"],"我们可以很容易地对日期进行操作":["84.3"],"在下面的例子中":["84.3"],"我们为日期对象设置了一个特定的日期":["84.3"],"时间戳是指":["84.4"],"年":["84.4"],"01":["84.4"],"月":["84.4"],"内置对象":["85.0","85.1"],"就是指这个语言自带的一些对象":["85.0"],"的内置对象":["85.1"],"对象说明":["85.1"],"是用于进行正则表达式匹配的对象":["85.9"],"math":["86.0","86.1","95.12","136.3"],"abs":["86.3"],"random":["86.4"],"ceil":["86.5"],"floor":["86.6"],"round":["86.7"],"min":["86.8"],"max":["86.9","87.1","95.12"],"pow":["86.10"],"sqrt":["86.11"],"sin":["86.12"],"cos":["86.13"],"trunc":["86.14"],"返回的是一个数的整数部分":["86.14"],"表示":["87.1"],"中能表示的最大数值":["87.1"],"isnan":["87.2"],"num":["87.2"],"判断给定的值是否为":["87.2"],"非数值":["87.2"],"如果是":["87.2"],"则返回":["87.2"],"否则返回":["87.2"],"false":["87.2"],"isfinite":["87.2"],"判断给定的值是否为有限数值":["87.2"],"如果是有限数值":["87.2"],"即不是":["87.2"],"infinity":["87.2"],"regexp":["88.0","88.1"],"正则表达式":["88.1"],"是一种用于匹配和操作字符串模式的强大工具":["88.1"],"它是一种模式匹配的语法":["88.1"],"使用斜杠":["88.3"],"匹配除换行符之外的任何单个字符":["88.5"],"修饰符用于在正则表达式中添加额外的规则":["88.6"],"影响匹配的行为":["88.6"],"以下是一些常用的正则表达式模式示例":["88.7"],"匹配字母或数字字符":["88.7"],"za":["88.7"],"的字符串对象提供了一些与正则表达式相关的方法来执行匹配":["88.8"],"搜索和替换操作":["88.8"],"以下是一些常用的方法":["88.8"],"match":["88.8"],"在字符串中搜索匹配正则表达式的结果":["88.8"],"并返回一个数组或":["88.8"],"null":["88.8","107.1"],"正则表达式还支持使用圆括号进行分组和捕获":["88.9"],"通过使用圆括号将模式的一部分括起来":["88.9"],"可以创建子模式":["88.9"],"并将匹配到的子串捕获到一个分组中":["88.9"],"以下是一些常用的分组和捕获的示例":["88.9"],"使用括号进行分组":["88.9"],"abc":["88.9"],"会匹配一个或多个连续的":["88.9"],"捕获分组":["88.9"],"使用括号进行分组后":["88.9"],"可以通过编号或名称将捕获的子串提取出来":["88.9"],"除了修饰符外":["88.10"],"正则表达式还支持标志":["88.10"],"flags":["88.10"],"用于提供更多的匹配选项":["88.10"],"正则表达式在":["88.11"],"中具有广泛的应用场景":["88.11"],"封装和多态":["89.0"],"inheritance":["89.1"],"继承是一种对象间的关系":["89.1"],"它允许一个对象":["89.1"],"称为子类或派生类":["89.1"],"继承另一个对象":["89.1"],"称为父类或基类":["89.1"],"的属性和方法":["89.1"],"子类继承了父类的特性":["89.1"],"可以通过继承来复用代码":["89.1"],"减少重复编写":["89.1"],"encapsulation":["89.2"],"封装是一种将数据和方法包裹在一个单一实体中的概念":["89.2"],"使得外部无法直接访问对象的内部实现细节":["89.2"],"这样的设计有助于隐藏对象的复杂性":["89.2"],"只暴露必要的接口":["89.2"],"提高代码的可维护性和安全性":["89.2"],"封装通常通过将数据设置为私有属性":["89.2"],"polymorphism":["89.3"],"多态是一种允许不同对象对同一方法做出不同响应的特性":["89.3"],"这意味着可以使用相同的方法名":["89.3"],"但针对不同对象实现不同的行为":["89.3"],"多态有助于实现代码的灵活性和可扩展性":["89.3"],"及其之前的版本中":["90.1"],"使用构造函数来创建对象":["90.1"],"构造函数本质上是一个普通的函数":["90.1"],"但通常使用":["90.1"],"及以上的版本中":["90.2"],"引入了":["90.2"],"使得类的定义更加简洁明了":["90.2"],"类定义了对象的结构和行为":["90.2"],"面向对象":["91.0"],"对象是面向对象编程的核心概念":["91.2"],"对象是一个复合的数据类型":["91.2"],"它可以包含属性":["91.2"],"也称为数据成员":["91.2"],"和方法":["91.2"],"张三":["92.3"],"构造函数":["92.4"],"是一种特殊的函数":["92.4"],"主要用来初始化对象":["92.4"],"即为对象成员变量赋初始值":["92.4"],"它总与":["92.4"],"运算符一起使用":["92.4"],"我们可以把对象中一些公共的属性和方法抽取出来":["92.4"],"然后封装到这个函数里面":["92.4"],"sources":["92.5","92.6"],"复制一个或多个对象的属性到目标对象":["92.5"],"freeze":["92.9","92.10"],"getownpropertydescriptor":["92.11"],"getownpropertynames":["92.12"],"getownpropertysymbols":["92.13"],"getprototypeof":["92.14"],"seal":["92.17","92.18"],"hasownproperty":["92.20"],"原型和原型链":["93.0"],"prototype":["93.1","93.2"],"每个对象都有一个特殊的属性":["93.1"],"chain":["93.2"],"原型链是由对象的原型对象构成的链式结构":["93.2"],"当我们访问对象的属性或方法时":["93.2"],"如果对象本身没有找到":["93.2"],"则会继续在原型链上查找":["93.2"],"原型链的最终节点是":["93.2"],"尽量避免直接修改原型对象":["93.4"],"以免对其他对象产生意外的影响":["93.4"],"严格模式":["94.0"],"strict":["94.0"],"mode":["94.0"],"中启用更严格解析和错误处理的模式":["94.0"],"它旨在帮助开发者编写更安全":["94.0"],"指向":["95.2","95.14"],"函数内":["95.3"],"的指向":["95.3","95.4"],"非常重要":["95.3"],"语法中":["95.3"],"根据函数的调用方式的不同":["95.3"],"会指向不同的对象":["95.3"],"以":["95.3"],"的形式":["95.3"],"包括普通函数":["95.3"],"定时器函数":["95.3"],"立即执行函数":["95.3"],"调用时":["95.3"],"的指向永远都是":["95.3"],"比如":["95.3"],"fun":["95.3"],"相当于":["95.3"],"箭头函数中":["95.4"],"方法的作用":["95.7","95.10","95.14"],"方法举例":["95.8","95.11"],"举例":["95.8","95.11"],"nickname":["95.8"],"fn1":["95.8"],"可以":["95.10"],"调用":["95.10"],"一个函数":["95.10"],"改变":["95.11"],"方法的巧妙应用":["95.12"],"求数组的最大值":["95.12"],"如果想要求数组中元素的最大值":["95.12"],"数组本身是没有自带方法的":["95.12"],"那怎么办呢":["95.12"],"虽然数组里没有获取最大值的方法":["95.12"],"但是数值里有":["95.12"],"不会调用函数":["95.14"],"但是可以改变函数内部的":["95.14"],"navlinks":["96.2"],"axios":["97.1","97.3","97.5","98.0","98.2","110.11"],"使用npm":["97.2"],"执行":["97.3"],"zs":["97.3"],"我们大致可以分为两类":["97.4"],"一类是":["97.4"],"请求接口前的统一处理":["97.4"],"请求拦截":["97.4"],"请求接口后的统一处理":["97.4"],"user":["97.5"],"catch":["97.5"],"封装目的":["98.1"],"设置请求拦截":["98.3"],"创建请求拦截":["98.3"],"service":["98.3","98.4"],"interceptors":["98.3","98.4"],"request":["98.3"],"use":["98.3","98.4","118.6","118.8"],"config":["98.3","110.10","154.9"],"设置响应拦截":["98.4"],"创建响应拦截":["98.4"],"response":["98.4"],"res":["98.4","118.12"],"处理自己的业务逻辑":["98.4"],"封装常见的方法":["98.5"],"示例":["98.6","141.7"],"param":["98.6"],"配置全局账户":["99.1"],"对所有":["99.1"],"git":["99.1","99.5","99.6","99.7","99.8","99.10","99.15"],"仓库有效":["99.1"],"commit":["99.6","99.16"],"提交所有变更":["99.6"],"diff":["99.7"],"比较工作区和暂存区的所有差异":["99.7"],"只能查看旧文件的变更":["99.7"],"包括修改和删除":["99.7"],"不能查看新文件":["99.7"],"因为新文件还为被":["99.7"],"查看简要日志信息":["99.8"],"基于当前分支创建分支":["99.10"],"安全删除本地分支":["99.12"],"merge":["99.14"],"rebase":["99.14"],"的区别有待学习实践":["99.14"],"worried":["99.14"],"将":["99.14"],"工作区指定文件恢复成和暂存区一样":["99.15"],"checkout":["99.15"],"file1":["99.15"],"file2":["99.15"],"tips":["99.15"],"记录":["99.16"],"remote":["99.18"],"查看所有远程仓库地址别名":["99.18"],"clone":["99.19"],"pull":["99.20"],"push":["99.21"],"推送本地指定分支到仓库指定分支":["99.21"],"配置用户名和邮箱":["100.3"],"执行命令生成ssh":["100.4"],"tortoisegit安装和配置详细说明":["100.7"],"支持十六进制":["101.2"],"十进制":["101.2"],"八进制和二进制":["101.2"],"b1":["101.3"],"typescript":["101.4","101.14","102.10","105.7","106.0"],"像":["101.4"],"tuple":["101.5"],"元组类型允许表示一个已知":["101.5"],"元素数量":["101.5"],"类型":["101.5"],"的数组":["101.5"],"各元素的类型不必相同":["101.5"],"enum类型是对":["101.6"],"标准数据类型的一个补充":["101.6"],"使用枚举类型可以为一组数值赋予友好的名字":["101.6"],"枚举的值可以是数字":["101.6"],"任意类型":["101.7"],"没有强制限定哪种类型":["101.7"],"随时切换类型都可以":["101.7"],"我们可以对":["101.7"],"可以用":["101.8"],"表示没有":["101.8"],"任何返回值":["101.8"],"u":["101.9"],"定义undefined":["101.9"],"类型表示的是那些永不存在的值的类型":["101.10"],"void":["101.11"],"联合类型用":["101.12"],"分隔":["101.12"],"表示取值可以为多种类型中的一种":["101.12"],"a可以为数字或者布尔类型":["101.12"],"交叉类型就是跟联合类型相反":["101.13"],"用":["101.13","102.11"],"操作符表示":["101.13"],"交叉类型就是两个类型必须存在":["101.13"],"通过类型断言这种方式可以告诉编译器":["101.14"],"相信我":["101.14"],"我知道自己在干什么":["101.14"],"类型断言好比其它语言里的类型转换":["101.14"],"但是不进行特殊的数据检查和解构":["101.14"],"它没有运行时的影响":["101.14"],"只是在编译阶段起作用":["101.14"],"会假设你":["101.14"],"es6提供了更接近传统语言的写法":["102.0"],"引入了class":["102.0"],"类的基本定义与使用":["102.1"],"声明属性":["102.1"],"在typescript":["102.2"],"里":["102.2","103.4"],"我们可以使用常用的面向对象模式":["102.2"],"基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类":["102.2"],"总共有三个":["102.3"],"public":["102.4","102.6","117.6"],"private":["102.5"],"protected":["102.6"],"修饰符":["102.6","102.7"],"代表定义的变量私有的只能在内部和继承的子类中访问":["102.6"],"不能在外部访问":["102.6"],"静态属性":["102.8"],"静态方法":["102.8"],"我们用static":["102.8"],"定义的属性":["102.8"],"不可以通过this":["102.8"],"去访问":["102.8"],"只能通过类名去调用":["102.8"],"定义":["102.9","122.14"],"类":["102.9"],"定义类":["102.9"],"使用关键字":["102.9"],"支持通过":["102.10"],"getters":["102.10"],"setters":["102.10"],"来截取对对象成员的访问":["102.10"],"它能帮助你有效的控制对对象成员的访问":["102.10"],"下面来看如何把一个简单的类改写成使用":["102.10"],"抽象类做为其它派生类的基类使用":["102.11"],"它们一般":["102.11"],"不会直接被实例化":["102.11"],"只能实例化实现了所有抽象方法的子类":["102.11"],"不同于接口":["102.11"],"抽象类可以包含成员的实现细节":["102.11"],"abstract":["102.11"],"函数涉及的类型实际上指的是":["103.0"],"js的函数":["103.1"],"命名函数":["103.1"],"表示该参数为可选参数":["103.2"],"必要参数":["103.4"],"默认参数和可选参数有个共同点":["103.4"],"它们表示某一个参数":["103.4"],"有时":["103.4"],"你想同时操作多个参数":["103.4"],"或者你并不知道会有多少参数传递进来":["103.4"],"重载是方法名字相同":["103.5"],"而参数不同":["103.5"],"返回类型可以相同也可以不同":["103.5"],"重载函数声明":["103.5"],"string":["103.5","107.1"],"指在定义函数":["104.0"],"下面这是两个函数":["104.2"],"除了类型的不同":["104.2"],"实现的功能是一样的":["104.2"],"语法为函数名字后面跟一个":["104.3"],"参数名":["104.3"],"参数名可以随便写":["104.3"],"例如我这儿写了":["104.3"],"t":["104.3"],"一个函数可以定义多个泛型参数":["104.4"],"在定义接口时":["104.5"],"为接口中的属性或方法定义泛型类型":["104.5"],"在使用接口时":["104.5"],"再指定具体的泛型类型":["104.5"],"在定义类时":["104.6"],"为类中的属性或方法定义泛型类型":["104.6"],"在创建类的实例时":["104.6"],"再指定特定的泛型类型":["104.6"],"我们期望在一个泛型的变量上面":["104.7"],"获取其length参数":["104.7"],"有的数据类型是没有length属性的":["104.7"],"typescript中文网":["105.0"],"对比于js":["105.2"],"ts是js的":["105.2"],"属于动态编程语言":["105.3"],"增强代码的可维护性":["105.5"],"需要一定的学习成本":["105.6"],"使用tsc":["105.9"],"使用ts":["105.10"],"在typescript中":["106.1"],"我们定义对象的方式要用关键字interface":["106.1"],"接口":["106.1"],"会合并":["106.2"],"interface":["106.3","106.7"],"一旦定义了任意属性":["106.5"],"那么确定属性和可选属性的类型都必须是它的类型的子集":["106.5"],"readonly":["106.6"],"readonly只读属性是不允许被赋值的":["106.6"],"只能读取":["106.6"],"这里所说的对象类型":["107.0"],"类型用于表示所有的非原始类型":["107.1"],"即我们不能把":["107.1"],"等":["107.1"],"原始类型赋值给":["107.1"],"在严格模式下":["107.1"],"配置文件":["108.0","110.8"],"compileroptions":["108.0"],"基本选项":["108.0"],"指定":["108.0"],"ecmascript":["108.0"],"目标版本":["108.0"],"es2015":["108.0"],"es2016":["108.0"],"or":["108.0"],"esnext":["108.0"],"module":["108.0","110.8","121.7"],"commonjs":["108.0"],"指定使用模块":["108.0"],"amd":["108.0"],"system":["108.0"],"类型别名":["109.0"],"typescript里":["109.1"],"在有些没有明确指出类型的地方":["109.1"],"类型推论会帮助提供类型":["109.1"],"可以给一个类型定义一个名字":["109.2"],"多用于复合类型":["109.2"],"定义类型别名":["109.2"],"项目配置文档":["110.0"],"搭建后台管理系统模板":["110.1"],"项目初始化":["110.2"],"搭建一个":["110.2"],"初始化项目":["110.4","123.0","126.2"],"本项目使用":["110.4"],"eslint":["110.6","110.7","110.8"],"配置":["110.6"],"中文官网":["110.6"],"http":["110.6","118.12","120.16","120.17"],"cn":["110.6"],"最初是由":["110.6"],"nicholas":["110.6"],"zakas":["110.6"],"于":["110.6"],"环境代码校验插件":["110.7"],"让所有与prettier规则存在冲突的eslint":["110.7"],"rules失效":["110.7"],"并使用prettier进行代码检查":["110.7"],"修改":["110.8"],"eslintrc":["110.8"],"cjs":["110.8"],"see":["110.8"],"https":["110.8","110.10","117.4","117.6"],"bootcss":["110.8"],"com":["110.8","110.10","117.6"],"docs":["110.8","154.6","154.7","154.11"],"rules":["110.8"],"exports":["110.8"],"env":["110.8"],"es2021":["110.8"],"node":["110.8","117.0","119.1","119.3","121.12","121.15","124.0"],"jest":["110.8"],"指定如何解析语法":["110.8"],"parser":["110.8"],"优先级低于":["110.8"],"的语法解析配置":["110.8"],"集成":["110.9"],"sass":["110.9"],"我们目前在组件内部已经可以使用":["110.9"],"scss":["110.9"],"样式":["110.9"],"因为在配置":["110.9"],"stylelint":["110.9"],"工具的时候":["110.9"],"项目当中已经安装过":["110.9"],"mock":["110.10"],"数据":["110.10"],"安装依赖":["110.10"],"www":["110.10"],"npmjs":["110.10"],"package":["110.10"],"plugin":["110.10"],"pnpm":["110.10"],"d":["110.10"],"mockjs":["110.10"],"配置文件启用插件":["110.10"],"二次封装":["110.11"],"在开发项目的时候避免不了与后端进行交互":["110.11"],"因此我们需要使用":["110.11"],"插件实现发送网络请求":["110.11"],"在开发项目的时候":["110.11","110.12"],"我们经常会把":["110.11"],"进行二次封装":["110.11"],"目的":["110.11"],"接口统一管理":["110.12"],"接口可能很多需要统一管理":["110.12"],"目录下去创建":["110.12"],"部署刷新":["111.0"],"问题":["111.0"],"build打包项目":["111.1"],"数据库的常用命令":["112.0"],"database":["112.1","112.3"],"创建一个新的数据库":["112.1"],"drop":["112.1"],"insert":["112.2"],"into":["112.2"],"grant":["112.3"],"privileges":["112.3"],"字段的数据类型":["113.0"],"tinyint":["113.1"],"一个非常小的整数":["113.1"],"范围为":["113.1","113.2"],"有符号":["113.1"],"float":["113.2"],"单精度浮点数":["113.2"],"char":["113.3"],"固定长度的字符串":["113.3"],"存储日期":["113.4"],"yyyy":["113.4"],"mm":["113.4"],"存储布尔值":["113.5"],"数据库是用于组织和存储大量结构化数据的集合":["114.0"],"它是一种数据管理系统":["114.0"],"允许用户定义":["114.0"],"mysql是一种开源的关系型数据库管理系统":["114.1"],"由瑞典公司mysql":["114.1"],"ab开发并最终由oracle":["114.1"],"corporation收购":["114.1"],"mysql被广泛用于各种规模的应用程序和网站":["114.1"],"基本使用":["116.0","142.0"],"连接到":["116.1"],"mysql":["116.1","122.2","122.3"],"服务器":["116.1","120.16"],"创建数据库":["116.2"],"创建表":["116.4"],"插入数据":["116.5","122.3"],"使用以下命令向表中插入数据":["116.5"],"查询数据":["116.6","122.3"],"更新数据":["116.7"],"删除数据":["116.8"],"安装插件":["117.2"],"index":["117.4","154.7"],"文件并编写代码":["117.4"],"引入模块":["117.4"],"require":["117.4","118.4","118.7","120.4","120.12","120.16","120.17","121.21","121.22","121.23"],"cheerio":["117.4"],"爬取成功":["117.6"],"这时会多出来一个名叫":["117.6"],"files":["117.6"],"文件":["117.6"],"里面就是爬取出来的内容了":["117.6"],"title":["117.6"],"肖申克的救赎":["117.6"],"the":["117.6"],"shawshank":["117.6"],"redemption":["117.6"],"star":["117.6"],"pic":["117.6"],"img2":["117.6"],"doubanio":["117.6"],"view":["117.6"],"photo":["117.6"],"s":["117.6"],"ratio":["117.6"],"poster":["117.6"],"p480747492":["117.6"],"jpg":["117.6"],"霸王别姬":["117.6"],"img1":["117.6"],"p2561716440":["117.6"],"阿甘正传":["117.6"],"forrest":["117.6"],"gump":["117.6"],"官网传送门":["118.0"],"初体验":["118.1"],"express":["118.2","118.3","118.7","118.8"],"创建服务器":["118.2"],"监听客户端请求":["118.2"],"并返回内容":["118.2"],"方法可创建静态资源服务器":["118.3"],"向外开放访问静态资源":["118.3"],"在指定的静态目录中查找文件":["118.3"],"并对外提供资源的访问路径":["118.3"],"创建路由模块":["118.4"],"中间件":["118.5","122.11"],"中间件是指流程的中间处理环节":["118.5"],"服务器收到请求后":["118.5"],"定义的中间件为全局中间件":["118.6"],"定义中间件函数":["118.7"],"应用级别的中间件":["118.8"],"post":["118.8","118.14","118.15"],"绑定到":["118.8"],"实例上的中间件":["118.8"],"路由级别的中间件":["118.8"],"叫做路由级别的中间件":["118.8"],"用法和应用级别中间件没有区别":["118.8"],"跨域资源共享":["118.9"],"中间件解决跨域":["118.10"],"cross":["118.11"],"origin":["118.11","118.12"],"resource":["118.11"],"sharing":["118.11"],"常见响应头":["118.12"],"access":["118.12"],"control":["118.12"],"allow":["118.12"],"制定了允许访问资源的外域":["118.12"],"setheader":["118.12"],"请求分类":["118.13"],"请求方式":["118.14"],"请求方式为":["118.15"],"介绍":["119.0"],"nodejs":["119.1"],"an":["119.1"],"异步":["119.2","120.7"],"非阻塞":["119.2"],"io":["119.2","154.11"],"模型":["119.2"],"文件系统模块":["120.1"],"模块中所有的操作都有两种形式可供选择":["120.1"],"同步和异步":["120.1"],"同步文件系统会阻塞程序的执行":["120.1"],"也就是除非操作完毕":["120.1"],"fs":["120.3","120.4","120.6","120.9","120.10"],"readfile":["120.3"],"callback":["120.3","120.6","120.10"],"文件路径":["120.3"],"简单文件读取的方式会一次性读取文件内容到内存中":["120.4"],"若文件较大":["120.4"],"会占用过多内存影响系统性能":["120.4"],"且读取速度慢":["120.4"],"大文件适合用流式文件读取":["120.4"],"它会分多次将文件读取到内存中":["120.4"],"创建一个可读流":["120.4"],"writefile":["120.6"],"file":["120.6"],"同步":["120.7"],"简单文件的写入都不适合大文件的写入":["120.7"],"性能较差":["120.7"],"容易导致内存溢出":["120.7"],"缓冲区":["120.8"],"缓冲区文档":["120.8"],"的结构与数组类似":["120.8"],"操作方法也与数组类似":["120.8"],"dirname":["120.9"],"模块操作文件时":["120.9"],"验证路径是否存在":["120.10"],"exists":["120.10"],"existssync":["120.10"],"获取文件信息":["120.10"],"stat":["120.10"],"删除文件":["120.10"],"路径模块":["120.11"],"join":["120.12"],"basename":["120.13"],"extname":["120.14"],"模块":["120.15","122.2"],"服务器实例":["120.16"],"server":["120.17"],"createserver":["120.17"],"概念":["121.2"],"避免命名空间的冲突":["121.3"],"中模块化":["121.4"],"自定义模块中都有一个":["121.7"],"模块化规范":["121.8"],"模块第一次加载后会被缓存":["121.9"],"内置模块加载优先级最高":["121.10"],"加载自定义模块时":["121.11","121.21"],"路径要以":["121.11"],"若导入第三方模块":["121.12"],"会从":["121.12"],"当前模块的父目录":["121.12"],"开始":["121.12"],"当把目录作为模块标识符进行加载的时候":["121.13"],"有三种加载方式":["121.13","121.23"],"在被加载的目录下查找":["121.13"],"与包":["121.14"],"中的第三方模块又叫做":["121.15"],"在项目中安装包的命令":["121.16"],"的下包速度慢的问题":["121.17"],"注册":["121.18","125.1"],"账号":["121.18"],"初始化包的基本结构":["121.18"],"模块在第一次加载后会被缓存":["121.19"],"内置模块的加载优先级最高":["121.20"],"必须指定以":["121.21"],"如果传递给":["121.22"],"的模块标识符不是一个内置模块":["121.22"],"也没有以":["121.22"],"则":["121.22"],"当把目录作为模块标识符":["121.23"],"传递给":["121.23"],"进行加载的时候":["121.23"],"操作":["122.1"],"数据库":["122.3"],"db":["122.3"],"query":["122.3"],"users":["122.3"],"err":["122.3"],"results":["122.3"],"表示占位符":["122.3"],"sql":["122.3"],"开发模式":["122.4"],"服务器发送给客户端的":["122.5"],"页面":["122.5"],"是在服务器通过字符串的拼接动态生成的":["122.5"],"因此客户端不需要使用":["122.5"],"前后端分离的开发模式":["122.6"],"依赖于":["122.6"],"技术的广泛应用":["122.6"],"企业级网站":["122.7"],"认证机制":["122.9","122.12"],"工作原理":["122.10","122.13"],"session":["122.11","122.13"],"认证":["122.11"],"配置中间件":["122.11"],"认证的局限性":["122.13"],"认证机制需要配合":["122.13"],"才能实现":["122.13"],"由于":["122.13","127.7"],"默认不支持跨域访问":["122.13"],"jwt":["122.14"],"jsonwebtoken":["122.14"],"用于生成":["122.14"],"用于将":["122.14"],"字符串解析还原成":["122.14"],"secret":["122.14"],"密钥":["122.14"],"为保证":["122.14"],"的命令对比":["123.0"],"下面是一个包含":["123.0"],"命令对比的":["123.0"],"markdown":["123.0"],"表格":["123.0"],"以下是一些常用的":["124.3"],"init":["124.3","154.2"],"初始化一个新的":["124.3"],"项目":["124.3"],"是每个":["124.4"],"不仅可以帮助你管理项目的依赖项":["124.6"],"准备发布文件":["125.4"],"发布包":["125.5"],"更新和维护":["125.6"],"的安装与使用":["126.0"],"在开始之前":["126.1"],"后":["126.2"],"你可以使用以下常用命令来管理依赖关系和执行其他操作":["126.2"],"进入你的项目目录":["126.2"],"并运行以下命令来初始化项目":["126.2"],"shell":["126.2","154.3"],"canvas":["127.0","127.1","127.2","127.6","127.7","127.8","130.1","135.2","136.3"],"坐标系统":["127.3"],"绘图上下文":["127.4"],"绘图元素":["127.5"],"创造交互式效果":["127.6"],"创造动画":["127.7"],"的局限性":["127.8"],"图像变换":["128.0"],"以下方法用于图像变换":["128.0"],"rotate":["128.1","136.3"],"canvasrenderingcontext2d":["128.1","128.2","128.3","128.4","128.5","131.1","131.2","131.4","133.6"],"scale":["128.2"],"方法用于缩放图像":["128.2"],"它接受两个参数":["128.2"],"分别是":["128.2"],"轴方向的缩放因子和":["128.2"],"translate":["128.3","136.3"],"方法接受一个变换矩阵的六个元素作为参数":["128.4"],"完成缩放":["128.4"],"旋转":["128.4"],"移动和倾斜等变形":["128.4"],"它的使用格式如下":["128.4"],"settransform":["128.5"],"方法取消前面的图形变换":["128.5"],"将画布恢复到该方法指定的状态":["128.5"],"该方法的参数与":["128.5"],"图像合成":["129.0"],"在默认情况之下":["129.0"],"over":["129.1"],"在目标图像上显示源图像":["129.1"],"atop":["129.1"],"在目标图像顶部显示源图像":["129.1"],"源图像位于目标图像之外的部分是不可见的":["129.1"],"strokestyle":["130.2"],"设置或返回描边颜色":["130.2"],"fillstyle":["130.2","132.0"],"设置或返回填充颜色":["130.2"],"stroke":["130.2"],"样式控制":["131.0"],"线性":["131.1"],"以下的方法和属性控制线条的视觉特征":["131.1"],"linewidth":["131.1"],"指定线条的宽度":["131.1"],"默认为":["131.1"],"渐变色":["131.2"],"以下方法用于设置渐变效果和图像填充效果":["131.2"],"createlineargradient":["131.2"],"定义线性渐变样式":["131.2"],"createradialgradient":["131.2"],"定义辐射渐变样式":["131.2"],"createpattern":["131.2","131.3"],"定义图像填充样式":["131.2"],"方法按照给定直线":["131.2"],"生成线性渐变的样式":["131.2"],"x0":["131.2"],"图像填充":["131.3"],"方法定义一个图像填充样式":["131.3"],"在指定方向上不断重复该图像":["131.3"],"填充指定的区域":["131.3"],"image":["131.3","133.5"],"阴影":["131.4"],"以下属性用于设置阴影":["131.4"],"shadowblur":["131.4"],"阴影的模糊程度":["131.4"],"save":["132.0","136.3"],"保存当前环境的状态":["132.0"],"restore":["132.0"],"返回之前保存过的路径状态和属性":["132.0"],"绘制图形":["133.0","147.0"],"绘制矩形fillrect":["133.2"],"strokerect":["133.2"],"位置x":["133.2"],"位置y":["133.2"],"宽度":["133.2"],"圆弧":["133.3"],"arc":["133.3","147.4"],"圆心x":["133.3"],"圆心y":["133.3"],"半径":["133.3"],"开始的角度":["133.3"],"结束的角度":["133.3"],"顺时针false":["133.3"],"逆时针true":["133.3"],"默认值false":["133.3"],"beginpath":["133.4"],"moveto":["133.4","134.1","134.2"],"三种绘制图片的的方式":["133.5"],"drawimage":["133.5"],"dx":["133.5"],"dy":["133.5"],"以下方法和属性用于绘制文本":["133.6"],"filltext":["133.6"],"在指定位置绘制实心字符":["133.6"],"stroketext":["133.6"],"在指定位置绘制空心字符":["133.6"],"measuretext":["133.6"],"返回一个":["133.6"],"textmetrics":["133.6"],"font":["133.6"],"指定字型大小和字体":["133.6"],"贝塞尔曲线":["134.0"],"聊天框":["134.1"],"爱心":["134.2"],"cbtn":["135.1","138.4"],"ggk":["135.2"],"谢谢惠顾":["135.2"],"mycanvas":["135.2"],"当前浏览器不支持canvas":["135.2"],"请下载最新的浏览器":["135.2"],"clock":["136.1"],"getcontext":["136.3"],"2d":["136.3"],"clearrect":["136.3"],"存档":["136.3"],"保存当前坐标位置和上下文对象":["136.3"],"参考视频教程":["137.0"],"plum":["137.1"],"draw":["138.1"],"boldbtn":["138.3"],"粗线条":["138.3"],"thinbtn":["138.3"],"细线条":["138.3"],"savebtn":["138.3"],"保存签名":["138.3"],"inputcolor":["138.3"],"clearbtn":["138.3"],"橡皮擦":["138.3"],"btns":["138.4"],"该内容正在努力建设中":["139.0"],"事件交互":["140.0"],"为精灵添加交互事件":["140.1"],"sprite":["140.1","143.2","146.3"],"创建矩形":["140.2"],"rect":["140.2","150.4"],"pixijs":["141.0","141.1","141.7"],"是一个基于":["141.1"],"下面是一个简单的":["141.7"],"展示了如何创建一个基本的场景并添加一个可交互的精灵":["141.7"],"创建一个场景":["141.7"],"类详解":["142.2"],"导入pixi":["142.2","143.1","145.1","146.1","149.1","149.2"],"pixi":["142.2","143.1","143.2","145.1","145.3","149.1","149.2"],"创建应用":["142.2","143.1","146.1","149.1","149.2"],"文字与遮罩":["143.0"],"创建一个精灵":["143.2"],"滤镜特效":["145.0"],"创建模糊滤镜":["145.2"],"blurfilter":["145.2"],"filters":["145.3"],"精灵与动画":["146.0"],"创建纹理与精灵":["146.2"],"设置属性":["146.3"],"锚点":["146.3"],"ellipse":["147.1"],"polygon":["147.2","150.7"],"roundedrectangle":["147.3"],"谷歌恐龙小游戏素材":["148.1"],"资源管理":["149.0"],"application":["149.1","149.2"],"innerwidth":["149.1","149.2"],"svg":["150.1","150.7","150.9"],"scalable":["150.1"],"circle":["150.5"],"cllipse":["150.6"],"polyline":["150.8"],"threejs":["151.0"],"学习指南":["151.0"],"中文官方文档":["151.0"],"是一种用于在":["151.0"],"浏览器中创建交互式":["151.0"],"3d":["151.0"],"图形的":["151.0"],"它允许开发人员在":["151.0"],"应用程序中轻松地渲染":["151.0"],"scene1":["152.2"],"scene2":["152.5"],"group":["152.9","152.12","153.5"],"scene":["152.11"],"位移和旋转":["153.0"],"例如设置x轴放大3倍":["153.1"],"直接设置旋转属性":["153.3"],"从":["154.0"],"创建项目":["154.1","154.3"],"vitepress":["154.2","154.7"],"运行":["154.4"],"基本配置":["154.5"],"在目录下新建":["154.6"],"文件夹":["154.6"],"在其中新建":["154.6"],"配置首页":["154.7"],"支持用户使用":["154.7"],"yaml":["154.7"],"配置页面的内容":["154.7"],"中可以开始我们的配置":["154.9"],"先写上如下内容":["154.9"],"这是网站的标题和描述":["154.9"],"标题会在浏览器标签上展示":["154.9"],"themeconfig":["154.10"],"省略前面的内容":["154.10"],"部署到":["154.11"],"github":["154.11"],"新建脚本文件":["154.11"],"deploy":["154.11"],"sh":["154.11"],"文件夹处于同一级":["154.11"],"usr":["154.11"]},{"0":["10.10","13.18","13.20","14.3","18.25","34.7","48.2","49.5","49.12","52.3","52.13","63.6","65.2","65.3","69.2","73.3","73.6","73.7","110.7","127.3","128.2","131.4","132.0","133.3","146.3","150.9","154.0"],"1":["7.6","9.14","9.16","10.6","10.10","10.12","13.17","14.3","14.10","15.3","15.5","18.25","21.1","35.5","39.5","39.6","40.1","40.2","41.29","48.19","48.24","48.31","48.32","49.11","50.3","52.4","53.7","53.12","54.15","58.0","63.6","69.0","73.5","73.6","73.7","76.3","77.6","77.12","84.3","88.8","92.6","99.20","107.1","113.2","135.2","138.3","149.1","149.2","151.0"],"2":["7.6","9.14","9.15","10.5","10.6","10.10","10.12","10.18","13.5","14.3","15.2","15.3","15.5","16.9","17.10","18.31","35.6","36.6","39.1","39.6","41.0","41.1","48.32","52.3","52.4","53.7","65.4","73.5","73.7","73.9","77.12","87.1","95.8","99.7","99.8","99.21","110.5","110.7","111.1","122.2","133.3","135.2","136.3","138.3","150.1"],"3":["7.6","9.15","10.3","10.10","10.12","14.11","14.16","15.2","18.32","36.6","45.1","48.32","49.1","53.2","73.7","87.2","99.8"],"4":["6.4","7.2","9.15","15.2","48.32","52.13","73.3","73.5","73.7","87.2","117.6"],"5":["6.4","7.2","15.2","49.12","52.13","55.6","87.2","128.2","146.3"],"6":["7.2","10.12","84.1","110.6","110.7"],"8":["18.23","18.24","18.25","30.22","76.2","110.7","136.3"],"9":["88.7"],"10":["53.3","54.14","54.18","84.3","87.1","87.2","147.5"],"12":["136.3"],"13":["86.14"],"16":["30.22","120.8"],"18":["13.3","13.4","13.22","55.2","92.3","102.8"],"23":["84.1"],"24":["13.4"],"27":["110.7"],"28":["15.11"],"30":["92.18"],"32":["113.1"],"38":["113.2"],"50":["128.2","128.5","133.2"],"55":["54.2"],"79":["87.1"],"100":["52.3","132.0","133.2"],"120":["134.2"],"150":["133.2","133.3"],"170":["136.3"],"190":["136.3"],"200":["71.5"],"234":["52.3"],"255":["113.1","113.3"],"300":["71.5","133.4","134.2"],"308":["87.1"],"400":["130.1"],"404":["120.17"],"600":["138.3","141.7"],"768":["113.1"],"800":["141.7"],"1000":["138.3"],"1999":["6.4"],"2009":["6.4"],"123456":["98.6"],"2357490894":["0.0"],"在":["5.0","6.4","16.14","17.8","18.30","29.15","29.16","30.7","30.9","30.16","31.5","31.6","32.0","32.12","32.13","34.0","35.0","35.1","36.0","38.4","41.29","42.3","42.5","44.5","66.1","71.0","79.0","88.1","89.1","110.9","116.2","124.5"],"类名通常首字母大写":["5.1"],"js":["5.1","5.2","5.3","5.5","8.9","8.11","8.12","8.13","8.14","8.23","8.25","9.3","9.4","9.7","9.8","9.10","10.17","10.19","11.4","11.6","11.8","11.9","11.11","11.16","11.20","13.22","14.2","14.8","14.13","14.14","14.17","15.6","33.10","37.1","39.0","39.3","39.6","41.8","41.18","41.19","41.20","43.2","45.1","48.7","48.8","48.9","48.10","48.14","48.17","48.19","48.23","48.26","48.28","48.29","48.30","48.31","49.1","49.4","49.8","49.10","49.12","50.0","50.2","50.7","51.1","51.4","54.4","54.7","54.15","55.4","63.4","66.2","69.1","69.3","69.4","69.5","70.1","70.2","70.3","77.9","78.1","78.2","80.1","80.2","86.14","92.2","92.7","92.10","92.11","92.12","92.13","92.14","92.15","92.16","92.19","92.20","95.5","95.11","98.2","105.3","118.3","118.8","119.2","119.3","120.13","122.2","122.5","122.11","122.14","124.2","126.1","128.1","128.5","130.1","135.2","145.3","146.2","146.4","154.6"],"person":["5.1","8.18","13.3","13.4","13.22","15.9","15.10","72.2","89.2","90.2","93.2","102.8","102.10"],"关键字":["5.2"],"const":["5.2","8.16","8.19","8.21","8.22","8.23","9.4","9.7","9.8","9.10","10.11","10.16","12.2","12.3","12.4","13.8","13.22","15.4","15.5","15.9","15.10","30.19","30.21","32.3","33.15","38.6","39.6","63.8","66.2","69.1","69.3","69.4","69.6","70.0","70.2","70.3","71.4","77.9","80.1","88.9","92.6","92.8","92.11","92.12","92.13","92.14","92.16","92.19","92.20","93.2","98.6","106.7","118.8","120.14","122.11","122.14","143.1"],"extends":["5.3","30.18","31.3","31.13","32.3","32.7","32.8","32.9","32.10","32.11","32.15","34.7","35.5","72.8","110.8"],"关键字来继承另一个类的属性和方法":["5.3"],"class":["5.3","5.4","5.5","5.6","8.18","20.1","20.2","21.0","30.18","31.3","31.8","31.13","32.3","32.5","32.7","32.8","32.9","32.15","34.4","34.7","35.3","35.5","36.3","102.2","102.7","102.10"],"student":["5.4"],"而不是类的实例":["5.5"],"mathutils":["5.5"],"circle":["5.6"],"constructor":["5.6","8.18","30.18","34.7","35.5","90.2","102.1","102.6","102.8"],"radius":["5.6"],"this":["5.6","8.18","12.3","34.3","34.6","34.7","35.5","43.9","72.2","72.4","72.6","90.1","92.4","95.10"],"阮一峰ecmascript":["6.1"],"是一种由":["6.2"],"ecma":["6.2"],"国际":["6.2"],"european":["6.2"],"computer":["6.2"],"是一个脚本语言":["6.3"],"注意":["6.3","92.4","120.12"],"是":["6.3","7.1","18.8","29.20","30.1","38.1","77.2","82.0","83.0","85.2","86.0","105.1","127.1"],"也是脚本语言":["6.3"],"通常可以看作是":["6.3"],"的基础上做了大量改进":["6.4"],"包括正则表达式":["6.4"],"异常处理":["6.4"],"更严格的错误定义等":["6.4"],"es4":["6.4"],"未完成":["6.4"],"被放弃":["6.4"],"在制定过程中遇到了较大的争议和复杂性":["6.4"],"最终被放弃":["6.4"],"相关特性后来分别在后续版本中被引入":["6.4"],"es5":["6.4"],"添加了严格模式":["6.4"],"strict":["6.4"],"mode":["6.4","120.6"],"提供更安全的编程环境":["6.4"],"新增了":["6.4"],"json":["6.4","71.5","121.13","121.18","121.23","124.3","126.2","154.2"],"对象":["6.4","9.3","10.10","11.18","11.19","13.6","56.0","57.0","58.0","59.0","60.0","61.0","62.0","84.2"],"使得操作":["6.4"],"判断":["7.2"],"中是否包含指定的键":["7.2"],"返回布尔值":["7.2"],"delete":["7.2","116.8"],"从":["7.2"],"中删除指定键及其对应的值":["7.2"],"返回一个布尔值":["7.2"],"表示是否删除成功":["7.2"],"clear":["7.2"],"清空":["7.2"],"中的所有键值对":["7.2"],"size":["7.2"],"属性":["7.2","16.14","23.2","29.10","32.0","41.2","52.10"],"用于获取":["7.2"],"value1":["7.4","9.12","112.2"],"key2":["7.4"],"value2":["7.4","9.12","112.2"],"可以将":["7.4"],"二维":["7.4"],"new":["7.5","9.12","9.13","9.14","9.16","10.17","14.4","39.6","63.8","80.2","84.5","140.2","141.7","142.2","143.1","145.1","145.2","147.1"],"map":["7.5","9.6","14.15","35.4"],"key1":["7.5"],"one":["7.6"],"two":["7.6"],"three":["7.6"],"作为一种脚本语言":["8.1"],"其应用范围也越来越广泛":["8.1"],"代码中":["8.2"],"所有的变量":["8.2"],"函数和类等都只在当前模块的作用域内有效":["8.3"],"每个模块都有自己的职责":["8.4"],"提高了代码的可重用性":["8.5"],"es6":["8.6","8.24","8.28","30.11","93.1"],"export":["8.7","8.8","8.17","8.19","8.21","110.10","154.9"],"关键字导出一个函数":["8.8"],"module1":["8.9"],"import":["8.10","8.14","32.15","33.10","35.2","35.3","35.4","36.2","36.3","36.4","36.5","38.3","41.17","41.18","41.19","41.20","98.2","110.7","110.12","146.1","152.6"],"关键字导入其他模块中的单个变量":["8.11"],"关键字导入其他模块中的函数":["8.12"],"main":["8.13","8.14"],"一个模块还可以有一个默认导出":["8.15"],"age":["8.16","10.10","12.2","13.18","13.22","15.8","15.11","55.2","65.3","82.6","83.6","89.2","92.3","92.18","101.13","102.1","102.6","102.8"],"default":["8.17","110.10","154.9"],"function":["8.17","10.19","30.14","30.17","30.19","50.3","50.7","50.12","55.1","55.8","65.1","67.1","72.6","74.2","74.4","89.1","89.2","89.3","90.1","95.3","97.3","101.8","103.2","104.2","104.3","104.7","117.4","118.8"],"name":["8.18","8.19","10.10","12.2","12.4","13.22","15.8","15.10","15.11","18.23","18.24","18.25","43.9","48.21","62.1","65.3","72.2","72.4","72.6","82.6","83.6","89.1","89.2","90.2","93.2","95.3","99.1","102.6","102.8","106.3","124.3"],"as":["8.20","33.11","33.13","33.14","101.14","146.1"],"myage":["8.22"],"这样可以优化代码加载":["8.23"],"提高页面的响应速度":["8.23"],"需要在":["8.26"],"无需显式指定":["8.27"],"总结":["8.28","119.2"],"模块化是一种优雅":["8.28"],"对象是值的集合":["9.1"],"对象尾部添加一个元素":["9.3"],"返回该":["9.3"],"对象内的所有元素":["9.4"],"s":["9.4","9.7","13.4","109.2"],"set":["9.5","9.7","9.14","9.16","41.7","102.10","146.3","154.11"],"prototype":["9.5","72.2","72.4","87.2"],"has":["9.5","14.15"],"会在此之后返回":["9.5"],"false":["9.5","39.6","48.20","52.11","53.9","54.6","54.15","54.16","113.5","122.11","133.3"],"value":["9.6","14.12","41.13","43.17","52.2","82.1","83.1","92.5","101.14","104.6"],"数组":["9.6"],"为了使这个方法和":["9.6"],"对象保持相似":["9.6"],"中存在与否":["9.7"],"对象中的按插入顺序排列的所有元素的值":["9.8"],"set1":["9.8"],"与":["9.9","42.6"],"对象中的值的个数":["9.10"],"实现的一些方法":["9.11"],"value3":["9.12"],"myset":["9.13"],"b":["9.15","14.12","19.1","52.3","52.4","54.18","67.1","128.4"],"就用传递的参数":["10.2"],"if":["10.3","43.13","48.24","67.4","67.5","71.5","73.4","89.3","97.5","98.3","98.4","122.3"],"typeof":["10.3","54.5"],"undefined":["10.3","10.4","10.6","15.4","50.7","52.10","53.3","54.15","95.8","107.1"],"或者明确的传递":["10.4"],"typeerror":["10.5"],"cannot":["10.5"],"read":["10.5"],"property":["10.5","41.12"],"of":["10.5","14.10","14.12","16.12"],"上面代码只使用了对象的解构赋值默认值":["10.5"],"没有使用函数参数的默认值":["10.5"],"只有当函数":["10.5"],"的参数是一个对象时":["10.5"],"y":["10.6","103.1"],"return":["10.6","10.12","10.15","13.6","32.11","48.24","67.1","67.4","68.3","68.6","68.7","73.3","92.4","98.4","98.5","103.1","110.10","122.3"],"options":["10.7","120.10"],"再优化":["10.7"],"rest":["10.9"],"syntax":["10.9"],"arrlike":["10.10"],"job":["10.10"],"而它所对应的数组应该是这样子的":["10.10"],"arr":["10.10","14.9","14.10","69.0","69.3","69.4","69.6","70.0","70.4","73.5","73.6","73.7","104.6"],"这里我们说类数组对象与数组的性质相似":["10.10"],"是因为类数组对象在":["10.10"],"访问":["10.10"],"赋值":["10.10"],"获取长度":["10.10"],"上的操作与数组是一致的":["10.10"],"具体内容可查阅相关的类数组使用":["10.10"],"在函数体中定义了":["10.10"],"也不能省略圆括号":["10.11"],"add":["10.11","67.1","103.2","103.3","104.3","104.6","123.0","154.2"],"也可以":["10.12"],"console":["10.12","11.4","11.13","12.5","13.3","13.12","13.13","13.14","13.22","41.28","49.6","49.12","52.12","52.13","53.11","55.3","55.6","59.2","60.2","72.4","73.3","73.4","92.15","95.3","97.3","97.5","101.8","109.2","118.7","118.8","122.3"],"log":["10.12","12.5","13.13","13.14","13.22","41.28","49.6","49.12","52.12","52.13","55.3","55.6","59.2","60.2","72.4","73.3","73.4","92.15","95.3","101.8","109.2","118.7","118.8","122.3"],"与解构赋值结合使用":["10.12"],"函数中的":["10.13"],"arguments":["10.13","103.4"],"引入了箭头函数":["10.14"],"arrow":["10.14"],"parameter1":["10.15"],"parameter2":["10.15"],"函数体":["10.15","50.3"],"没有参数":["10.16"],"greet":["10.16"],"比如函数是否作为对象的方法调用":["10.17"],"是否使用":["10.17"],"关键字等":["10.17"],"而在箭头函数中":["10.17"],"继承自上层作用域":["10.17"],"指向的是定义箭头函数的外层函数或代码块的":["10.17"],"传统函数中的this":["10.17"],"如果箭头函数的函数体为空或只有一个表达式":["10.18"],"可以省略花括号和":["10.18"],"都不允许最后一个参数后面出现逗号":["10.19"],"clownseverywhere":["10.19"],"param1":["10.19"],"param2":["10.19"],"结构":["10.20"],"以前明确要求":["10.20"],"命令后面必须跟参数":["10.20"],"我们也可将字符串常用的操作方法归纳为增":["11.1"],"而是创建字符串的一个副本":["11.2","11.5"],"let":["11.3","11.4","11.8","11.9","11.13","11.16","11.20","14.4","14.5","14.8","14.9","15.6","41.4","48.8","48.9","48.10","48.14","48.17","48.19","48.23","48.26","48.29","48.30","48.31","49.12","54.2","54.3","54.4","68.3","68.6","69.2","73.6","89.2","101.1","101.5","101.12","107.1","109.1","109.2","136.3","138.3"],"stringvalue":["11.3","11.4","11.8","11.9"],"hello":["11.3","11.4","29.22","88.9"],"这三个方法都返回调用它们的字符串的一个子字符串":["11.4"],"而且都接收一或两个参数":["11.4"],"world":["11.4","29.22","88.9"],"再进行操作":["11.5"],"后或前后所有空格符":["11.6"],"再返回新的字符串":["11.6"],"表示要将字符串复制多少次":["11.7"],"然后返回拼接所有副本后的结果":["11.7"],"直至满足长度条件":["11.8"],"没有第二个参数默认空格":["11.8"],"由传给方法的整数参数指定":["11.11"],"如果没找到":["11.12"],"则返回":["11.12","53.9","53.10"],"message":["11.13","43.9","98.4","122.3"],"foobarbaz":["11.13"],"返回参数指定位置的字符":["11.14"],"支持负索引":["11.14"],"针对正则表达式":["11.17"],"regexp":["11.18","11.19","88.4"],"返回数组":["11.18"],"找到则返回匹配索引":["11.19"],"可用函数":["11.20"],"引入了模板字符串":["12.1"],"john":["12.2","15.8","82.6","83.6","93.2"],"multilinetext":["12.3"],"is":["12.3","43.9"],"a":["12.3","13.17","14.12","16.11","27.2","43.9","52.4","55.8","67.1","92.6","92.8","101.12","102.10","104.2","104.4","106.2","106.3","107.1","120.4","121.23","128.4"],"multi":["12.3"],"javascript":["12.4","13.8","13.11","13.12","13.20","15.4","15.10","30.2","30.8","38.3","38.6","38.7","39.5","39.6","51.3","52.11","55.5","63.1","65.1","66.1","67.3","71.3","71.4","72.6","72.8","74.2","75.4","81.1","81.3","82.6","83.6","86.0","88.1","88.2","88.9","89.1","93.2","95.3","105.2","108.0","110.6","119.1","124.1","127.7"],"values":["12.5","48.23","112.2","122.3"],"包含模板字符串中的文本部分":["12.5"],"等同于":["13.1","52.13"],"上面代码中":["13.1","13.6","52.10"],"变量":["13.1"],"直接写在大括号里面":["13.1"],"这时":["13.1"],"属性名就是变量名":["13.1"],"属性值就是变量值":["13.1"],"sex":["13.4","13.18","92.3"],"man":["13.4"],"ex2":["13.4"],"属性名由数字":["13.5"],"字母":["13.5"],"object":["13.6","52.3","52.9","85.1","93.1","93.2","93.4"],"setprototypeof":["13.6"],"方法之中":["13.6"],"通过":["13.6","18.3","40.2","43.12","54.6"],"apple":["13.8"],"shape":["13.9"],"球形":["13.9"],"taste":["13.9","13.15"],"甜":["13.9","13.15"],"pen":["13.9","13.15"],"则没有任何效果":["13.11"],"没有属性便为空":["13.12"],"字符串在对象中展开":["13.13"],"alex":["13.13","13.22"],"feature":["13.15"],"x":["13.17","15.6","84.5","101.5","103.1","103.2","103.3","128.3","134.2"],"zhangsan":["13.18","95.11"],"male":["13.18"],"param":["13.18"],"后者的":["13.20"],"nan":["13.20","54.16","101.2"],"不等于自身":["13.20"],"以及":["13.20"],"等于":["13.20"],"缺乏一种运算":["13.20"],"如果目标对象与源对象有同名属性":["13.21"],"或多个源对象有同名属性":["13.21"],"则后面的属性会覆盖前面的属性":["13.21"],"汇总":["13.21"],"基本用法":["13.21","13.22"],"属性的键值对数组":["13.22"],"返回键数组":["13.22"],"数组新增方法":["14.0"],"将参数中所有值作为元素形成数组":["14.1"],"没有参数则返回空数组":["14.1"],"array":["14.6","14.9","14.10","41.28","48.0","69.1","85.1"],"复制起始位置":["14.11"],"可选":["14.11","87.2"],"复制结束位置":["14.11"],"key":["14.12","52.2","82.1","82.2","83.1","83.2","92.5","100.4"],"for":["14.13","14.14","44.4","49.12","96.2","136.3"],"的":["14.15","39.2","41.31","52.10"],"方法用于查找值":["14.15"],"指定转换的嵌套层数":["14.16"],"方法":["14.17","34.4","63.5","66.2","71.4","73.0","86.10","95.12"],"参数1":["14.17"],"遍历函数":["14.17"],"destructuring":["15.0"],"assignment":["15.0"],"将数组的元素提取出来并赋值给变量":["15.1"],"numbers":["15.3","15.4","15.5","35.5","48.30","48.31","48.32"],"将对象的属性值提取出来并赋值给变量":["15.7"],"fullname":["15.9"],"bob":["15.11"],"address":["15.11"],"用于清除内外边距":["16.1"],"优点":["16.2"],"css":["16.3","16.5","16.7","16.8","18.18","18.19","18.20","20.3","20.7","23.2","25.4","75.4"],"通过元素":["16.4"],"beaauty":["16.5"],"语法":["16.5","30.0","37.6","49.9","49.10","101.14","110.9"],"中间没有空格":["16.5"],"又称":["16.6"],"分组选择器":["16.6"],"p":["16.9","77.10"],"p0":["16.9"],"dom":["16.10","16.14","31.11","33.11","33.13","33.14","33.15","35.6","37.13","42.8","42.9","76.4"],"link":["16.11","33.11","33.13","33.14","38.5"],"链接一开始的样式":["16.11"],"nth":["16.12"],"n":["16.12","101.9"],"第":["16.12"],"个子元素":["16.12"],"type":["16.12","24.2","24.3","26.11","63.8","63.9","71.5"],"指定元素":["16.12"],"属性的":["16.13"],"元素":["16.13","131.3"],"创建了一个行内元素":["16.14"],"树中无法找到":["16.14"],"故为伪元素":["16.14"],"必须有":["16.14"],"content":["16.14","17.9","17.10","18.24","18.25","23.2","43.9","71.5","80.2"],"选择器":["16.14"],"含义":["16.14"],"在元素内部前面插入内容":["16.14"],"只需在要成为":["17.1"],"可以使用":["17.2","17.4","93.1","121.7"],"direction":["17.2","17.5","133.6"],"属性更改主轴方向":["17.2"],"定义":["17.3"],"flex":["17.3","20.3"],"项目在主轴上的对齐方式":["17.3"],"start":["17.3","133.6"],"默认值":["17.3","131.1"],"如果项目超出了容器的宽度":["17.4"],"它们会缩小以适应":["17.4"],"grow":["17.6"],"属性可以控制项目在剩余空间中的放大比例":["17.6"],"basis":["17.7"],"属性定义了项目的基准尺寸":["17.7"],"项目内部可以再创建一个新的":["17.8"],"属性控制交叉轴上多行的对齐方式":["17.9"],"定义多行":["17.9"],"和":["17.10","18.6","18.10","18.11","18.13","18.14","18.15","18.16","26.9","31.10","39.3","43.17","54.6","66.2","71.1","95.10","107.1","118.2","131.2","141.1"],"align":["17.10","18.13","18.14","18.15"],"items":["17.10"],"属性实现水平和垂直居中对齐":["17.10"],"两端对齐":["17.10"],"使用":["17.10","72.18","93.4","102.4","102.5","116.1","116.8"],"现代网页布局的终极解决方案":["18.0"],"布局":["18.1","18.2","18.27","18.28","20.8","25.4"],"布局是一种二维布局模型":["18.1"],"可以将网页划分为网格":["18.1"],"要使用":["18.2"],"grid":["18.2","18.4","18.5","18.9","18.21","18.26","18.27","18.28","18.30","18.33"],"通过定义网格的行和列":["18.3"],"我们可以创造出复杂的网页布局":["18.3"],"在网格容器中":["18.3"],"布局中":["18.4"],"网格线":["18.4"],"lines":["18.4"],"rows":["18.6","18.11"],"允许通过指定网格区域的名称来创建更具语义的布局":["18.7"],"通过在网格容器中使用网格区域名称":["18.7"],"而不是使用行和列属性":["18.7"],"columns":["18.8","18.11"],"gap":["18.9"],"row":["18.10","18.16"],"auto":["18.12"],"flow":["18.12"],"self":["18.15"],"创建网格布局":["18.17"],"track":["18.18"],"是相邻网格线之间的空间":["18.18"],"包括行轨道和列轨道":["18.18"],"我们可以通过设置网格轨道的大小和增长方式来控制网格布局":["18.18"],"template":["18.19","18.33","41.7","41.10","41.14","41.30","42.5","43.8","43.11","136.4","137.2","142.1","144.1","148.2"],"我们可以更加直观地定义网格布局":["18.19"],"使得布局结构更加清晰":["18.19"],"queries":["18.20"],"我们可以在不同的屏幕尺寸和设备上应用不同的网格布局":["18.20"],"container":["18.20","20.1","20.2","20.7"],"display":["18.20","20.3"],"doctype":["18.22","25.1","29.23","37.4","51.3"],"lang":["18.22","18.23","18.24","110.9"],"en":["18.22","18.23","18.24","76.2"],"head":["18.22","18.23","18.24","25.1","76.2","118.15"],"meta":["18.22","18.23","18.24","25.1","76.2"],"charset":["18.22","18.23","18.24","18.25","25.1","76.2"],"utf":["18.22","18.23","18.24","18.25","76.2"],"viewport":["18.23","18.24","18.25"],"width":["18.25","20.5","21.3","23.2","24.7","61.2","138.3","141.7","142.2","143.1","145.1"],"device":["18.25"],"initial":["18.25"],"scale":["18.25"],"title":["18.25","154.7","154.9"],"布局与":["18.26"],"适用场景":["18.27"],"布局的差异与共同点":["18.28"],"常见问题与最佳实践":["18.29"],"网格项目的排序与定位":["18.30"],"跨浏览器兼容性":["18.31"],"性能考虑":["18.32"],"使用网格模板":["18.33"],"和网格区域":["18.33"],"选择器的优先级为":["19.0"],"important":["19.0"],"c":["19.1","111.0","120.4","128.4"],"格式":["19.1"],"id":["19.1","39.6","56.1","80.0"],"选择器的个数":["19.1"],"html":["20.1","24.0","26.0","26.1","26.2","26.3","26.4","26.5","26.6","26.7","26.8","26.9","26.10","26.12","26.14","26.15","30.12","37.4","37.10","37.12","51.2","51.3","76.1","77.10","150.6"],"div":["20.1","21.0","27.1","37.17","41.7","41.30","42.5","43.8","43.11","46.4","137.2"],"400px":["20.5","20.6","21.3"],"height":["20.5","20.6","22.0","101.13","130.1","138.3","141.7","142.2","143.1","145.1","149.1"],"200px":["20.6"],"background":["20.6","22.0"],"skyblue":["20.6"],"position":["20.6","153.2"],"100px":["21.1"],"设置元素的宽度":["21.1"],"限定宽度":["21.3"],"border":["21.3"],"solid":["21.3","23.1"],"横向":["22.0"],"color":["22.0"],"ededed":["22.0"],"滚动条上的按钮":["22.0"],"left":["23.1"],"5px":["23.1"],"transparent":["23.1"],"right":["23.1"],"bottom":["23.1"],"而且可以指定多个":["24.0"],"可以用来解决某些兼容问题":["24.0"],"h2":["24.0"],"音频示例":["24.0"],"audio":["24.0","26.15"],"类型":["24.1","101.14"],"mime":["24.2","24.3"],"标签":["24.5","24.6"],"src":["24.7","39.3"],"要播放的视频的":["24.7"],"url":["24.7","33.5","59.1","62.1","98.5","118.3","120.17"],"作用":["24.8"],"controls":["24.10"],"source":["24.10","119.1"],"播放":["24.11"],"暂停":["24.11"],"makebig":["24.11"],"放大":["24.11"],"makesmall":["24.11"],"文档通常包含以下结构":["25.1"],"内容":["25.2"],"有些标签是空标签":["25.2"],"没有结束标签":["25.2"],"br":["25.2","53.3","138.3"],"用于插入换行":["25.2"],"引入了许多新特性":["25.3"],"如语义化标签":["25.3"],"添加样式和图像":["25.4"],"然后逐渐增加复杂性":["25.4"],"学习如何使用":["25.4"],"h6":["26.1"],"li":["26.5","26.6","75.4"],"td":["26.9"],"action":["26.13"],"submit":["26.13"],"method":["26.13","118.15"],"h1":["26.14","42.5","42.12","46.1","46.2"],"网站标题":["26.14"],"并且在前后都会产生换行":["27.1"],"常见的块级标签包括":["27.1"],"最通用的容器标签":["27.1"],"用于将一组元素包裹在一起":["27.1"],"而是按照文本的自然流动排列":["27.2"],"常见的内联标签包括":["27.2"],"锚链接标签":["27.2"],"形成树状的结构":["27.3"],"例如":["27.3","27.4","41.29","43.13"],"可以将一段文本包裹在":["27.3"],"属性以键值对的形式出现":["27.4"],"放在标签的开始标签中":["27.4"],"规范中没有定义":["27.5"],"但可以在特定的应用中使用":["27.5"],"自定义标签应以":["27.5"],"data":["27.5","39.1","40.1","46.4"],"为前缀":["27.5"],"placeholder":["28.1","67.5"],"请输入登录密码":["28.1"],"v":["28.1","37.7","37.14","41.29","43.13","43.14","96.2","99.18","104.4"],"model":["28.1","37.14"],"web":["29.0","51.0","75.4","82.0","83.0","118.2"],"用于构建用户界面":["29.1"],"它专注于构建高性能":["29.1"],"可维护且可复用的":["29.1"],"ui":["29.1"],"组件":["29.1","33.12"],"使开发者能够轻松构建交互性的用户界面":["29.1"],"组件化开发":["29.3"],"react":["29.3","29.6","29.7","29.8","29.12","29.13","29.15","29.20","29.24","30.1","30.2","30.9","30.20","31.13","32.1","32.3","32.9","32.10","32.11","32.13","32.14","32.15","33.3","33.11","34.5","35.6","36.1","36.3","36.5","108.0","110.8"],"采用了虚拟":["29.4"],"技术":["29.4"],"它在内存中维护了一个虚拟的":["29.4"],"单向数据流":["29.5"],"拥有一个庞大的生态系统":["29.6"],"组件是":["29.8"],"中最重要的概念之一":["29.8"],"它是构建用户界面的基本单元":["29.8"],"xml":["29.9","30.1","63.1","76.1"],"是一种类似":["29.9"],"状态":["29.11","63.6"],"生命周期":["29.12","31.0"],"允许处理用户的交互事件":["29.13"],"如点击":["29.13"],"条件渲染":["29.14"],"条件渲染是根据条件来决定是否渲染组件或显示不同的内容":["29.14"],"处理用户输入的表单数据是常见的任务":["29.16"],"状态提升":["29.17"],"hoc":["29.18"],"高阶组件是一个函数":["29.18"],"上下文":["29.19"],"context":["29.19","128.4","128.5","133.2","138.3"],"利用":["29.21","127.7"],"为了通过":["29.22"],"写一个":["29.22"],"程序":["29.22"],"可以使用网站":["29.23"],"https":["29.23","42.11","62.2","143.2"],"www":["29.23"],"bootcdn":["29.23"],"cn":["29.23","110.4"],"提供的":["29.23"],"链接":["29.23"],"完整代码举例":["29.23"],"shell":["29.24","117.2","154.4"],"npm":["29.24","38.2","44.7","117.2","118.10","122.2","124.4","125.1","125.5"],"init":["29.24","44.6","123.0","126.2"],"latest":["29.24","44.6","110.8"],"代码":["30.2","49.3","51.3"],"这个转换过程将":["30.2"],"转换为":["30.2","54.15","54.16"],"createelement":["30.2","78.0"],"jsx":["30.4","30.5","30.6","30.7","30.8","30.14","31.3","31.8","31.11","31.13","32.5","32.15","33.10","34.4","34.7","35.2","35.3","35.4","36.2","36.3","36.4","36.5","108.0","110.8"],"中":["30.4","30.5","30.7","31.6","33.10","36.1","39.2","41.0","41.29","66.1","71.0","88.1","89.1","118.3"],"我们可以像写":["30.4"],"可以通过属性来传递数据给组件":["30.5"],"支持标签的嵌套":["30.6"],"可以将多个标签组合在一起形成复杂的":["30.6"],"支持在大括号内使用":["30.8"],"接受一个":["30.10"],"props":["30.10","30.15","30.17","30.21","31.1","31.8","31.9","35.5","42.7"],"对象作为参数":["30.10"],"类":["30.11","91.2"],"继承自":["30.11"],"我们可以像使用":["30.12"],"支持条件渲染":["30.13"],"greeting":["30.14","30.15"],"productlist":["30.17"],"来收集用户的输入并实时更新组件的状态":["30.18"],"formexample":["30.18"],"component":["30.18","31.13","32.3","32.10","32.11","34.7","35.5","37.16"],"temperatureconverter":["30.19"],"celsius":["30.19"],"setcelsius":["30.19"],"usestate":["30.19"],"中实现组件的复用逻辑的技术":["30.20"],"是一个函数":["30.20"],"接受一个组件作为参数":["30.20"],"一层层传递":["30.21"],"上下文提供了一种便捷的方式来在组件之间共享数据":["30.21"],"尤其对于跨多层级的组件共享数据非常有用":["30.21"],"引入的新特性":["30.22"],"用于在函数组件中添加状态":["30.22"],"副作用和其他":["30.22"],"用于初始化状态和绑定方法":["31.1"],"static":["31.1"],"getderivedstatefromprops":["31.1"],"在组件创建和更新阶段调用":["31.1"],"用于根据":["31.1"],"更新状态":["31.1"],"render":["31.1","32.3","32.10","32.11","152.8"],"我们可以初始化组件的状态":["31.3"],"state":["31.3","31.4","31.8","31.9","35.5"],"和绑定方法":["31.3"],"mycomponent":["31.3","31.8","31.13","32.7","32.8","32.9","32.10","32.15","34.4"],"作为参数":["31.4","31.10"],"并返回一个对象来更新":["31.4"],"或者返回":["31.4"],"null":["31.4","53.3","54.15"],"表示不需要更新":["31.4"],"方法中":["31.5"],"我们可以进行一些副作用操作":["31.6","31.11"],"比如发送网络请求":["31.6","31.11"],"订阅事件":["31.6","31.11"],"更新":["31.8"],"我们可以根据新的":["31.9"],"或":["31.9","38.2","53.3","54.3","113.5","120.9","121.11","121.21"],"判断是否需要重新渲染组件":["31.9"],"返回":["31.9"],"更新之前调用":["31.10"],"它接收":["31.10"],"prevprops":["31.10"],"prevstate":["31.10"],"操作":["31.11"],"等":["31.11","49.10"],"清除定时器":["31.13","68.2"],"释放资源等":["31.13"],"中用于向组件传递数据的一种机制":["32.1"],"它是":["32.1","58.0"],"properties":["32.1"],"父组件":["32.3","43.6"],"parentcomponent":["32.3","34.7"],"我们希望在未传递某个":["32.4"],"时":["32.4","32.5","53.9","53.10","77.2","84.4","95.1"],"组件能够使用一个默认值":["32.4"],"这时可以通过设置组件的":["32.4"],"可以使用解构赋值来简化代码":["32.5"],"可以接收各种类型的数据":["32.6"],"提供的一种机制":["32.14"],"用于对组件的":["32.14"],"进行类型检查":["32.14"],"在开发过程中":["32.14"],"可以帮助我们及时发现和修复传递错误类型的":["32.14"],"增加代码的健":["32.14"],"壮性和可维护性":["32.14"],"proptypes":["32.15"],"from":["32.15","33.11","35.2","35.3","35.4","36.2","36.3","36.5","41.4","41.6","41.17","110.10","110.12","146.1"],"prop":["32.15"],"types":["32.15","101.6"],"实现单页应用的导航":["33.0"],"路由是指在":["33.1"],"应用中实现页面之间导航的技术":["33.1"],"的基本概念":["33.2"],"router":["33.3","33.9","33.11","38.1","38.5"],"中的核心概念之一":["33.3"],"嵌套路由":["33.4"],"嵌套路由是指在一个页面组件中嵌套另一个页面组件":["33.4"],"路径中传递参数":["33.5"],"并将参数传递给页面组件进行处理":["33.5"],"路由链接":["33.6"],"路由链接是用于在页面中生成导航链接的组件":["33.6"],"除了使用路由链接进行页面导航外":["33.7"],"还可以通过编程式导航的方式实现页面切换":["33.7"],"首先需要在项目中安装":["33.8"],"一旦安装了":["33.9"],"每个页面都是一个独立的组件":["33.10"],"可以使用函数组件或类组件来定义":["33.10"],"home":["33.10","33.11","33.13","33.14","33.15","46.1","46.2","154.7"],"browserrouter":["33.11","33.13","33.14"],"在顶层组件中渲染":["33.12"],"route":["33.12","33.14"],"从而实现页面导航":["33.12"],"about":["33.13","33.14","33.15"],"contact":["33.15"],"userprofile":["33.15"],"是组件内部的一种特殊变量":["34.1"],"用于存储组件的可变数据":["34.1"],"每个":["34.1","72.1"],"通常在组件的构造函数中初始化":["34.3"],"可以通过":["34.3"],"属性来定义组件的":["34.3"],"setstate":["34.4","34.6","34.7"],"这样做的原因是为了确保组件在更新":["34.4"],"后能够重新渲染":["34.4"],"并显示更新后的数据":["34.4"],"后":["34.5"],"并不会立即更新":["34.5"],"的值":["34.5"],"而是会放入一个更新队列中":["34.5"],"等待":["34.5"],"合并更新后再进行重新渲染":["34.5"],"因此":["34.5","65.5"],"如果需要在":["34.5"],"无法检测到":["34.6"],"的变化":["34.6"],"并进行重新渲染":["34.6"],"为了正确地更新":["34.6"],"我们应该始终使用":["34.6"],"super":["34.7","35.5"],"count":["34.7","65.2"],"handleincrement":["34.7"],"并将它们渲染到用户界面上":["35.1"],"并根据每个元素生成一个新的元素":["35.2"],"下面是一个简单的示例":["35.2","36.2"],"演示了如何使用":["35.2","35.4"],"方法来渲染一个包含数字的列表":["35.2"],"下面是一个示例":["35.3","35.4"],"演示了如何根据数字的奇偶性来渲染不同样式的列表项":["35.3"],"listrendering":["35.3","35.5"],"方法来实现列表渲染":["35.4"],"并在子组件中实现列表渲染":["35.4"],"属性帮助":["35.6"],"正确地更新":["35.6"],"并提高列表渲染的性能":["35.6"],"fragment":["35.6"],"我们可以使用":["36.1"],"语句来实现条件渲染":["36.2"],"演示了如何根据条件来渲染不同的内容":["36.2"],"三元表达式是一种简洁的写法":["36.3"],"用于在一行代码中根据条件返回不同的值":["36.3"],"下面是一个使用三元表达式的示例":["36.3"],"conditionalrendering":["36.3"],"中是一种短路逻辑":["36.4"],"当第一个条件为真时":["36.4"],"会返回第二个条件":["36.4"],"否则":["36.4","48.20"],"返回第一个条件的值":["36.4"],"我们可以利用这个特性来实现条件渲染":["36.4"],"下面是一个使用逻辑与的示例":["36.4"],"es2020":["36.5"],"中的新特性":["36.5"],"用于简化条件判断":["36.5"],"下面是一个使用条件运算符的示例":["36.5"],"条件运算符等":["36.6"],"抽象逻辑":["36.6"],"如果条件渲染逻辑较复杂":["36.6"],"建议将其抽象成函数或组件":["36.6"],"以提高代码的可读性和复用性":["36.6"],"使用默认值":["36.6"],"脚本文件或使用":["37.3"],"mustache":["37.6"],"用于在模板中实现特定的行为":["37.7"],"bind":["37.7"],"将元素属性与":["37.7"],"else":["37.9","48.24","73.4"],"根据条件渲染元素":["37.9"],"根据条件显示或隐藏元素":["37.10"],"ul":["37.12"],"指令监听":["37.13"],"事件":["37.13","120.16"],"my":["37.16","41.29"],"的组件":["37.16"],"在实例创建完成后调用":["37.18"],"可以在这里进行数据初始化":["37.18"],"调用异步请求等操作":["37.18"],"但模板还未被编译":["37.18"],"渲染":["37.18"],"beforemount":["37.18","41.27","41.28"],"挂载前":["37.18"],"在模板编译":["37.18"],"渲染之前调用":["37.18"],"学习指南":["38.0"],"vue":["38.1","38.4","39.0","39.3","41.4","41.5","41.7","41.10","41.14","42.2","42.3","46.3","110.9","110.10","136.4","154.2"],"yarn":["38.2","105.7","154.4","154.11"],"应用关联":["38.3"],"定义路由表":["38.3"],"包含不同路径与对应组件的映射":["38.3"],"组件创建导航链接":["38.5"],"使用路由参数传递数据给组件":["38.6"],"在组件中定义嵌套的子路由":["38.7"],"路由守卫":["38.8"],"使用路由守卫来处理导航前后的逻辑":["38.8"],"动态路由":["38.9"],"使用动态路由来根据不同条件加载组件":["38.9"],"路由懒加载":["38.10"],"使用路由懒加载来优化页面加载性能":["38.10"],"更多配置":["38.12"],"但是不限于某个组件":["39.1"],"而是存储在":["39.1"],"的全局状态树中":["39.1"],"使得不同组件可以共享和访问这些数据":["39.1"],"getters":["39.1"],"store":["39.2","39.3"],"在应用的根目录":["39.3"],"通常是":["39.3"],"目录":["39.3"],"下创建一个名为":["39.3"],"的文件":["39.3","121.13","121.23"],"用于创建":["39.3"],"在该文件中":["39.3"],"需要引入":["39.3"],"并创建一个新的":["39.3"],"实例":["39.3","71.3","98.2"],"可以设置":["39.3"],"用于同步地修改状态":["39.4"],"它们是唯一允许直接修改状态的地方":["39.4"],"而且是一个纯函数":["39.4"],"不应该有副作用":["39.4"],"通常":["39.4"],"在组件中通过":["39.4"],"commit":["39.4","99.14"],"调用":["39.4","39.5","95.7"],"中的方法来修改状态":["39.4"],"中的方法":["39.5"],"继续上面的计数器应用":["39.5"],"假设我们需要在点击增加按钮后":["39.5"],"延迟":["39.5"],"秒再修改状态":["39.5"],"以下是使用":["39.5"],"的例子":["39.5"],"的示例":["39.6"],"todos":["39.6"],"text":["39.6","135.1","138.4"],"buy":["39.6"],"groceries":["39.6"],"done":["39.6"],"数据劫持":["40.1"],"observation":["40.1"],"当你创建一个":["40.1"],"实例时":["40.1"],"会遍历":["40.1"],"对象中的所有属性":["40.1"],"响应式系统的核心原理":["40.2"],"引入了":["40.2"],"对象作为响应式系统的基础":["40.2"],"可以用来监听对象的读取":["40.2"],"设置":["40.2","48.2"],"删除等操作":["40.2"],"以及数组的变化":["40.2"],"我们只需在":["41.0"],"中一个新的配置项":["41.1"],"值为一个函数":["41.1"],"只在setup函数内部访问":["41.2"],"函数需要加":["41.2"],"其用途创建独立的原始值":["41.2"],"函数接收一个普通对象":["41.2"],"返回一个响应式的数据对象":["41.2"],"ref":["41.5","41.6","41.7","41.12","41.17","41.18","41.19","41.20","45.3"],"但不会使其值也变成响应式的":["41.5"],"修改其属性是非响应式的这样是不会改变的":["41.5"],"shallowref":["41.6"],"适合去做防抖之类的":["41.7"],"这样是不允许":["41.8"],"会给我们报错":["41.8"],"接受一个对象":["41.9"],"不会改变视图":["41.10"],"都是一个":["41.12"],"主要是方便我们解构使用":["41.13"],"vue2":["41.15","41.16"],"中的":["41.15","41.16"],"作用是一样的":["41.16"],"watch":["41.17","41.18","41.20"],"效果一样":["41.19"],"同时":["41.21"],"的第一个参数":["41.22"],"effect函数":["41.22"],"当":["41.23"],"watcheffect":["41.23"],"可以作为一个调试器来使用":["41.24"],"flush":["41.24"],"到":["41.25","113.2"],"销毁的":["41.25"],"指令绑定到元素后调用":["41.27"],"directive":["41.28","41.29"],"created":["41.28"],"初始化":["41.28"],"args":["41.28","67.4","67.5","67.6","68.3","68.7"],"传递给指令的值":["41.29"],"不利于阅读":["41.31"],"容易使代码变得难以维护":["41.31"],"vue3":["41.31","42.1","110.2","110.8"],"hook函数":["41.31"],"相当于":["41.31"],"mixin":["41.31"],"不同在与":["41.31"],"hooks":["41.31"],"是函数":["41.31"],"还是":["42.1","53.5","53.6"],"组件通信方式很重要":["42.1"],"不管是项目还是面试都是经常用到的知识点":["42.1"],"比如":["42.1","101.5","110.12"],"defineprops":["42.2"],"获取父组件传递的数据":["42.2"],"且在组件内部不需要引入":["42.2"],"方法可以直接使用":["42.2"],"父组件给子组件传递数据":["42.2"],"框架中事件分为两种":["42.3"],"pre":["42.4","73.4"],"click":["42.4","77.11","138.4"],"handler":["42.4"],"我是祖国的老花骨朵":["42.4"],"当前代码级给":["42.4"],"xxx":["42.5"],"handler3":["42.5"],"子组件内部触发这个自定义事件":["42.5"],"中可以根据":["42.6"],"vm":["42.6"],"vc":["42.6","42.9"],"关系推出全局事件总线":["42.6"],"而":["42.7"],"实指利用":["42.7"],"modelvalue":["42.7"],"与自定义事件":["42.7"],"update":["42.7","116.7"],"方法获取组件的属性与事件":["42.8"],"包含":["42.8","118.5","120.6"],"原生":["42.8"],"事件或者自定义事件":["42.8"],"次函数功能类似于":["42.8"],"可能会想到它可以获取元素的":["42.9"],"或者获取子组件实例的":["42.9"],"既然可以在父组件内部通过":["42.9"],"获取子组件实例":["42.9"],"inject":["42.10"],"提供":["42.10"],"官网":["42.11"],"即为子组件":["42.12"],"在父组件内部使用的时候":["42.12"],"在双标签内部书写结构传递给子组件":["42.12"],"注意开发项目的时候默认插槽一般只有一个":["42.12"],"我是默认插槽填充的结构":["42.12"],"顾名思义":["42.12"],"此插槽带有名字在组件内部留多个指定名字的插槽":["42.12"],"下面是一个子组件内部":["42.12"],"模板中留两个插槽":["42.12"],"后面":["43.2"],"切记不能放到":["43.2"],"mount":["43.2"],"并且只能在该父组件中使用":["43.5"],"它的优点是使组件之间的依赖关系更加明确":["43.5"],"接受传过来的值":["43.6"],"传递非字符串类型需要加":["43.6"],"简写":["43.6"],"冒号":["43.6"],"msg":["43.9"],"在子组件":["43.10"],"动态绑定":["43.10"],"参数":["43.10"],"并且减少主包的体积":["43.12"],"else等":["43.13"],"来检查数据是否已加载并显示一些其它内容":["43.13"],"但是":["43.13"],"show等属性影响":["43.14"],"但data":["43.14"],"prop数据依旧能够共用的技术":["43.14"],"类似于":["43.14"],"作用和vue2一致":["43.15"],"只是生命周期名称有所更改":["43.15"],"初次进入时":["43.15"],"onmounted":["43.15"],"onactivated":["43.15"],"退出后触发":["43.15"],"deactivated":["43.15"],"再次进入":["43.15"],"我们都可以使用":["43.16"],"来接收":["43.16"],"提供的数据或方法":["43.16"],"emit":["43.17"],"组合而成的语法糖":["43.17"],"vue3中":["43.17"],"有以下改动":["43.17"],"变更":["43.17"],"cli创建":["44.1"],"install":["44.2","105.7","122.2","123.0","124.3","145.3"],"cli":["44.3"],"features":["44.4"],"check":["44.4"],"the":["44.4","99.15"],"needed":["44.4"],"your":["44.4","99.1"],"选择上":["44.4"],"typescript":["44.4","103.4","110.8"],"特别注意点空格是选择":["44.4"],"点回车是下一步":["44.4"],"冷服务":["44.5"],"默认的构建目标浏览器是能":["44.5"],"vite":["44.6"],"打包大小减少41":["45.2"],"api":["45.3","46.3","97.3","122.6"],"setup":["45.3"],"新特性":["46.0"],"child":["46.1","46.2","46.4"],"的选项":["46.3"],"list":["46.4"],"创建数组":["48.1"],"利用数组字面量创建数组":["48.1"],"数组的字面量是方括号":["48.1"],"用来访问数组元素的序号":["48.2"],"数组下标从":["48.2"],"开始":["48.2"],"数组可以通过索引来访问":["48.2"],"修改对应的数组元素":["48.2"],"我们可以通过数组名":["48.2"],"的形式来获取数组中的元素":["48.2"],"数组基本操作可以归纳为":["48.5"],"第四种则不会对原数组产生影响":["48.6"],"并将它们添加到数组末尾":["48.7"],"返回数组的最新长度":["48.7"],"然后返回新的数组长度":["48.8"],"插入的元素":["48.9"],"返回空数组":["48.9"],"colors":["48.10","48.14","48.15"],"red":["48.10","48.15","79.1","101.6","132.0"],"最后一项不影响原数组":["48.11"],"length":["48.12","48.13","69.2"],"值":["48.12","48.13","63.6","101.14"],"返回被删除的项":["48.12","48.13"],"返回包含删除元素的数组":["48.14"],"green":["48.15"],"blue":["48.15"],"yellow":["48.15"],"purple":["48.15"],"常用":["48.16"],"返回删除元素的数组":["48.17"],"对原数组产生影响":["48.17"],"返回元素坐标或者元素值":["48.18"],"true":["48.20","48.28","52.3","52.11","53.7","53.10","54.15","54.16","75.1","101.3","108.0","140.1","154.7"],"people":["48.21","101.13"],"matt":["48.21"],"数组有两个方法可以用来对元素重新排序":["48.22"],"常见的转换方法有":["48.25"],"返回包含所有项的字符串":["48.26"],"常用来迭代数组的方法":["48.27"],"则这个方法返回":["48.28","48.29"],"条件分支语句":["49.1"],"循环语句":["49.1"],"i":["49.1","49.5","49.12","52.12","69.2","88.10","110.6","136.3"],"条件表达式2":["49.2"],"tip":["49.2","50.8","66.2","77.12"],"执行流程":["49.2"],"表达式":["49.3"],"case":["49.3"],"表达式1":["49.3"],"break":["49.3"],"中一共有三种循环语句":["49.4"],"var":["49.5","52.8","54.3","54.14","55.4","56.2","65.1","65.2","65.3","74.1","74.2","74.3","74.4","82.6","83.6","92.2","95.3","95.11","120.7","135.2","138.3"],"包括数组和其他可枚举属性的对象":["49.9"],"不适用于迭代数组元素的值":["49.9"],"迭代的顺序不一定是按照属性在对象中的顺序":["49.9"],"可能会有不可预测的结果":["49.9"],"通常不推荐用于迭代数组":["49.9"],"因为它可能会迭代数组的原型链上的属性":["49.9"],"迭代的顺序是按照对象的迭代协议定义的顺序":["49.10"],"通常是按照对象中元素的顺序":["49.10"],"不会迭代对象的属性":["49.10"],"只迭代值":["49.10"],"循环虽然都是用于迭代对象的方法":["49.11"],"但它们有一些不同之处":["49.11"],"迭代对象的内容不同":["49.11"],"循环迭代对象的是键名":["49.11"],"会终止离他最近的循环":["49.12"],"里面":["50.0"],"必须小写":["50.2"],"是把一个或者多个功能通过函数的方式封装起来":["50.4"],"同样也需要传递相应的参数":["50.6"],"实参":["50.6"],"参数的作用":["50.6"],"在函数内部某些值不能固定":["50.6"],"我们可以通过参数在调用函数时传递不同的值进去":["50.6"],"多的参数定义为":["50.7"],"函数形参实参个数匹配":["50.7"],"getsum":["50.7"],"num1":["50.7","54.2"],"num2":["50.7"],"此时调用函数就可以得到函数体内return":["50.8"],"后面的值":["50.8"],"注意事项":["50.8"],"在使用":["50.8","73.9"],"语句时":["50.8"],"函数会停止执行":["50.8"],"语句之后的代码不被执行":["50.8"],"并返回指定的值":["50.8"],"只能返回一个值":["50.8"],"如果用逗号隔开多个值":["50.8"],"的区别":["50.9"],"结束当前的循环体":["50.9"],"声明":["50.11"],"通常用于在":["51.0"],"浏览器中编写交互式前端代码":["51.0"],"示例":["51.1","90.1","90.2","93.2"],"它需要被嵌入":["51.2"],"代码写在独立的以":["51.4"],"注释单行代码":["51.6"],"注释多行代码":["51.7"],"什么是对象":["52.2"],"简单说":["52.2"],"对象就是一组":["52.2"],"键值对":["52.2"],"的集合":["52.2"],"1e2":["52.3"],"1e":["52.3"],"0xff":["52.3"],"01":["52.3"],"引擎读到上面这行代码":["52.5"],"会发现可能有两种含义":["52.5"],"第一种可能是":["52.5"],"这是一个表达式":["52.5"],"表示一个包含":["52.5"],"属性的对象":["52.5"],"第二种可能是":["52.5"],"这是一个语句":["52.5"],"上面代码分别采用点运算符和方括号运算符":["52.7"],"读取属性":["52.7"],"请注意":["52.7"],"如果使用方括号运算符":["52.7"],"键名必须放在引号里面":["52.7"],"否则会被当作变量处理":["52.7"],"foo":["52.7","52.8"],"bar":["52.7"],"obj":["52.8","66.2","92.5","92.9","92.10","92.17","92.20","107.1"],"keys":["52.9"],"命令删除对象":["52.10"],"删除后":["52.10"],"再读取":["52.10"],"属性就会返回":["52.10"],"如果包含就返回":["52.11"],"否则返回":["52.11","53.9","53.10"],"它的左边是一个字符串":["52.11"],"表示属性名":["52.11"],"右边是一个对象":["52.11"],"键名":["52.12"],"键值":["52.12"],"例二":["52.13"],"document":["52.13","56.2","77.7","80.1","81.2","81.4","135.2","138.3","141.7","149.1","149.2"],"links":["52.13"],"href":["52.13"],"也被称为":["53.1"],"操作符":["53.1"],"减":["53.2"],"乘":["53.2"],"空赋值":["53.3"],"只有当变量的值为":["53.3"],"都会使原变量立刻增加":["53.5"],"不同的是":["53.5"],"和后自减":["53.6"],"无论是":["53.6"],"小于号":["53.7"],"precedence":["53.13"],"是不一样的":["53.13"],"优先级高的运算符先执行":["53.13"],"优先级低的运算符后执行":["53.13"],"基本类型主要为以下":["54.1"],"intnum":["54.2"],"10进制的55":["54.2"],"070":["54.2"],"8进制的56":["54.2"],"当使用":["54.3"],"声明了变量但没有初始化时":["54.3"],"标示":["54.4"],"逻辑上讲":["54.5"],"值表示一个空对象指针":["54.5"],"这也是给":["54.5"],"不可变的":["54.7"],"符号的用途是确保对象属性使用唯一标识符":["54.7"],"不会发生属性冲突的危险":["54.7"],"复杂类型统称为":["54.8"],"常用方式为对象字面量表示法":["54.9"],"但跟其他语言不同的是":["54.10"],"数组中每个槽位可以存储任意类型的数据":["54.10"],"也有属性和方法":["54.11"],"跟其他引用类型一样":["54.11"],"函数存在三种常见的表达方式":["54.11"],"函数声明":["54.11"],"还包括":["54.12"],"类型转换指将一种数据类型转换为其他类型":["54.13"],"tostring":["54.14"],"num":["54.14","101.12","104.2"],"布尔值":["54.15"],"其余是":["54.16"],"字符串":["54.16"],"空串":["54.16"],"基本数据类型和引用数据类型存储在内存中的位置不同":["54.17"],"obj2":["54.19","95.3"],"简单类型的值存放在栈中":["54.20"],"在栈中存放的是对应的值":["54.20"],"合法":["55.1"],"声明作用域":["55.1"],"一个函数内部定义一个变量":["55.1"],"在函数退出时被销毁":["55.1"],"test":["55.1"],"局部变量":["55.1"],"会被提升":["55.3"],"声明的变量则会":["55.4"],"引擎会自动将多余的声明在作用域顶部合并为一个声明":["55.5"],"循环逻辑":["55.6"],"之后则不会":["55.6"],"因为遇到":["55.6"],"就会形成作用域块":["55.6"],"但是他是常量":["55.7"],"声明之后不能修改":["55.7"],"尝试修改":["55.7"],"声明的变量会导致运行时错误":["55.7"],"tom":["55.8"],"getelementbyid":["56.1","135.2","138.3"],"获取具有指定":["56.1"],"的元素":["56.2"],"element":["56.2","78.2","79.1","80.1","80.2"],"back":["57.1"],"导航到上一个页面":["57.1","57.2"],"history":["57.2"],"以下是一些常见的":["58.0"],"window":["58.0","62.2","68.1","68.4","142.2","143.1","145.1"],"的顶级对象":["58.0"],"表示浏览器窗口或标签页":["58.0"],"protocol":["59.1"],"location":["59.2","111.0"],"useragent":["60.1"],"包含用户代理字符串":["60.1"],"navigator":["60.2"],"屏幕的宽度":["61.1"],"屏幕宽度":["61.2"],"screen":["61.2"],"像素":["61.2"],"获取屏幕的高度":["61.2"],"specs":["62.1"],"open":["62.2","63.4","63.6","71.5","119.1"],"and":["63.1"],"异步交互需要服务器逻辑进行配合":["63.2"],"需要完成以下步骤":["63.2"],"创建":["63.2","63.3","99.14","118.2","124.6"],"xmlhttprequest":["63.3"],"对象的":["63.4","63.5"],"方法与服务器建立连接":["63.4"],"xhr":["63.4","63.8"],"send":["63.5"],"将客户端页面的数据发送给服务端":["63.5"],"属性有五个状态":["63.6"],"如下显示":["63.6"],"描述":["63.6"],"unsent":["63.6"],"未打开":["63.6"],"方法还未被调用":["63.6"],"opened":["63.6"],"创建xmlhttprequest对象":["63.8"],"初始化参数的内容":["63.8"],"post":["63.9","118.2"],"datatype":["63.9"],"group":["64.1","152.3"],"closure":["65.0"],"它可以访问其外部函数中的变量和参数":["65.1"],"outerfunction":["65.1","74.2","74.4"],"counter":["65.2"],"increaseage":["65.3"],"这种方式可以避免全局命名冲突":["65.4"],"并提供了一种模块化的封装方式":["65.4"],"创建工厂函数":["65.4"],"可以创建工厂函数":["65.4"],"用于生成对象实例":["65.4"],"在使用闭包时要注意内存管理":["65.5"],"避免过度使用闭包导致内存泄漏":["65.5"],"对其中一个对象的修改会影响到另一个对象":["66.1"],"stringify":["66.2"],"deepcopy":["66.2"],"以下是一个简单的示例来说明":["67.1"],"函数柯里化的概念和用法":["67.1"],"可以将函数的执行延迟到后续的调用中":["67.2"],"这在需要等待特定条件满足或事件发生时非常有用":["67.2"],"函数组合":["67.2"],"可以轻松地将多个函数组合成一个新的函数":["67.2"],"curried":["67.4","67.5","67.6"],"includes":["67.5"],"curry":["67.6"],"func":["67.6","68.6"],"节流":["68.0"],"throttling":["68.0"],"和防抖":["68.0"],"debouncing":["68.0"],"则立即执行函数并设置定时器":["68.2"],"如果定时器存在":["68.2"],"则忽略该次函数调用":["68.2"],"当定时器触发后":["68.2"],"以便在下次函数调用时重新开始计时":["68.2"],"以下是一个简单的节流函数的实现示例":["68.2"],"oldtime":["68.3"],"date":["68.3","84.5"],"now":["68.3"],"newtime":["68.3"],"防抖的实现思路是设置一个定时器":["68.5"],"在函数被调用时先清除之前的定时器":["68.5"],"并设置一个新的定时器":["68.5"],"如果在指定的时间内没有新的函数调用发生":["68.5"],"wait":["68.6"],"immediate":["68.6"],"timeout":["68.6"],"timerid":["68.7"],"cleartimeout":["68.7"],"settimeout":["68.7"],"len":["69.2"],"unique":["69.3","69.4","69.6"],"filter":["69.5"],"flat":["70.1"],"res2":["70.2"],"flatten":["70.3"],"res5":["70.4"],"fn":["70.4"],"对象代表一个异步操作的最终完成或失败":["71.0"],"并返回一个值":["71.0"],"构造函数来创建":["71.1"],"它接收一个带有两个参数的回调函数":["71.1"],"回调函数包含两个参数":["71.1"],"resolve":["71.1"],"reject":["71.1"],"实例的":["71.2"],"then":["71.2","71.4","97.3"],"方法可以处理异步操作成功的结果":["71.2"],"方法中返回新的":["71.3"],"可以将多个异步操作连接起来":["71.3"],"实例都成功完成时才会成功":["71.4"],"并将所有":["71.4"],"实例的结果作为一个数组传递给":["71.4"],"promises":["71.4"],"promise1":["71.4"],"setrequestheader":["71.5"],"application":["71.5","141.7","142.2","143.1","145.1"],"onload":["71.5"],"status":["71.5"],"responsetext":["71.5"],"中每个对象的基础":["72.1"],"sayhello":["72.2"],"你可以通过":["72.3"],"proto":["72.3"],"属性来访问对象的原型对象":["72.3"],"eat":["72.4"],"我们已经看到了这种方式的示例":["72.6"],"animal":["72.6","89.1","89.3","102.2"],"方法是一种更简单的方式来创建一个对象并指定其原型":["72.7"],"它接受一个原型对象作为参数":["72.7"],"然后返回一个新对象":["72.7"],"它提供了一种更简单的方式来实现原型继承":["72.8"],"类可以使用":["72.8"],"关键字继承另一个类的属性和方法":["72.8"],"方法允许你在运行时更改对象的原型":["72.9"],"这个方法接受两个参数":["72.9"],"要更改原型的对象和新的原型对象":["72.9"],"中的原型继承与传统面向对象编程语言中的继承有一些重要区别":["72.10"],"动态性":["72.11"],"原型链":["72.12"],"对象与类":["72.13"],"有一些最佳实践可以帮助你编写更清晰":["72.14"],"避免直接修改内建对象的原型":["72.15"],"将方法添加到原型上":["72.16"],"注意原型链中的属性和方法覆盖":["72.17"],"reduce":["73.1","73.4"],"callbackfn":["73.1"],"initialvalue":["73.1"],"sum":["73.3"],"prev":["73.3"],"cur":["73.3","73.4"],"newarr":["73.4"],"in":["73.4","99.15","129.1"],"result":["73.8","97.3"],"subject":["73.8"],"math":["73.8","133.3"],"score":["73.8"],"并将结果返回为单个值的情况":["73.9"],"方法时":["73.9"],"作用域是指变量和函数在代码中可访问的范围":["74.0"],"globalvariable":["74.1","74.3"],"global":["74.1","74.3","74.4","99.1","100.3"],"outervariable":["74.2"],"如果找不到":["74.3"],"就会向上一级作用域继续查找":["74.3"],"直到找到该变量或达到全局作用域":["74.3"],"variable":["74.4"],"动态创建任意":["75.1"],"clonenode":["75.1"],"复制现有的":["75.1"],"传入参数":["75.1"],"会复制所有子节点":["75.1"],"appendchild":["75.1","149.1","149.2"],"也需要关注两个因素":["75.2"],"首先由父节点删除子节点":["75.2"],"其次是要删除哪个子节点":["75.2"],"removechild":["75.2"],"树中的任意节点都不是孤立存在的":["75.3"],"的子节点":["75.4"],"基础":["75.4"],"实际应用中非常灵活":["75.5"],"nextsibling":["75.5"],"获取后一个节点":["75.5"],"等文档结构的编程接口":["76.1"],"它将文档表示为一个树状结构":["76.1"],"每个节点都是文档中的一个元素":["76.1"],"主要分为元素节点":["76.3"],"属性节点":["76.3"],"文本节点等":["76.3"],"元素节点":["76.3"],"其实就是":["76.3"],"内置的专门用于":["76.4"],"的对象":["76.4"],"该对象包含了若干的属性和方法":["76.4"],"它是用来描述程序的行为或状态的":["77.1"],"一旦行为或状态发生改变":["77.1"],"等待事件发生":["77.2"],"触发":["77.2"],"便立即调用一个函数":["77.2"],"addeventlistener":["77.2"],"应该将其从元素上移除":["77.3"],"当用户双击鼠标左键时触发":["77.5"],"mousedown":["77.5"],"当用户按下鼠标按钮时触发":["77.5"],"此事件在按下任何鼠标按钮时都会触发":["77.5"],"包括左键":["77.5"],"中键和右键":["77.5"],"mouseup":["77.5"],"当用户释放鼠标按钮时触发":["77.5"],"mousemove":["77.5","77.11"],"当用户移动鼠标指针时触发":["77.5"],"queryselector":["77.6","77.7"],"input":["77.7"],"剪切还是使用其他输入方法":["77.8"],"只要文本框内容发生变化":["77.8"],"就会触发":["77.8"],"change":["77.8"],"目标元素等":["77.9"],"你可以在事件处理程序中使用这些信息来执行逻辑操作":["77.9"],"btn":["77.9"],"方法来停止事件冒泡":["77.10"],"body":["77.10","149.1","149.2"],"h3":["77.10"],"事件流":["77.10"],"mouseover":["77.11"],"mouseout":["77.11"],"使用事件委托的过程如下":["77.12"],"选择一个合适的父元素":["77.12"],"该元素包含你希望委托处理的子元素":["77.12"],"将事件监听器绑定到父元素上":["77.12"],"监听你希望处理的事件类型":["77.12"],"创建新的元素节点":["78.0"],"方法创建新元素":["78.1"],"attributename":["78.2"],"attributevalue":["78.2"],"parentelement":["78.3"],"newelement":["78.3"],"这将把":["78.3"],"backgroundcolor":["79.1","142.2","145.1","149.1","149.2"],"这里的":["79.1"],"classname":["79.2"],"移除类名":["79.2"],"remove":["79.2"],"根据元素的":["80.0"],"获取元素节点":["80.0"],"传入元素的":["80.1"],"或者":["80.2","105.7"],"是一种在客户端浏览器上存储数据的机制":["81.0"],"允许开发者在用户计算机中存储和检索有关网站的信息":["81.0"],"属性是一个字符串":["81.1"],"包含一个或多个以分号分隔的键值对":["81.1"],"属性来获取存储在浏览器中的所有":["81.2"],"的过期时间设置为过去的时间来删除":["81.3"],"返回的是一个字符串":["81.4"],"包含当前域名下的所有":["81.4"],"需要自行解析和处理字符串来获取特定":["81.4"],"方法将数据存储到":["82.1","83.1"],"getitem":["82.2","83.2"],"方法根据键从":["82.2","83.2"],"localstorage":["82.3","82.4","82.5"],"parse":["82.6","83.6"],"方法将其还原":["82.6","83.6"],"user":["82.6","83.6","99.1"],"sessionstorage":["83.3","83.4","83.5"],"表示星期六":["84.1"],"getfullyear":["84.1"],"获取四位数的年份":["84.1"],"返回值为一个年份":["84.1"],"gethours":["84.1"],"获取小时数":["84.1"],"getmilliseconds":["84.1"],"获取毫秒数":["84.1"],"关键词来定义":["84.2"],"以下代码定义了名为":["84.2"],"年":["84.3","110.6"],"月":["84.3"],"日":["84.3","84.4"],"00":["84.4"],"分":["84.4"],"供开发者使用":["85.0"],"这些对象提供了一些常用或者基本而必要的功能":["85.0"],"属性和方法":["85.0"],"基础对象":["85.1"],"是用于表示和操作数组的对象":["85.3"],"是用于表示和操作字符串的对象":["85.4"],"是用于表示和操作数字的对象":["85.5"],"是表示和操作布尔值的对象":["85.6"],"是用于表示日期和时间的对象":["85.7"],"是用于进行数学计算的对象":["85.8"],"它提供了一系列与正则表达式相关的方法":["85.9"],"如匹配":["85.9"],"替换等":["85.9"],"pi":["86.1","133.3","136.3"],"函数":["86.4","86.13"],"返回一个浮点":["86.4"],"伪随机数范围从":["86.4"],"返回的是一个数字四舍五入的整数":["86.7"],"返回基数":["86.10"],"base":["86.10","154.9"],"的指数":["86.10"],"不管正数还是负数":["86.14"],"直接去掉小数点及之后的部分":["86.14"],"约为":["87.1"],"parseint":["87.2"],"string":["87.2","102.1","102.6","102.8","102.10","109.2"],"radix":["87.2"],"将字符串转换为整数":["87.2"],"表示进制数":["87.2"],"默认为":["87.2","131.4"],"parsefloat":["87.2"],"将字符串转换为浮点数":["87.2"],"可以用来搜索":["88.1"],"替换和提取字符串中的特定部分":["88.1"],"将正则表达式模式包围起来":["88.3"],"后面可以跟上一些修饰符":["88.3"],"构造函数创建正则表达式":["88.4"],"匹配字符串的开头":["88.5"],"以下是常用的修饰符":["88.6"],"g":["88.6","88.10","105.7"],"z0":["88.7"],"匹配多个字母或数字字符":["88.7"],"search":["88.8"],"并返回第一个匹配的索引":["88.8"],"如果没有找到则返回":["88.8"],"replace":["88.8"],"使用新的字符串替换匹配正则表达式的结果":["88.8"],"并返回替换后的字符串":["88.8"],"使用编号访问捕获的子串":["88.9"],"str":["88.9","109.2"],"pattern":["88.9"],"match":["88.9"],"以下是常用的正则表达式标志":["88.10"],"全局匹配":["88.10"],"找到所有匹配项而不仅仅是第一个":["88.10"],"表单验证":["88.11"],"使用正则表达式验证用户输入的表单数据":["88.11"],"如邮箱":["88.11"],"电话号码":["88.11"],"可以通过原型链实现继承":["89.1"],"子类的原型对象指向父类的实例":["89.1"],"从而继承了父类的属性和方法":["89.1"],"父类":["89.1"],"并提供公有方法来访问和操作这些私有属性来实现":["89.2"],"私有属性":["89.2"],"由于其动态类型特性":["89.3"],"多态是天然支持的":["89.3"],"animalsound":["89.3"],"类是一种用于创建对象的模板或蓝图":["90.0"],"而构造函数是用于创建类的实例的特殊函数":["90.0"],"它们是面向对象编程的两种不同方式":["90.0"],"关键字来实例化对象":["90.1"],"构造函数内部使用":["90.1"],"关键字来引用新创建的对象":["90.1"],"并定义对象的属性和方法":["90.1"],"构造函数定义":["90.1"],"而对象则是类的实例":["90.2"],"类的方法在原型上定义":["90.2"],"因此实例共享相同的方法":["90.2"],"es6类定义":["90.2"],"面向对象是一种编程范式":["91.1"],"也称为函数成员":["91.2"],"类是对象的模板或蓝图":["91.2"],"它定义了对象将具有的属性和方法":["91.2"],"类是一种抽象的概念":["91.2"],"它描述了对象的共同特征":["91.2"],"创建对象":["92.2"],"男":["92.3"],"sayhi":["92.3"],"构造函数约定首字母大写":["92.4"],"函数内的属性和方法前面需要添加":["92.4"],"表示当前对象的属性和方法":["92.4"],"构造函数中不需要":["92.4"],"返回结果":["92.4"],"当我们创建对象的时候":["92.4"],"必须用":["92.4"],"propertiesobject":["92.5","92.7"],"创建一个新对象":["92.5"],"使用现有的对象作为新对象的原型":["92.5"],"entries":["92.5"],"返回一个给定对象自身可枚举属性的":["92.5"],"obj1":["92.6","95.3","95.11"],"sym":["92.13"],"myproto":["92.14"],"及以上版本中":["93.1"],"getprototypeof":["93.1"],"来访问原型":["93.1"],"它指向该对象的原型对象":["93.1"],"它是所有对象的根原型":["93.2"],"共享属性和方法":["93.3"],"原型允许多个对象共享相同的属性和方法":["93.3"],"create":["93.4","154.3"],"规范":["94.0"],"优化和可靠的代码":["94.0"],"并避免一些常见的错误":["94.0"],"严格模式对于旧版":["94.0"],"代码的兼容性考虑较少":["94.0"],"因此需要显式地启用它":["94.0"],"严格模式可以应用到整个脚本文件或单个函数中":["94.0"],"启用整个脚本文件的严格模式":["94.0"],"函数执行":["95.1"],"解析器在调用函数每次都会向函数内部传递进一个隐含的参数":["95.2"],"全局的name属性":["95.3"],"smyh":["95.3"],"sayname":["95.3"],"vae":["95.3"],"中的箭头函数并不使用上面的准则":["95.4"],"而是会继承外层函数调用的":["95.4"],"指向":["95.5","95.8","95.10","95.11"],"可以":["95.7"],"一个函数":["95.7"],"与此同时":["95.7","95.10"],"this的指向并没有被改变":["95.8"],"此时相当于":["95.8"],"改变":["95.8"],"它还可以改变这个函数内部的":["95.10"],"这一点":["95.10"],"nickname":["95.11"],"数字1":["95.12"],"数字2":["95.12"],"数字3":["95.12"],"可以获取":["95.12"],"多个数值中的最大值":["95.12"],"另外":["95.12"],"由于":["95.12"],"方法在传递实参时":["95.12"],"把":["95.14","122.14"],"call":["95.14"],"apply":["95.14"],"这三个方法做一下对比":["95.14"],"你会发现":["95.14"],"实际开发中":["95.14"],"是一个基于":["97.1"],"bash":["97.2","99.5","99.6","99.7","99.12","99.14","99.18","99.19","110.6","121.16","122.2"],"xxxx":["97.3"],"响应拦截":["97.4"],"请求调整":["97.4"],"用户标识":["97.4"],"网络错误处理":["97.4"],"授权错误处理":["97.4"],"error":["97.5","98.4"],"response":["97.5"],"发出请求后":["97.5"],"服务器用状态码进行响应":["97.5"],"这超出了2xx的范围":["97.5"],"实现一个简单的封装":["98.1"],"主要实现以下目的":["98.1"],"如果开启":["98.3"],"token":["98.3","98.4"],"认证":["98.3","122.13"],"serverconfig":["98.3"],"usetokenauthorization":["98.3"],"headers":["98.3","118.12"],"authorization":["98.3"],"比如判断":["98.4"],"是否过期等等":["98.4"],"代码块":["98.4"],"switch":["98.4"],"getaction":["98.5"],"parameter":["98.5"],"service":["98.5"],"zs":["98.6"],"password":["98.6","122.3"],"定义接口方法":["98.6"],"login":["98.6"],"params":["98.6"],"axios":["98.7"],"的再再再封装":["98.7"],"config":["99.1","100.3","110.7","121.17","154.6"],"git":["99.3","99.4","99.11","99.12","99.13","99.14","100.3"],"将当前目录及其子目录下所有变更添加到暂存区":["99.5"],"追踪":["99.7"],"比较指定文件工作区和暂存区的差异":["99.7"],"reflog":["99.8"],"查看详细日志信息":["99.8"],"branch":["99.10"],"新分支":["99.10"],"基于指定分支创建分支":["99.10"],"分支合并到当前分支":["99.14"],"且为":["99.14"],"use":["99.15","112.1","122.11"],"restore":["99.15"],"file":["99.15"],"to":["99.15","112.3"],"往最后一次":["99.16"],"追加记录":["99.16"],"克隆远程仓库到本地":["99.19"],"别名":["99.21"],"本地分支":["99.21"],"远程分支":["99.21"],"如果远程分支被省略":["99.21"],"git官网下载安装git客户端":["100.1"],"安装完成后":["100.2"],"pub":["100.4"],"ssh":["100.4"],"打开生成后的id":["100.5"],"本地拉取代码":["100.6"],"普通声明":["101.1"],"notanumber":["101.2"],"number":["101.2","101.13","102.1","102.6","102.8","103.2","103.5","104.2"],"可以直接使用布尔值":["101.3"],"b2":["101.3"],"一样可以操作数组元素":["101.4"],"有两种方式可以定义数组":["101.4"],"第一种":["101.4"],"如果一个方法需要返回多个值":["101.5"],"可以把这多个值作为元组返回":["101.5"],"而不需要创建额外的类来表示":["101.5"],"可以定义一对值分别为string和number类型的元组":["101.5"],"ts":["101.5","101.6","101.7","101.8","101.11","102.2","102.7","102.10","104.3","104.5","106.5","106.6","107.1","110.12"],"也可以是字符串":["101.6"],"数字枚举":["101.6"],"enum":["101.6","113.5"],"进行任何操作":["101.7"],"不需要检查类型":["101.7"],"voidfn":["101.8"],"定义null":["101.9"],"默认情况下":["101.9","118.12","128.2"],"返回never的函数必须存在无法达到的终点":["101.10"],"因为必定抛出异常":["101.10"],"所以":["101.10","122.13"],"的差异":["101.11"],"void类型只是没有返回值":["101.11"],"不能为字符串类型":["101.12"],"因为定义的联合类型只有数字和布尔值并没有字符串":["101.12"],"boolean":["101.12"],"interface":["101.13","104.5","106.2","106.6"],"程序员":["101.14"],"已经进行了必须的检查":["101.14"],"方式一":["101.14"],"这个概念":["102.0"],"构造方法":["102.1"],"类的继承":["102.2"],"run":["102.2"],"public":["102.3","102.8"],"private":["102.6","104.6"],"some":["102.6"],"any":["102.6","149.1","149.2"],"关键字将属性设置为只读的":["102.7"],"只读属性必须在声明时或构造函数里被初始化":["102.7"],"implements":["102.9"],"后面跟interface的名字多个用逗号隔开":["102.9"],"继承还是用extends":["102.9"],"personclass":["102.9"],"首先":["102.10"],"我们从一个没有使用存取器的例子开始":["102.10"],"firstname":["102.10"],"关键字声明的类叫做":["102.11"],"声明的方法叫做":["102.11"],"抽象方法":["102.11"],"指不能被实例化":["102.11"],"因为它里面包含一个或多个抽象方法":["102.11"],"函数参数":["103.0"],"你可以使用":["103.4"],"来访问所有传入的参数":["103.4"],"你可以把所有参数收集到一个变量里":["103.4"],"剩余参数会被当做个数不限的可选参数":["103.4"],"可以一个都没有":["103.4"],"定义函数实现":["103.5"],"接口或类的时候":["104.0"],"当我们使用这个函数的时候把参数的类型传进去就可以了":["104.3"],"也就是动态类型":["104.3"],"swap":["104.4"],"k":["104.4"],"keyvalue":["104.5"],"t":["104.5","104.6","104.7"],"clacarray":["104.6"],"没有泛型约束":["104.7"],"getlen":["104.7"],"arg":["104.7"],"超集":["105.2"],"简单的说就是在":["105.2"],"而ts":["105.3"],"属于静态编程语言":["105.3"],"尤其在大型项目的时候效果显著":["105.5"],"和一些插件库的兼容并不是特别完美":["105.6"],"w进行随时热更新watch":["105.9"],"node直接运行ts的node项目":["105.10"],"首先全局安装ts":["105.10"],"的核心原则之一是对值所具有的结构进行类型检查":["106.0"],"我们使用接口":["106.0"],"我的理解是使用interface来定义一种约束":["106.1"],"让数据的结构满足约束的格式":["106.1"],"定义方式如下":["106.1"],"可选属性的好处之一是可以对可能存在的属性进行预定义":["106.4"],"好处之二是可以捕获引用了不存在的属性时的错误":["106.4"],"可选属性的含义是该属性可以不存在":["106.4"],"在这个例子当中我们看到接口中并没有定义c但是并没有报错":["106.5"],"应为我们定义了":["106.5"],"这样写是会报错的":["106.6"],"应为a是只读的不允许重新赋值":["106.6"],"cb":["106.7"],"void":["106.7"],"就是我们常说的":["107.0"],"类型也不能赋给":["107.1"],"报错":["107.1"],"原始类型":["107.1"],"umd":["108.0"],"lib":["108.0"],"指定要包含在编译中的库文件":["108.0"],"allowjs":["108.0"],"允许编译":["108.0"],"文件":["108.0","124.3","126.2"],"checkjs":["108.0"],"报告":["108.0"],"文件中的错误":["108.0"],"preserve":["108.0"],"代码的生成":["108.0"],"native":["108.0"],"定义变量时赋值了":["109.1"],"推断为对应的类型":["109.1"],"n1":["109.1"],"abcd":["109.2"],"版本的后台管理系统":["110.2"],"一个项目要有统一的规范":["110.2"],"需要使用":["110.2"],"进行构建":["110.4"],"官方中文文档参考":["110.4"],"vitejs":["110.4","110.10"],"dev":["110.4","154.2"],"guide":["110.4"],"月创建的开源项目":["110.6"],"它的目标是提供一个插件化的":["110.6"],"代码检测工具":["110.6"],"首先安装":["110.6"],"pnpm":["110.6"],"d":["110.6","128.4"],"生成配置文件":["110.6"],"prettier":["110.7","110.8"],"plugin":["110.7","110.8"],"parseroptions":["110.8"],"ecmaversion":["110.8"],"sourcetype":["110.8"],"jsxpragma":["110.8"],"ecmafeatures":["110.8"],"继承已有的规则":["110.8"],"recommended":["110.8"],"essential":["110.8"],"plugins":["110.8","110.10"],"off":["110.8"],"loader":["110.9"],"因此我们再组件内可以使用":["110.9"],"需要加上":["110.9"],"接下来我们为项目添加一些全局的样式":["110.9"],"userconfigexport":["110.10"],"configenv":["110.10"],"vitemockserve":["110.10"],"command":["110.10"],"localenabled":["110.10"],"serve":["110.10"],"在根目录创建":["110.10"],"文件夹":["110.10"],"使用请求拦截器":["110.11"],"可以在请求拦截器中处理一些业务":["110.11"],"开始进度条":["110.11"],"请求头携带公共参数":["110.11"],"使用响应拦截器":["110.11"],"可以在响应拦截器中处理一些业务":["110.11"],"进度条结束":["110.11"],"简化服务器返回的数据":["110.11"],"处理":["110.11"],"http":["110.11","118.11","118.14"],"网络错误":["110.11"],"在根目录下创建":["110.11"],"utils":["110.11","110.12"],"request":["110.11","110.12","120.16","120.17"],"文件夹去统一管理项目的接口":["110.12"],"下面方式":["110.12"],"统一管理咱们项目用户相关的接口":["110.12"],"root":["111.0"],"users":["111.0","120.4"],"打开nginx":["111.1"],"conf文件":["111.1"],"删除一个数据库":["112.1"],"选择要使用的数据库":["112.1"],"show":["112.1"],"column1":["112.2"],"column2":["112.2"],"username":["112.3","122.3"],"hostname":["112.3"],"授予用户特定数据库或表的权限":["112.3"],"revoke":["112.3"],"无符号":["113.1"],"smallint":["113.1"],"较小的整数":["113.1"],"402823466e":["113.2"],"175494351e":["113.2"],"最大长度为":["113.3"],"dd":["113.4"],"time":["113.4"],"存储时间":["113.4"],"hh":["113.4"],"操作和控制访问数据的方法":["114.0"],"数据库的设计和使用旨在提供高效的数据存储":["114.0"],"快速的数据检索和安全的数据管理":["114.0"],"数据库通常由数据表":["114.0"],"因其易用性":["114.1"],"性能和可靠性而受到广泛欢迎":["114.1"],"以下是mysql的一些关键特点":["114.1"],"开源性":["114.1"],"mysql是开源软件":["114.1"],"的基本使用包括连接到":["116.0"],"客户端工具":["116.1"],"如命令行客户端或图形化客户端工具":["116.1"],"mysql":["116.2","122.1"],"选择数据库":["116.3"],"使用以下命令选择要在其中执行操作的数据库":["116.3"],"在所选的数据库中创建一个新的表":["116.4"],"定义表的列和数据类型":["116.4"],"sql":["116.4","116.5","116.6","116.7"],"insert":["116.5","122.3"],"into":["116.5","122.3"],"select":["116.6"],"语句从表中检索数据":["116.6"],"语句更新表中的数据":["116.7"],"做一个简单的爬虫":["117.0"],"初始化项目":["117.1","125.2"],"cheerio":["117.2"],"访问要爬取的网站":["117.3"],"爬取豆瓣网":["117.3"],"fs":["117.4","120.7","120.12"],"get":["117.4","118.2","118.4","121.17","122.5"],"movie":["117.4"],"douban":["117.4"],"com":["117.4","143.2"],"top250":["117.4"],"运行脚本":["117.5"],"p2372307693":["117.6"],"泰坦尼克号":["117.6"],"titanic":["117.6"],"img9":["117.6"],"p2889314814":["117.6"],"这个杀手不太冷":["117.6"],"léon":["117.6"],"p511118051":["117.6"],"千与千寻":["117.6"],"千と千尋の神隠し":["117.6"],"p2557573348":["117.6"],"基于":["118.0"],"node":["118.0","119.2","121.22","124.2","126.1"],"require":["118.2","118.6","120.7","120.14","122.11","122.14"],"服务器":["118.2"],"app":["118.2","118.3","122.5","122.11","143.1","145.1"],"监听客户端的":["118.2"],"请求":["118.2"],"存放静态文件的目录名不会出现在":["118.3"],"访问静态资源时":["118.3"],"会根据托管顺序查找文件":["118.3"],"可为静态资源访问路径添加前缀":["118.3"],"创建路由对象":["118.4"],"挂载具体路由":["118.4"],"可先调用中间件进行预处理":["118.5"],"中间件是一个函数":["118.5"],"express":["118.6"],"定义第一个全局中间件":["118.6"],"mw1":["118.7"],"req":["118.7","118.8","120.17"],"res":["118.7","118.8","120.17"],"next":["118.7","118.8"],"调用了第一个局部生效的中间件":["118.7"],"应用级别中间件是绑定到":["118.8"],"实例上":["118.8"],"路由级别中间件绑定到":["118.8"],"安装中间件":["118.10"],"跨域资源共享":["118.11"],"解决跨域":["118.11"],"是通过":["118.11"],"响应头决定浏览器是否阻止前端":["118.11"],"bruceblog":["118.12"],"io":["118.12"],"仅支持客户端向服务器发送如下的":["118.12"],"三者之一":["118.14"],"头部信息不超过以下几种字段":["118.14"],"无自定义头部字段":["118.14"],"之外的请求":["118.15"],"官网传送门":["119.0"],"cross":["119.1"],"platform":["119.1"],"事件循环":["119.2"],"单线程":["119.2"],"轻量和高效":["119.2"],"否则不会向下执行代码":["120.1"],"异步文件系统不会阻塞程序的执行":["120.1"],"而是在操作完成时":["120.1"],"通过回调函数将结果返回":["120.1"],"实际开发很少用同步方式":["120.1"],"因此只介绍异步方式":["120.1"],"打开模式":["120.1"],"配置选项":["120.3","120.6"],"若是字符串则指定编码格式":["120.3"],"encoding":["120.3","120.6"],"编码格式":["120.3"],"flag":["120.3"],"打开方式":["120.3"],"回调函数":["120.3"],"err":["120.3"],"错误信息":["120.3"],"rs":["120.4"],"createreadstream":["120.4"],"笔记":["120.4"],"mp3":["120.4"],"创建一个可写流":["120.4","120.7"],"ws":["120.4"],"createwritestream":["120.4"],"文件路径":["120.6"],"写入内容":["120.6"],"数组不能存储二进制文件":["120.8"],"是专门存储二进制数据的":["120.8"],"存储的是二进制数据":["120.8"],"显示时以":["120.8"],"如果提供的操作路径是以":["120.9"],"开头的相对路径时":["120.9"],"容易出现路径动态拼接错误的问题":["120.9"],"unlink":["120.10"],"unlinksync":["120.10"],"列出文件":["120.10"],"readdir":["120.10"],"readdirsync":["120.10"],"会抵消前面的路径":["120.12"],"可以获取路径中的最后一部分":["120.13"],"常通过该方法获取路径中的文件名":["120.13"],"server":["120.16"],"createserver":["120.16"],"为服务器实例绑定":["120.16"],"监听客户端的请求":["120.16"],"on":["120.16","120.17"],"设置默认的响应内容为":["120.17"],"模块化是指解决一个复杂问题时":["121.2"],"自顶向下逐层把系统划分为若干模块的过程":["121.2"],"提高代码的复用性":["121.3"],"中模块的分类":["121.5"],"中的模块作用域":["121.6"],"存储了和当前模块有关的信息":["121.7"],"在自定义模块中":["121.7"],"每个模块内部":["121.8"],"module":["121.8"],"即多次调用":["121.9"],"开头":["121.11"],"否则会作为内置模块或第三方模块加载":["121.11"],"尝试从":["121.12","121.22"],"modules":["121.12","121.22"],"文件夹中加载第三方模块":["121.12","121.22"],"如果没有找到对应的第三方模块":["121.12","121.22"],"则移动到再":["121.12"],"上一层父目录":["121.12"],"package":["121.13","121.18","121.23","124.0","124.3","124.5","125.4","126.2","154.2"],"并寻找":["121.13"],"不同于":["121.15"],"新建文件夹":["121.18"],"包名":["121.18"],"新建如下三个文件":["121.18"],"包管理配置文件":["121.18"],"index":["121.18","122.5"],"多次调用":["121.19"],"开头的路径标识符":["121.21"],"在加载自定义模块时":["121.21"],"如果没有指定":["121.21"],"nodejs":["121.22"],"会从当前模块的父目录开始":["121.22"],"则移动到再上一层父目录中":["121.22"],"在被加载的目录下查找一个叫做":["121.23"],"建立连接":["122.2"],"使用数组的形式为占位符指定具体的值":["122.3"],"额外请求页面的数据":["122.5"],"后端只负责提供":["122.6"],"接口":["122.6"],"前端使用":["122.6"],"主要功能是展示":["122.7"],"没有复杂交互":["122.7"],"服务端渲染推荐使用":["122.9"],"secret":["122.11"],"bruce":["122.11"],"的值为任意字符串":["122.11"],"resave":["122.11"],"前后端分离推荐使用":["122.12"],"当涉及到前端跨域请求后端接口的时候":["122.13"],"需要做很多额外的配置":["122.13"],"才能实现跨域":["122.13"],"当前端请求后端接口不存在跨域问题的时候":["122.13"],"推荐使用":["122.13"],"身份认证机制":["122.13"],"当前端需要跨域请求后端接口的时候":["122.13"],"字符串的安全性":["122.14"],"防止其在网络传输过程中被破解":["122.14"],"需定义用于加密和解密的":["122.14"],"生成":["122.14"],"字符串时":["122.14"],"使用密钥加密信息":["122.14"],"得到加密好的":["122.14"],"对象时":["122.14"],"使用密钥解密":["122.14"],"expressjwt":["122.14"],"安装依赖项":["123.0","126.2"],"添加依赖项":["123.0"],"pkg":["123.0"],"是一个用于管理和共享":["124.1"],"代码的工具":["124.1"],"是随同":["124.2"],"生成一个":["124.3"],"项目的核心文件":["124.4"],"其中包含了项目的配置信息":["124.4"],"依赖项":["124.4"],"你可以轻松地安装和管理项目的依赖项":["124.5"],"还可以帮助你开发和发布自己的包":["124.6"],"通过编写代码":["124.6"],"上":["125.0"],"账号":["125.1","125.5"],"编写代码":["125.3"],"确保在你的项目中包含以下文件":["125.4"],"使用终端登录到你的":["125.5"],"如果你的包需要更新或有新的版本":["125.6"],"你可以按照以下步骤进行更新和维护":["125.6"],"使用你的包":["125.7"],"其他开发者可以使用以下命令来安装和使用你的包":["125.7"],"请确保你已经安装了":["126.1"],"这将引导你提供有关项目的一些信息":["126.2"],"并生成一个":["126.2"],"在项目目录中":["126.2"],"html5":["127.1"],"的基础知识":["127.2"],"canvas":["127.3","127.4","127.5","131.3","138.3"],"使用直角坐标系":["127.3"],"原点坐标为":["127.3"],"可以绘制":["127.4"],"svg":["127.4","150.3","150.4","150.5","150.6","150.8"],"和其他类型的矢量图形":["127.4"],"提供了多种绘图元素":["127.5"],"包括路径和图形":["127.5"],"除了基本的绘图功能之外":["127.6"],"还可以创造交互式效果":["127.6"],"用来展示和操控数据":["127.6"],"非常适合处理像素级别的控制":["127.7"],"虽然在":["127.8"],"canvasrenderingcontext2d":["128.0"],"rotate":["128.0"],"方法用于图像旋转":["128.1"],"它接受一个弧度值作为参数":["128.1"],"表示顺时针旋转的度数":["128.1"],"轴方向的缩放因子":["128.2"],"一个单位就是一个像素":["128.2"],"缩放因子可以缩放单位":["128.2"],"比如缩放因子":["128.2"],"表示将大小缩小为原来的":["128.2"],"缩放因子":["128.2"],"方法用于平移图像":["128.3"],"它接受两个参数":["128.3"],"分别是":["128.3"],"e":["128.4","154.11"],"f":["128.4"],"水平缩放":["128.4"],"transform":["128.5"],"方法完全一致":["128.5"],"translate":["128.5"],"如果在":["129.0"],"之中将某个物体":["129.0"],"在目标图像中显示源图像":["129.1"],"只有目标图像内的源图像部分会显示":["129.1"],"目标图像是透明的":["129.1"],"out":["129.1"],"在目标图像之外显示源图像":["129.1"],"您的浏览器不支持":["130.1"],"描边已定义绘图":["130.2"],"路径":["130.2"],"fill":["130.2","133.3","150.9"],"填充当前绘图":["130.2"],"linecap":["131.1"],"指定线条末端的样式":["131.1"],"有三个可能的值":["131.1"],"butt":["131.1"],"末端为矩形":["131.1"],"round":["131.1"],"末端为圆形":["131.1"],"square":["131.1"],"末端为突出的矩形":["131.1"],"矩形宽度不变":["131.1"],"y0":["131.2"],"x1":["131.2"],"y1":["131.2"],"方法接受四个参数":["131.2"],"是起点的横坐标和纵坐标":["131.2"],"是终点的横坐标和纵坐标":["131.2"],"通过不同的坐标值":["131.2"],"可以生成从上至下":["131.2"],"repetition":["131.3"],"该方法接受两个参数":["131.3"],"第一个参数是图像数据":["131.3"],"它可以是":["131.3"],"img":["131.3"],"也可以是另一个":["131.3"],"或者一个表示图像的":["131.3"],"shadowcolor":["131.4"],"阴影的颜色":["131.4"],"black":["131.4"],"fillrect":["132.0"],"图像":["133.0"],"高度":["133.2"],"绘制笑脸":["133.3"],"beginpath":["133.3","136.3"],"lineto":["133.4","136.3"],"dwidth":["133.5"],"dheight":["133.5"],"sx":["133.5"],"默认值为":["133.6"],"10px":["133.6"],"sans":["133.6"],"serif":["133.6"],"textalign":["133.6"],"文本的对齐方式":["133.6"],"文本的方向":["133.6"],"inherit":["133.6"],"quadraticcurveto":["134.1"],"控制点x":["134.1"],"控制点y":["134.1"],"终点x":["134.1"],"终点y":["134.1"],"beziercurveto":["134.2"],"控制点1":["134.2"],"再来一次":["135.1"],"找到画布":["135.2"],"绘制小时的刻度":["136.3"],"moveto":["136.3"],"linewidth":["136.3"],"strokestyle":["136.3"],"gray":["136.3"],"stroke":["136.3","150.9"],"closepath":["136.3"],"nullbtn":["138.3"],"清空画布":["138.3"],"c1":["138.3"],"当前浏览器不支持canvas":["138.3"],"请下载最新的浏览器":["138.3"],"获取canvas画布和绘制的上下文对象":["138.3"],"getcontext":["138.3"],"2d":["138.3"],"获取输入框和按钮":["138.3"],"boldbtn":["138.4"],"粗线条":["138.4"],"thinbtn":["138.4"],"interactive":["140.1"],"精灵派加点击事件":["140.1"],"pixi":["140.2","141.7","145.2","146.1","147.1","147.2","147.3","147.4","147.5","149.0"],"graphics":["140.2","147.1","147.2","147.3","147.4","147.5","150.1"],"beginfill":["140.2","147.2","147.3","147.4"],"官方网站":["141.0"],"webgl":["141.1"],"快速高效":["141.3"],"pixijs":["141.3","141.5"],"简单易用":["141.4"],"丰富的功能":["141.5"],"跨平台支持":["141.6"],"innerwidth":["142.2","143.1","145.1"],"innerheight":["142.2","145.1","149.1","149.2"],"0x1099bb":["142.2","149.1","149.2"],"resolution":["142.2","149.1","149.2"],"pic":["143.2"],"rmb":["143.2"],"bdstatic":["143.2"],"05b0ea405c9e690ab51627853a13de56":["143.2"],"jpeg":["143.2"],"设置模糊滤镜的模糊程度":["145.2"],"创建轮廓滤镜":["145.3"],"创建一个纹理":["146.2"],"anchor":["146.3"],"实现动画":["146.4"],"0x66ccff":["147.3"],"0x660000":["147.4"],"linestyle":["147.5"],"devicepixelratio":["149.1","149.2"],"像素比":["149.1","149.2"],"将应用画布添加到dom中":["149.1","149.2"],"view":["149.1","149.2"],"添加资源":["149.1"],"添加场景1的资源":["149.2"],"assets":["149.2"],"addbundle":["149.2"],"scene1":["149.2"],"pic1":["149.2"],"vector":["150.1"],"的缩写":["150.1"],"意为可缩放矢量图形":["150.1"],"不设置样式属性":["150.3"],"style":["150.3"],"不设置样式属性style是看不出效果的":["150.7"],"并且polygon默认为填充需要把fill属性设置为none":["150.7"],"points":["150.8"],"opacity":["150.9"],"场景":["151.0"],"创建各种":["151.0"],"效果":["151.0"],"包括动画":["151.0"],"模拟":["151.0"],"游戏和虚拟现实等":["151.0"],"提供了许多功能和工具":["151.0"],"使得构建复杂的":["151.0"],"场景变得更加简单和高效":["151.0"],"以下是":["151.0"],"的一些主要特性和组成部分":["151.0"],"渲染器":["151.0"],"renderer":["151.0"],"如果后期需要控制器带有阻尼效果":["152.8"],"visual":["152.9","152.12","153.5"],"threejs":["152.9","152.12","153.5"],"components":["152.9","152.12"],"y轴方向放大2倍":["153.1"],"z轴方向不变":["153.1"],"cube":["153.2","153.3"],"例如围绕x轴旋转90度":["153.3"],"rotation":["153.3"],"开始搭建个人网站":["154.0"],"gitbub":["154.1"],"上新建项目":["154.1"],"添加":["154.2"],"script":["154.2"],"vitepress":["154.3","154.6"],"文件夹和":["154.6"],"写下如下内容":["154.7"],"更多配置请查看":["154.7"],"md":["154.7"],"layout":["154.7"],"选项卡标题":["154.7"],"titletemplate":["154.7"],"选项卡描述":["154.7"],"editlink":["154.7"],"配置网站":["154.8"],"defineconfig":["154.9"],"docs":["154.9"],"和github项目名称保持一致":["154.9"],"标题":["154.9"],"侧边栏":["154.10"],"sidebar":["154.10"],"articles":["154.10"],"other":["154.10"],"bin":["154.11"],"env":["154.11"],"确保脚本抛出遇到的错误":["154.11"],"生成静态文件":["154.11"],"build":["154.11"],"进入生成的文件夹":["154.11"],"cd":["154.11"]},{"0":["13.13","14.12","18.23","18.24","39.5","45.1","48.24","70.4","86.4","88.9","110.8","113.2","120.8","128.5","131.2","135.2","147.3","147.5","150.7"],"1":["9.13","11.12","11.19","13.12","13.13","13.14","13.22","14.2","14.9","15.4","18.23","18.24","34.7","41.24","48.15","48.23","48.29","48.30","49.12","50.6","50.7","50.8","52.7","52.11","53.3","67.1","69.2","70.0","73.4","86.4","92.3","92.8","101.6","110.10","125.6","130.1","131.2","142.2","143.1","145.1","153.2"],"2":["9.13","9.16","13.14","13.17","13.22","14.9","14.10","15.4","21.3","35.5","41.29","48.23","48.28","48.29","48.30","48.31","49.5","52.7","53.3","53.12","55.1","58.0","63.6","69.1","70.0","73.6","92.6","92.8","93.3","95.3","99.14","99.18","101.6"],"3":["9.14","9.16","10.18","11.4","14.3","14.10","15.3","15.5","17.10","35.5","39.6","48.23","48.29","48.30","48.31","53.3","54.15","63.6","65.4","69.1","73.6","73.9","77.12","99.7","101.6","111.1","118.8","122.11","122.14","128.2","150.1"],"4":["10.12","14.10","14.16","15.3","15.5","35.5","36.6","44.3","48.31","53.2","53.13","77.12","99.8","118.8"],"5":["10.6","10.12","14.16","15.3","15.5","35.5","48.31","48.32","49.6","53.2","53.13","73.6","87.1","92.15","110.7","145.3"],"6":["6.1","6.4","53.13","54.1","73.3","73.7","87.2","90.0","147.5"],"7":["7.2","10.10","73.7","87.2"],"8":["7.2","18.22","25.1","29.20","29.23","53.2"],"9":["7.2","118.12","147.3"],"10":["7.2","15.6","49.5","53.2","73.3","73.8","101.5","109.1","128.2","145.2","150.9"],"11":["84.1","110.7"],"12":["11.16"],"16":["29.20"],"17":["69.0"],"18":["55.7"],"20":["73.8","118.2","150.7"],"25":["8.22","12.5","15.10","82.6","83.6"],"27":["48.21"],"28":["95.11"],"30":["8.16","12.2","15.8","15.9","32.3","55.7"],"31":["81.1"],"35":["149.2"],"37":["86.14"],"42":["9.8","86.14"],"45":["128.1"],"50":["20.6","150.8"],"59":["84.1"],"60":["75.4","136.3"],"65":["113.1"],"84":["86.14"],"100":["128.5","133.3"],"123":["20.1","54.15","101.2","101.12"],"150":["133.4","134.1"],"180":["136.3"],"200":["122.14","133.4"],"255":["52.3"],"300":["140.2","150.8"],"302":["98.4"],"321":["101.2"],"350":["133.2"],"370":["150.5"],"400":["98.4","150.4"],"401":["98.4"],"535":["113.1"],"767":["113.1"],"999":["84.1"],"2015":["5.0","6.4"],"2100":["84.5"],"2224":["149.2"],"4870":["110.10"],"12087":["149.2"],"23739":["149.2"],"55520":["122.3"],"1415926":["54.15"],"微信":["0.0"],"ecmascript":["5.0","84.4","90.0"],"构造函数":["5.1","42.6"],"用于创建对象时进行初始化":["5.1"],"constructor":["5.1","5.3","31.4","31.8","34.3","34.4","35.2","35.3","35.4","36.2","36.3","36.4","36.5","72.8","102.11"],"name":["5.1","10.17","12.5","18.22","30.18","32.3","32.11","41.7","42.12","46.1","46.3","46.4","54.19","55.4","72.8","76.2","90.1","92.10","92.11","92.12","92.16","92.19","92.20","100.3","102.7","102.11","106.2","116.5","116.7","118.2","121.18","122.5","154.7"],"person1":["5.2"],"person":["5.2","5.3","5.4","8.9","8.13","10.17","32.11","72.3","90.1","92.2","102.7","102.11","106.6"],"john":["5.2","10.17","15.9","32.3","54.4","81.1","92.11","92.12","92.16","92.19","92.20"],"student":["5.3"],"extends":["5.4","31.4","31.8","31.11","32.5","34.3","34.4","34.5","35.2","35.3","35.4","36.2","36.3","36.4","36.5"],"重写父类的方法":["5.4"],"add":["5.5","9.4","9.7","9.8","105.7","141.7","149.1","154.1","154.11"],"a":["5.5","10.12","13.13","15.2","15.4","26.14","27.4","39.6","42.12","54.15","95.8","95.11","101.1","104.3","120.12","154.11"],"b":["5.5","9.14","9.16","10.12","15.2","42.12","92.6","92.8","95.8","99.14","102.10","104.2","104.3","104.4","106.3","106.6","121.23"],"return":["5.5","5.6","10.3","10.18","13.1","30.15","30.20","32.3","32.7","32.8","32.9","32.10","32.15","33.10","33.11","33.13","33.14","33.15","34.7","39.6","65.2","65.3","70.3","71.3","73.4","89.2","101.8","102.10","104.7"],"value":["5.6","13.20","14.14","25.2","30.19","35.5","71.3","101.7","104.5"],"manufacturers":["6.2"],"association":["6.2"],"制定和维护的脚本语言标准":["6.2"],"它是":["6.2","124.1"],"javascript":["6.2","8.28","25.4","30.7","33.7","36.1","38.9","38.10","39.3","39.4","52.9","64.1","71.1","71.2","72.7","72.9","72.11","72.12","73.0","76.1","77.0","79.0","81.2","85.2","127.1"],"的标准化规范":["6.3"],"只提供了最基本的语法":["6.3"],"如":["6.3","6.4","36.1","50.9","88.3"],"怎样定义变量和函数":["6.3"],"js":["6.3","8.7","8.8","9.5","9.6","10.20","11.7","11.12","11.14","11.18","11.19","14.1","14.11","14.15","29.24","33.12","38.1","39.4","39.5","41.31","44.4","48.1","48.2","48.12","48.13","48.20","49.9","50.6","53.13","54.3","54.6","54.9","54.11","55.7","63.5","68.2","84.3","86.1","86.7","86.10","86.13","92.9","92.17","110.6","118.0","118.11","121.18","128.2","133.6"],"实现了":["6.3"],"数据更方便":["6.4"],"引入了":["6.4"],"object":["6.4","54.5","54.8","66.1","72.18","95.3"],"defineproperty":["6.4"],"允许更灵活地定义对象属性":["6.4"],"提供了":["6.4"],"array":["6.4","10.12","14.8","48.8","103.4","104.2"],"方法":["6.4","31.10","34.6","42.8","52.9","86.6","86.8","86.9","86.11","95.3"],"foreach":["6.4","7.2"],"map":["6.4","7.4","108.0"],"reduce":["6.4"],"等":["6.4","31.6","39.3","77.11"],"方便数组处理":["6.4"],"改进了":["6.4"],"function":["6.4","10.10","10.17","13.1","30.20","30.21","50.6","68.2","72.9","74.1","74.3","77.6","92.3","93.2","95.11","101.10","101.11","110.10","120.4","120.16"],"bind":["6.4"],"es6":["6.4","7.1","10.10","10.13","13.20","90.0"],"es2015":["6.4"],"中键值对的数量":["7.2"],"keys":["7.2"],"返回一个包含":["7.2"],"中所有键的迭代器":["7.2"],"values":["7.2","9.9","48.24"],"中所有值的迭代器":["7.2"],"entries":["7.2"],"中所有键值对的迭代器":["7.2"],"callbackfn":["7.2"],"thisarg":["7.2"],"遍历":["7.2"],"键值对数组转换":["7.4"],"对象":["7.4","49.9","52.3","52.10","63.2","63.3","122.11","131.2","131.3"],"value1":["7.5"],"key2":["7.5"],"value2":["7.5"],"second":["7.6"],"uno":["7.6"],"然而":["8.1"],"在处理复杂的项目和大规模的代码库时":["8.1"],"传统的":["8.1","119.2"],"函数和类等都在全局作用域下定义":["8.2"],"这样容易导致命名冲突和代码复杂度的增加":["8.2"],"尤其在大型项目中":["8.2"],"不会污染全局命名空间":["8.3"],"使得代码的组织和维护变得更加清晰和简单":["8.4"],"当多个模块需要相同的功能时":["8.5"],"中":["8.6","29.15","29.16","30.16","32.0","32.12","32.13","34.0","35.1","37.18","51.2","76.1","79.0","82.1","83.1","88.2","121.12"],"通过使用":["8.6"],"关键字导出一个变量":["8.7"],"module1":["8.8","8.14"],"class":["8.9","8.19","16.9","18.25","31.4","31.6","31.10","31.11","32.4","34.3","34.5","35.2","35.4","36.2","36.4","36.5","41.30","43.6","77.10","102.11"],"关键字":["8.10","10.18","92.4"],"main":["8.11","8.12","8.21","29.24","121.13","121.23"],"from":["8.13","8.14","14.6","33.10","36.4","38.3","39.3","41.8","41.18","41.19","41.20","43.2","98.2","98.6","110.11","112.2","112.3","152.6"],"console":["8.14","8.17","8.18","10.3","10.10","10.16","10.17","11.8","13.4","13.11","13.18","13.21","14.12","48.2","50.3","50.7","51.1","54.14","54.19","55.1","55.4","55.8","65.1","65.2","67.1","72.2","72.6","74.1","74.4","77.6","88.9","89.1","89.3","90.2","93.2","95.11","102.2","106.7","117.4","118.6","120.4","140.1"],"用于导出模块中的主要功能或对象":["8.15"],"export":["8.16","8.22"],"default":["8.16","8.19","46.4"],"sayhello":["8.17","8.18","10.17","89.1","90.2","93.2"],"log":["8.17","8.18","10.3","10.10","10.16","10.17","11.4","11.8","11.13","13.3","13.4","13.12","13.18","13.21","14.12","48.2","50.3","50.7","53.11","54.19","55.1","55.4","55.8","65.2","67.1","72.2","72.6","74.1","88.9","89.1","89.3","90.2","93.2","97.3","97.5","102.2","117.4","120.4"],"hello":["8.18","10.16","10.17","11.6","11.9","12.2","52.2","52.8","65.1","72.2","89.1","92.14","93.2","101.5"],"alice":["8.19","12.4","15.10"],"关键字可以在导入和导出时重命名变量名":["8.20"],"myname":["8.21"],"tom":["8.21"],"condition":["8.23"],"true":["8.23","31.9","39.6","49.2","69.0","85.6","88.8","107.1","122.11","142.2"],"if":["8.23","49.12","68.3","68.6","103.5"],"模块化时":["8.24"],"为后缀":["8.25"],"use":["8.27","13.9","13.21","39.3","94.0","118.3"],"灵活的":["8.28"],"代码组织与交互方式":["8.28"],"它允许开发者将代码分割成多个模块":["8.28"],"你可以按照插入的顺序迭代它的元素":["9.1"],"const":["9.3","9.5","9.6","10.17","11.14","12.5","30.17","33.10","33.11","33.13","33.14","38.7","38.10","39.3","39.4","39.5","49.10","69.5","70.1","71.1","72.2","72.3","72.7","72.9","73.7","78.1","92.7","103.4","110.8","120.3","120.6","120.13","122.2","122.5","145.3","146.1","146.2","152.7"],"s":["9.3","9.5","9.10"],"new":["9.3","9.4","9.5","9.6","9.7","9.8","9.10","14.5","15.11","39.3","39.4","39.5","48.8","69.6","84.3","145.3","146.1"],"每个值的键和值相等":["9.6"],"set1":["9.6"],"用":["9.12"],"操作符":["9.12","55.1"],"将":["9.12"],"set":["9.13","14.4","102.9","113.5","116.7","153.2"],"intersect":["9.15"],"如果没传参":["10.2"],"作为参数":["10.4"],"变量":["10.5","49.9","49.10"],"和":["10.5","17.5","18.3","18.8","25.4","40.1","41.29","45.3","52.4","53.5","63.1","71.0","77.2","88.10","93.4","95.12","103.0","113.2"],"才会通过解构赋值生成":["10.5"],"如果函数":["10.5"],"调用时没提供参数":["10.5"],"就不会生成":["10.5"],"从而报错":["10.5"],"通过提供函数参数的默认值":["10.5"],"就可以避免这种情况":["10.5"],"报错":["10.6","13.6","52.3"],"例二":["10.6"],"引入默认值":["10.7"],"其实是解构赋值原理":["10.7"],"也可以叫剩余参数":["10.9"],"其包含函数的参数和其它属性":["10.10"],"以":["10.10"],"变量来指代":["10.10"],"下面我们看个实例":["10.10"],"fn":["10.10","50.11"],"imooc":["10.10"],"在控制台中打印出上面的代码结果":["10.10"],"如下图所示":["10.10"],"在定义函数的时候没有给定参数":["10.10"],"但是通过":["10.10"],"对象可以拿到传入的参数":["10.10"],"可以看到":["10.10"],"中包含了函数传递的参数":["10.10"],"等属性":["10.10"],"args":["10.11","68.6"],"使用剩余参数替代":["10.11"],"剩余参数不一定非要作为函数参数使用":["10.12"],"与数组解构赋值结合":["10.12"],"others":["10.12"],"对象引入了为什么":["10.13"],"functions":["10.14"],"是一种更简洁和灵活的函数定义方式":["10.14"],"result":["10.15","11.3"],"箭头函数通过箭头":["10.15"],"来定义函数":["10.15"],"参数列表在括号内":["10.15"],"my":["10.17","12.2","72.2","154.3"],"避免在对象方法中使用箭头函数":["10.18"],"foo":["10.19","11.8","11.13","52.2"],"bar":["10.19","52.2","52.8"],"上面代码中":["10.19","52.3","52.4","52.7","52.8"],"如果在":["10.19"],"接受":["10.20"],"代码块抛出的错误对象":["10.20"],"删":["11.1","48.5"],"再进行操作":["11.2"],"lo":["11.4"],"常见的有":["11.5"],"trim":["11.5"],"let":["11.6","11.7","11.11","11.18","14.13","14.14","41.17","41.18","41.20","48.2","48.7","48.12","48.13","48.20","48.24","48.28","49.8","50.11","54.7","54.15","55.5","68.2","69.3","69.4","70.4","98.2","101.4","101.7","101.14","103.1","110.8","110.11","117.4","120.17"],"stringvalue":["11.6"],"world":["11.9","51.1","52.8"],"message":["11.11","12.2","41.4","41.17","122.14"],"startswith":["11.13"],"即倒数的位置":["11.14"],"str":["11.16","54.14"],"字符串设计了几个方法":["11.17"],"text":["11.18","11.20","12.3","26.11","154.7","154.10"],"cat":["11.18","11.20"],"否则返回":["11.19"],"bat":["11.20"],"template":["12.1","18.3","18.18","18.20","38.5","41.2","41.5","41.13","42.9","43.6","43.9","43.16"],"strings":["12.1"],"line":["12.3"],"it":["12.3"],"spans":["12.3"],"across":["12.3"],"greeting":["12.4","92.7","92.14"],"包含模板字符串中插入的变量部分":["12.5"],"bob":["12.5"],"age":["12.5","15.10","32.3","48.21","55.7","90.1","90.2","95.11","118.2","122.5"],"下面是另一个例子":["13.1"],"f":["13.1"],"x":["13.1","29.23","127.3","130.2","131.3","146.3","147.3","150.4","153.3"],"y":["13.1","13.17","15.6","103.2","103.3","127.3","128.3","130.2","134.2"],"womam":["13.4"],"下划线以及":["13.5"],"构成":["13.5"],"并且数字还不能打头的时候可以使用点语法":["13.5"],"引用了原型对象":["13.6"],"的":["13.6","16.13","30.10","35.6","41.12","43.14","68.1","68.4","84.2","97.1"],"属性":["13.6","19.1","76.1","102.8","121.13"],"注意":["13.6","52.10"],"关键字表示原型对象时":["13.6"],"只能用在对象的方法之中":["13.6"],"用在其他地方都会报错":["13.6"],"color":["13.8","13.15","13.21","16.5","79.1"],"红色":["13.8","13.21"],"shape":["13.8","13.15","13.21"],"球形":["13.8"],"黑色":["13.9","13.15","13.21"],"圆柱形":["13.9","13.15","13.21"],"写字":["13.9","13.21"],"l":["13.13"],"在所有环境中":["13.20"],"只要两个值是一样的":["13.20"],"它们就应该相等":["13.20"],"提出":["13.20"],"same":["13.20"],"equality":["13.20"],"同值相等":["13.20"],"目标对象":["13.21"],"源对象1":["13.21"],"源对象2":["13.21"],"apple":["13.21"],"圆形":["13.21"],"taste":["13.21"],"甜":["13.21"],"pen":["13.21"],"后面的覆盖前面的":["13.21"],"最终返回的不是新的":["13.21"],"而是修改了前面的":["13.21"],"返回值数组":["13.22"],"返回键值二维数组":["13.22"],"与数组类似方法的区别":["13.22"],"length":["14.3","67.4","67.5","67.6","104.7"],"必须有length属性":["14.3"],"没有则返回空数组":["14.3"],"arr":["14.8","14.11","48.2","69.5","70.2","70.3"],"of":["14.8","14.9","44.4"],"参数1":["14.10"],"默认为结尾":["14.11"],"var":["14.11","52.2","52.9","52.11","55.3","67.1","84.3","95.8","110.8","130.1"],"key":["14.13","82.4","83.4","104.5"],"方法用于查找键名":["14.15"],"遍历函数可接受3个参数":["14.17"],"当前元素":["14.17"],"当前元素索引":["14.17"],"是一种从数组或对象中提取值并赋给变量的语法":["15.0"],"使得在处理数据时更加方便和简洁":["15.0"],"当使用解构赋值时":["15.0"],"c":["15.2","92.8","121.12","121.22"],"d":["15.2","88.7","99.12","108.0","150.9"],"country":["15.8","15.11"],"usa":["15.8","15.11"],"doe":["15.9"],"yearsold":["15.9"],"city":["15.11"],"york":["15.11"],"css":["16.1","18.7","20.8","21.2","79.1"],"可快速为同类型标签统一设置样式":["16.2"],"缺点":["16.2"],"container":["16.3","16.9","18.7","18.18","18.19","18.25","20.3","20.8"],"属性选择元素":["16.4"],"good类的p元素":["16.5"],"yellow":["16.5"],"类名包含good和beauty的元素":["16.5"],"语法":["16.6"],"选择器1":["16.6"],"选择器2":["16.6"],"ul":["16.7","26.14","32.10","33.14","33.15"],"div":["16.8","16.9","18.25","32.11","33.11","33.13","33.14","33.15","34.7","37.9","37.10","38.5","41.2","41.5","41.10","41.13","41.14","42.9","43.6","76.3","77.10","136.4","142.1","144.1","148.2"],"被选中":["16.9"],"结构选择元素":["16.10"],"visited":["16.11"],"链接访问后的样式":["16.11"],"的第一个":["16.12"],"的最后一个":["16.12"],"val":["16.13"],"属性且属性值等于":["16.13"],"在元素内部后面插入内容":["16.14"],"伪元素字体图标":["16.14"],"p":["16.14","27.3","32.9","32.11","32.15","34.7","43.11","52.11","75.1"],"e91e":["16.14"],"position":["16.14"],"absolute":["16.14","20.6"],"right":["16.14"],"20px":["16.14"],"top":["16.14","20.6"],"10px":["16.14"],"font":["16.14"],"也称为弹性盒子布局":["17.0"],"是一种用于创建灵活":["17.0"],"自适应的网页布局的":["17.0"],"容器的父元素上设置":["17.1"],"display":["17.1","18.7","18.18","18.19","20.7","22.0"],"决定":["17.2"],"项目的排列方向":["17.2"],"row":["17.2"],"项目靠主轴起始位置对齐":["17.3"],"end":["17.3"],"项目靠主轴末尾位置对齐":["17.3"],"center":["17.3"],"项目在主轴上居中对齐":["17.3"],"space":["17.3","17.10"],"between":["17.3","17.10"],"wrap":["17.4","17.5"],"属性来控制项目是否换行":["17.4"],"shrink":["17.6"],"如果没有设置宽度或高度":["17.7"],"项目在交叉轴上的对齐方式":["17.9"],"start":["17.9","44.4"],"多行项目靠交叉轴起始位置对齐":["17.9"],"属性设置为":["17.10"],"实现两端对齐效果":["17.10"],"平均分布":["17.10"],"其中包含了行":["18.1"],"rows":["18.1","18.8","114.0"],"和列":["18.1"],"首先需要将一个":["18.2"],"html":["18.2","18.30","29.9","30.4","30.5","37.7","37.9","37.13","38.5","43.15","75.1","75.2","75.5","76.3","80.2","111.0","117.4"],"元素定义为网格容器":["18.2"],"columns":["18.3","18.18","18.19","18.20"],"是定义网格单元格边界的线条":["18.4"],"水平的网格线定义了行":["18.4"],"而垂直的网格线定义了列":["18.4"],"我们可以通过指定网格线的名称或索引来定位网格项":["18.4"],"网格跨度":["18.4"],"布局的属性详解":["18.5"],"用于定义网格的列和行的大小和结构":["18.6"],"可以更清晰地定义布局结构":["18.7"],"定义网格项之间的间隔":["18.9"],"行和列之间的间距":["18.9"],"定义了当网格项目无法放入先前定义的网格轨道时":["18.12"],"如何自动创建额外的网格项目":["18.12"],"用于定义网格项目在网格容器内部的对齐方式":["18.14"],"使用":["18.17","32.14","40.1","66.1","77.2","127.4","151.0"],"grid":["18.17","18.32"],"1fr":["18.20"],"默认一个列":["18.20"],"适用于手机屏幕":["18.20"],"min":["18.20","87.1"],"布局的实际应用":["18.21"],"viewport":["18.22","76.2","118.12"],"content":["18.22","18.23","21.0","76.2","118.12","118.14","120.17"],"width":["18.22","18.23","18.24","75.4","76.2","118.12","143.2","146.3"],"device":["18.22","18.23","18.24","76.2"],"initial":["18.23","18.24"],"scale":["18.23","18.24","128.0","153.1"],"title":["18.23","18.24","25.1","37.4","52.13","96.2"],"complex":["18.23"],"nested":["18.24"],"dynamic":["18.25"],"layout":["18.25","43.6"],"body":["18.25","25.1","63.5","75.1","75.2","75.5","76.3","141.7","142.2","145.1"],"item":["18.25","46.4"],"flexbox":["18.26"],"的比较":["18.26"],"适用于创建二维布局":["18.27"],"即同时控制行和列的布局":["18.27"],"可以实现更复杂的布局结构":["18.28"],"支持二维布局":["18.28"],"可以精确控制网格项的位置和跨度":["18.28"],"在使用":["18.29","121.21"],"布局中":["18.30"],"网格项的顺序并不一定与它们在":["18.30"],"虽然":["18.31"],"尽管":["18.32"],"areas":["18.33"],"来定义布局":["18.33"],"行内":["19.0"],"类":["19.1"],"伪类":["19.1"],"元素":["19.1","30.2","31.5"],"伪元素":["19.1"],"span":["20.1","27.2"],"box":["20.2"],"200px":["20.5"],"background":["20.5"],"skyblue":["20.5","150.9"],"left":["20.6"],"justify":["20.7"],"12333333333333333333333333":["21.0"],"border":["21.1"],"1px":["21.1"],"solid":["21.1"],"margin":["21.3","23.2"],"auto":["21.3"],"限定高度以及行高":["21.3"],"并且行高与高度要成比例":["21.3"],"上下箭头":["22.0"],"button":["22.0","37.13","41.5","41.14","42.5","77.9"],"none":["22.0"],"滚动条轨道":["22.0"],"black":["23.1"],"朝下的三角形":["23.1"],"down":["23.1"],"175px":["23.2"],"height":["23.2","24.7","61.1","61.2","143.2"],"id":["24.0","24.11","37.17"],"audioplayer":["24.0"],"controls":["24.0","24.7","152.7"],"example":["24.0","26.15","62.2","154.11"],"mp3":["24.0","24.2"],"type":["24.0","41.6","102.9","110.12","118.12","130.1"],"audio":["24.2"],"mp4":["24.3"],"video":["24.3"],"描述":["24.5","24.6","154.9"],"视频显示区域的宽高":["24.7"],"play":["24.8"],"src":["24.10","26.15","110.9","154.7"],"https":["24.10","63.9","100.1","117.3","149.1","149.2"],"www":["24.10","62.2","154.11"],"缩小":["24.11"],"makenormal":["24.11"],"普通":["24.11"],"br":["24.11"],"video1":["24.11"],"hypertext":["25.0"],"utf":["25.1","29.23"],"网页标题":["25.1"],"网页内容在这里":["25.1"],"标签可以包含属性":["25.2"],"属性用于为标签提供额外的信息或设置":["25.2"],"属性以键值对的形式出现":["25.2"],"放在标签的开始标签中":["25.2"],"attribute":["25.2"],"header":["25.3"],"footer":["25.3","43.9"],"nav":["25.3","33.13","33.14","33.15"],"与":["25.4","77.5","77.8"],"结合":["25.4"],"标签时":["26.0"],"代码块会被渲染成":["26.0"],"这是h1级别的标题":["26.1"],"h2":["26.1"],"href":["26.3","26.14","27.4","59.2"],"这是一个":["26.8"],"这是一行文本":["26.10"],"placeholder":["26.11"],"输入文本":["26.11"],"post":["26.13","98.5","122.14"],"label":["26.13"],"for":["26.13","39.6","50.9","69.3","69.4","69.6","70.4"],"li":["26.14","33.14","33.15","37.12"],"home":["26.14"],"标签用于定义网页的结构和内容":["27.0"],"方便样式和布局控制":["27.1"],"h1":["27.1","33.10","120.17"],"到":["27.1","131.2"],"h6":["27.1"],"标题标签":["27.1"],"用于创建超链接到其他网页或文档":["27.2"],"内联容器标签":["27.2"],"类似于":["27.2"],"标签中":["27.3"],"然后在":["27.3"],"标签用":["27.4"],"属性来指定链接地址":["27.4"],"避免与未来":["27.5"],"版本中的新标签冲突":["27.5"],"例如":["27.5","30.2","33.5","66.1","72.3","79.1","94.0","121.12","127.6"],"再":["28.1"],"标签上设置属性":["28.1"],"为":["28.1"],"很容易被浏览器识别":["28.1"],"应用程序的":["29.0"],"是单向数据流的框架":["29.1"],"这意味着数据在组件层级之间通过":["29.1"],"props":["29.1","30.14","30.18","31.3","32.10","32.11","34.4","35.2","35.3","36.2","36.3","36.4","36.5","42.1"],"向下传递":["29.1"],"而不允许在子组件中直接修改父组件的数据":["29.1"],"引入了组件化开发的概念":["29.3"],"将复杂的用户界面划分为独立的组件":["29.3"],"树":["29.4"],"用于表示真实":["29.4"],"react":["29.5","29.10","29.11","29.16","29.17","29.18","29.19","30.4","30.11","30.16","31.3","31.4","31.5","31.8","31.11","32.5","32.7","32.8","32.12","34.4","35.1","36.4","43.14"],"采用了单向数据流的数据管理模式":["29.5"],"有众多优秀的第三方库和工具":["29.6"],"可以帮助开发者更高效地构建":["29.6"],"web":["29.6"],"时":["29.7"],"每个组件封装了特定的功能和状态":["29.8"],"可以在其他组件中重复使用":["29.8"],"组件可以是函数组件或类组件":["29.8"],"的语法扩展":["29.9"],"允许在":["29.9"],"是":["29.10","29.11","65.0","73.0"],"中用于组件之间通信的机制":["29.10"],"组件内部管理的可变数据":["29.11"],"组件具有不同的生命周期阶段":["29.12"],"包括组件的挂载":["29.12"],"输入等":["29.13"],"并对其进行响应":["29.13"],"通过条件语句":["29.14"],"我们可以使用":["29.15"],"状态提升是一种在":["29.17"],"用于在":["29.18"],"的上下文允许在组件树中共享数据":["29.19"],"引入的新特性":["29.20"],"我们需要先安装几个包":["29.22"],"的核心库":["29.22"],"lang":["29.23","51.3"],"en":["29.23","51.3"],"head":["29.23","37.4","76.3","99.7"],"meta":["29.23"],"charset":["29.23"],"http":["29.23"],"equiv":["29.23"],"ua":["29.23"],"jsx":["29.24","31.4","31.6","31.10","32.4","33.12","34.3","34.5"],"import":["29.24","33.12","39.3","41.8","41.31","43.2","98.6","110.11"],"构建动态":["30.0"],"的一种特殊语法扩展":["30.1"],"它允许我们在":["30.1"],"函数的调用":["30.2"],"从而创建":["30.2"],"下面的":["30.2"],"标签一样写":["30.4"],"组件的标签":["30.4"],"属性的写法与":["30.5"],"标签类似":["30.5"],"ui":["30.6","30.10"],"结构":["30.6"],"可以在大括号内使用":["30.7"],"中的最大价值在于支持组件化开发":["30.9"],"通过组件化开发":["30.9"],"我们可以将":["30.9"],"并返回一个描述":["30.10"],"component":["30.11","31.3","31.4","31.8","31.11","32.5","32.7","32.8","32.9","32.15","34.3","34.4","35.2","35.3","35.4","36.2","36.3","36.4","36.5","43.15"],"并且具有状态和生命周期方法":["30.11"],"标签一样使用组件的标签":["30.12"],"将属性传递给组件":["30.12"],"即根据条件来决定是否渲染组件或显示不同的内容":["30.13"],"products":["30.17"],"super":["30.18","31.3","31.8","34.4","35.2","35.3","35.4","36.2","36.3","36.5"],"this":["30.18","31.3","31.13","32.10","32.11","32.15","35.2","35.3","35.4","36.3","68.6","68.7","72.8","89.1","89.2","90.2","93.2","95.7","102.1","102.6","102.8","102.10","104.6"],"state":["30.18","35.2","35.3","35.4","36.3","39.3","39.5","41.10"],"email":["30.18","99.1"],"handlechange":["30.18","35.5"],"event":["30.18","35.5","42.4","77.12"],"fahrenheit":["30.19"],"setfahrenheit":["30.19"],"handlecelsiuschange":["30.19"],"并返回一个新的组件":["30.20"],"withlogger":["30.20"],"wrappedcomponent":["30.20"],"themecontext":["30.21"],"createcontext":["30.21"],"light":["30.21"],"app":["30.21","37.17","122.14","143.2","146.1","146.3"],"特性":["30.22"],"通过":["30.22","63.2","63.3","95.12","102.0","127.7"],"我们可以在函数组件中使用类组件的功能":["30.22"],"如状态管理":["30.22"],"生命周期是指组件在不同阶段经历的一系列方法调用":["31.0"],"渲染组件的内容":["31.1"],"componentdidmount":["31.1","31.13"],"组件挂载到":["31.1"],"dom":["31.1","37.18","42.3"],"后调用":["31.1"],"用于进行副作用操作":["31.1"],"如网络请求":["31.1"],"mycomponent":["31.4","31.6","31.11","32.4","32.5","34.3","34.5"],"我们应该返回一个":["31.5"],"操作":["31.6"],"表示需要重新渲染":["31.9"],"false":["31.9","49.2","53.7","53.10","88.8","101.3","101.12"],"表示不需要重新渲染":["31.9"],"默认返回":["31.9"],"并返回一个值":["31.10"],"该值将作为第三个参数传递给":["31.10"],"componentdidupdate":["31.10","34.5"],"订阅事件":["31.13"],"eventemitter":["31.13"],"on":["31.13","117.4","140.1"],"someevent":["31.13"],"handleevent":["31.13"],"的缩写":["32.1"],"意为属性":["32.1"],"每个":["32.1"],"childcomponent":["32.3","34.7"],"defaultprops":["32.4"],"来实现":["32.4"],"包括字符串":["32.6"],"数字":["32.6"],"render":["32.7","32.8","32.9","32.15","34.7"],"items":["32.10","96.2"],"之前":["32.14"],"需要先安装":["32.14"],"prop":["32.14"],"types":["32.14"],"库":["32.14"],"bash":["32.14","44.1","105.9","105.10"],"npm":["32.14","37.3","97.2","110.4","125.7"],"install":["32.14","117.2","118.10","121.16","126.2"],"count":["32.15","39.5"],"它允许我们在单页应用中切换不同的页面视图":["33.1"],"而无需重新加载整个页面":["33.1"],"相比传统多页应用":["33.1"],"单页应用":["33.1"],"它表示一个特定的":["33.3"],"url":["33.3","33.4","59.0","63.4","63.9","110.12","120.16"],"路径和对应的页面组件":["33.3"],"当用户访问该路径时":["33.3"],"并且这些页面组件具有各自的":["33.4"],"我们可以通过路由参数在":["33.5"],"它允许用户点击链接来切换不同的页面视图":["33.6"],"而无需进行页面的完全刷新":["33.6"],"编程式导航允许我们在组件中使用":["33.7"],"来手动触发页面的切换":["33.7"],"的依赖":["33.8"],"可以使用":["33.8","35.6","81.4"],"page":["33.10"],"about":["33.11"],"contact":["33.11","33.13","33.14"],"index":["33.12","110.9","111.0"],"subpage":["33.13"],"userprofile":["33.14"],"to":["33.15","44.4"],"组件都可以拥有自己的":["34.1"],"并在需要时对其进行更新":["34.1"],"后立即获取最新的":["34.5"],"值":["34.5","34.6","54.3"],"可以使用回调函数或者在":["34.5"],"生命周期方法中获取":["34.5"],"并根据当前":["34.6"],"的值返回一个新的":["34.6"],"这样做的原因是确保":["34.6"],"的变化能够被":["34.6"],"正确地追踪和处理":["34.6"],"listrendering":["35.2","35.4"],"numbers":["35.4","48.19","48.20","48.28","48.29"],"newnumber":["35.5"],"setstate":["35.5"],"target":["35.5","77.12"],"addnumber":["35.5"],"当需要在":["35.6"],"方法中返回多个元素时":["35.6"],"来包裹这些元素":["35.6"],"从而避免额外的":["35.6"],"的条件语句":["36.1"],"conditionalrendering":["36.2","36.4","36.5"],"isloggedin":["36.3"],"在条件渲染中":["36.6"],"可能会遇到变量未定义或为空的情况":["36.6"],"为了避免出现错误":["36.6"],"可以使用默认值来处理这些情况":["36.6"],"避免嵌套过深":["36.6"],"在条件渲染时":["36.6"],"尽量避免嵌套过深的代码结构":["36.6"],"以免影响代码的可读性和性能":["36.6"],"是一套用于构建用户界面的渐进式":["37.1"],"node":["37.3","105.10","110.7","120.9","120.11","120.15","121.21","124.1"],"package":["37.3","124.6"],"进行数据插值":["37.6"],"将数据绑定到":["37.6"],"实例的数据绑定":["37.7"],"img":["37.7","110.6","154.9"],"并执行相应的方法":["37.13"],"指令实现表单输入和":["37.14"],"vue":["37.14","37.16","38.2","41.2","41.6","41.13","41.16","41.17","41.18","41.19","41.20","42.6","42.9","43.2","43.6","43.9","43.12","43.16","152.9","152.12"],"模板已经编译完成":["37.18"],"但尚未将其挂载到":["37.18"],"mounted":["37.18","41.27","41.28"],"挂载后":["37.18"],"渲染之后调用":["37.18"],"组件已经被挂载到":["37.18"],"router":["38.2","38.4"],"createrouter":["38.3"],"createwebhistory":["38.3"],"组件中使用":["38.4"],"view":["38.4","141.7","142.2"],"以在单页面应用中切换不同的路由":["38.5"],"routes":["38.6","38.7"],"path":["38.6"],"user":["38.6","63.4","100.3","110.10","118.2","118.4","122.3","122.5"],"例如登录验证":["38.8"],"权限控制等":["38.8"],"了解更多高级配置":["38.12"],"应用程序开发的状态管理模式":["39.0"],"它是一个集中式的状态管理库":["39.0"],"获取器":["39.1"],"用于从":["39.1"],"的全局状态中派生出一些状态":["39.1"],"类似于组件的计算属性":["39.1"],"computed":["39.1","45.3"],"但是":["39.1","55.5","66.2"],"方便开发者进行状态的调试和追踪":["39.2"],"组件通信":["39.2"],"可以轻松实现跨组件的状态共享和通信":["39.2"],"避免了传统的":["39.2"],"mutations":["39.3"],"actions":["39.3"],"getters":["39.3"],"假设我们有一个简单的计数器应用":["39.4"],"以下是使用":["39.4"],"的例子":["39.4"],"store":["39.4","39.5"],"vuex":["39.5"],"increment":["39.5","65.2","67.1"],"go":["39.6"],"run":["39.6"],"read":["39.6"],"book":["39.6"],"获取所有的todos":["39.6"],"alltodos":["39.6"],"对每个属性":["40.1"],"来定义":["40.1"],"getter":["40.1"],"setter":["40.1"],"这个过程使得":["40.1"],"能够更灵活地捕获数据的变化":["40.2"],"依赖追踪":["40.2"],"dependency":["40.2"],"tracking":["40.2"],"仍然使用依赖追踪的机制":["40.2"],"但与":["40.2"],"不同的是":["40.2","53.6"],"script":["41.0","44.5","51.4"],"标签中添加":["41.0"],"setup":["41.0","41.23"],"就可以做到":["41.0"],"函数是":["41.1"],"新增的一个选项":["41.1"],"它是组合式":["41.1"],"使用reactive":["41.2"],"去修改值无须":["41.2"],"ref其实也是内部调用":["41.2"],"来实现的":["41.2"],"我是message":["41.4"],"obj":["41.6","52.2","52.11"],"hr":["41.7"],"reactive":["41.8","41.18","41.19","41.20","45.3"],"不论是响应式还是普通的":["41.9"],"如果原始对象是":["41.12"],"非响应式":["41.12"],"作用基本一致":["41.15"],"他们都是用来监听响应式状态发生变化的":["41.16"],"当响应式状态发生变化时":["41.16"],"就会触发一个回调函数":["41.16"],"watch":["41.19"],"响应式":["41.21"],"追踪其依赖":["41.21"],"可以接收一个参数":["41.22"],"叫oninvalidate":["41.22"],"在组件的":["41.23"],"更新时机":["41.24"],"过程":["41.25"],"成为生命周期":["41.25"],"只调用一次":["41.27"],"元素插入父级dom调用":["41.27"],"any":["41.28","106.5"],"在元素上做些操作":["41.28"],"初始化一次":["41.28"],"el":["41.28"],"该值为":["41.29"],"oldvalue":["41.29"],"先前的值":["41.29"],"仅在":["41.29"],"beforeupdate":["41.29"],"updated":["41.29"],"中可用":["41.29"],"v":["41.30","42.12"],"move":["41.30"],"可以帮助我们提高代码的复用性":["41.31"],"让我们能在不同的组件中都利用":["41.31"],"函数":["41.31","86.3","86.5","86.12","107.0"],"案列":["41.31"],"实现一个窗口改变时获取宽高的":["41.31"],"hook":["41.31"],"组件通信方式":["42.1"],"可以实现父子组件":["42.1"],"child":["42.2","42.7"],"info":["42.2"],"我爱祖国":["42.2"],"money":["42.2"],"子组件获取父组件传递数据":["42.2"],"一种是原生的":["42.3"],"标签绑定原生":["42.4"],"事件点击事件":["42.4"],"默认会给事件回调注入":["42.4"],"事件对象":["42.4"],"我是子组件2":["42.5"],"click":["42.5","135.1","140.1"],"handler":["42.5"],"点击我触发xxx自定义事件":["42.5"],"我们会发现在":["42.5"],"但是在":["42.6"],"vue3":["42.6","42.10","43.13"],"中没有":["42.6"],"实现的":["42.7"],"下方代码":["42.7"],"相当于给组件":["42.7"],"传递一个":["42.7"],"与绑定一个自定义事件":["42.7"],"vue2":["42.8","105.6"],"框架中":["42.8"],"attrs属性与":["42.8"],"listeners":["42.8"],"比如":["42.8","42.9"],"那么子组件内部的方法与响应式数据父组件可以使用的":["42.9"],"在父组件挂载完毕获取组件实例":["42.9"],"父组件内部代码":["42.9"],"注入":["42.10"],"提供两个方法":["42.10"],"pinia":["42.11"],"web3doc":["42.11"],"父组件内部向指定的具名插槽传递结构":["42.12"],"需要注意":["42.12"],"可以替换为":["42.12"],"并且对":["43.5"],"menu":["43.6"],"data":["43.6","63.8","63.9","97.5","117.4","118.12","120.3"],"slot":["43.8","43.10"],"父组件使用需对应名称":["43.9"],"派发给父组件的":["43.10"],"去使用":["43.10"],"父组件":["43.11","43.16"],"defineasynccomponent":["43.12"],"异步加载":["43.12"],"新增了":["43.13"],"了":["43.13"],"就不必跟踪何时加载数据并呈现相应的内容":["43.13"],"portal":["43.14"],"主要解决的问题":["43.14"],"因为teleport节点挂载在其他指定的dom节点下":["43.14"],"只会触发":["43.15"],"基本":["43.15"],"children":["43.16"],"modelvalue":["43.17"],"update":["43.17","152.8"],"input":["43.17","138.4"],"新增":["43.17"],"一个组件可以设置多个":["43.17"],"g":["44.2"],"版本在":["44.3"],"choose":["44.4"],"version":["44.4"],"that":["44.4"],"you":["44.4"],"want":["44.4"],"标签上支持原生":["44.5"],"esm":["44.5"],"yarn":["44.6"],"create":["44.6","72.18","116.4"],"init":["44.7","99.3","110.6","124.4","154.11"],"one":["45.1"],"piece":["45.1"],"初次渲染快55":["45.2"],"zhangsan":["46.1","55.4"],"lisi":["46.1"],"send":["46.2","63.6","71.5","118.2","118.4","122.14"],"getname":["46.2","89.2"],"子组件":["46.2"],"tip":["46.3","49.5","49.6","53.12","85.0"],"常用的就是定义":["46.3"],"是一种可以按顺序保存数据的数据类型":["48.0"],"使用场景":["48.0"],"声明数组并赋值称为数组的初始化":["48.1"],"这种字面量方式也是最多的使用方式":["48.1"],"利用new":["48.1"],"aa":["48.2"],"bb":["48.2"],"cc":["48.2"],"dd":["48.2"],"ee":["48.2"],"增":["48.5"],"push":["48.6","104.6"],"colors":["48.7","48.8","48.9","48.12","48.13","48.17","48.26"],"red":["48.9","48.12","48.13","48.14","48.17","48.26"],"green":["48.9","48.10","48.14","48.17","48.26","101.6"],"blue":["48.9","48.10","48.14","48.17","101.6","132.0"],"colors2":["48.10","48.15"],"pop":["48.11","149.1","149.2"],"splice":["48.16"],"indexof":["48.18"],"reverse":["48.22"],"都不改变原数组":["48.27"],"有如下":["48.27"],"alert":["49.1","92.3"],"yes":["49.1"],"else":["49.1","67.5","71.5","89.3"],"no":["49.1","110.8"],"会自上向下依次对":["49.2"],"后的条件表达式进行求值判断":["49.2"],"如果条件表达式结果为":["49.2"],"则执行当前":["49.2"],"后的语句":["49.2"],"执行完毕语句结束":["49.2"],"则继续向下判断":["49.2"],"直到找到":["49.2"],"表达式2":["49.3"],"表达式3":["49.3"],"while":["49.4","50.9"],"语句":["49.4"],"i":["49.8","70.4","88.6","93.2"],"需要执行的代码":["49.9","49.10"],"示例":["49.9","49.10"],"可迭代对象":["49.10"],"而":["49.11","119.2"],"循环迭代对象的是值":["49.11"],"因此":["49.11"],"循环适用于迭代对象的键名":["49.11"],"j":["49.12","69.2"],"可能会定义非常多的相同代码或者功能相似的代码":["50.0"],"这些代码可能需要大量重复使用":["50.0"],"声明定义方式":["50.2"],"sayhi":["50.3"],"hi":["50.3"],"声明函数的关键字":["50.3"],"对外只提供一个简单的函数接口":["50.4"],"我们可以利用函数的参数实现函数重复不同的代码":["50.6"],"函数名":["50.6"],"形参1":["50.6"],"如果实参的个数和形参的个数一致":["50.7"],"则正常输出结果":["50.7"],"以最后一个为准":["50.8"],"函数没有":["50.8"],"返回的值是":["50.8"],"undefined":["50.8","54.16","55.3","101.8"],"函数返回值注意事项":["50.8"],"终止函数":["50.8"],"getsum":["50.8"],"num1":["50.8","54.11"],"num2":["50.8"],"没有名字的函数":["50.10"],"xxx":["50.12","100.3"],"它也可以在服务器端运行":["51.0"],"用于编写后端代码":["51.0"],"输出hello":["51.1"],"然后浏览器才能执行":["51.2"],"结尾的文件中":["51.4"],"然后通过":["51.4"],"快捷键":["51.6","51.7"],"是一种无序的复合数据集合":["52.2"],"的所有键名虽然看上去像数值":["52.3"],"实际上都被自动转成了字符串":["52.3"],"如果键名不符合标识名的条件":["52.3"],"比如第一个字符为数字":["52.3"],"或者含有空格或运算符":["52.3"],"且也不是数字":["52.3"],"则必须加上引号":["52.3"],"否则会报错":["52.3"],"指向同一个对象":["52.4"],"因此为其中任何一个变量添加属性":["52.4"],"另一个变量都可以读写该属性":["52.4"],"此时":["52.4"],"表示一个代码区块":["52.5"],"里面有一个标签":["52.5"],"指向表达式":["52.5"],"为了避免这种歧义":["52.5"],"引擎的做法是":["52.5"],"如果遇到这种情况":["52.5"],"引用对象":["52.7"],"而且":["52.10"],"方法的返回值也不再包括该属性":["52.10"],"删除一个不存在的属性":["52.10"],"不报错":["52.10"],"而且返回":["52.10"],"循环有两个使用注意点":["52.12"],"它遍历的是对象所有可遍历":["52.12"],"enumerable":["52.12"],"的属性":["52.12"],"会跳过不可遍历的属性":["52.12"],"它不仅遍历对象自身的属性":["52.12"],"style":["52.13"],"是用于实现赋值":["53.1"],"比较和执行算数运算等动能的符号":["53.1"],"除":["53.2"],"时才会对变量进行赋值":["53.3"],"加等于":["53.3"],"n":["53.3"],"所返回的值不同":["53.5"],"是自增前的值":["53.5"],"旧值":["53.5"],"是自增后的值":["53.5"],"都会使原变量立刻减少":["53.6"],"大于号":["53.7"],"小于等于号":["53.7"],"与运算是短路的与":["53.9"],"如果第一个值为":["53.9","53.10"],"则不看第二个值":["53.9","53.10"],"与运算是找":["53.9"],"或运算也是短路的或":["53.10"],"执行顺序":["53.12"],"种":["54.1"],"hexnum1":["54.2"],"0xa":["54.2"],"16进制的10":["54.2"],"浮点类型则在数值汇总必须包含小数点":["54.2"],"还可通过科学计数法表示":["54.2"],"就相当于给变量赋予了":["54.3"],"firstname":["54.4"],"lastname":["54.4","102.10"],"传一个":["54.5"],"会返回":["54.5"],"的原因":["54.5"],"可以将其他类型的数据转化成布尔值":["54.6"],"规则如下":["54.6"],"数据类型":["54.6"],"转换为":["54.6"],"genericsymbol":["54.7"],"属性名可以是字符串或数值":["54.9"],"并且":["54.10"],"数组也是动态大小的":["54.10"],"会随着数据添加而自动增长":["54.10"],"sum":["54.11"],"date":["54.12","84.3"],"abc":["54.15"],"11px":["54.15"],"null":["54.16","68.3"],"都转换为":["54.16"],"基本数据类型存储在栈中":["54.17"],"赋值操作":["54.18"],"zs":["54.19","118.2"],"引用类型对应的值存储在堆中":["54.20"],"出错":["55.1"],"在函数内定义变量时省略":["55.1"],"可以创建一个全局变量":["55.1"],"referenceerror":["55.2","55.6"],"没有定义":["55.2"],"不能重复声明":["55.2"],"的元素":["56.1"],"修改文档结构":["56.1"],"getelementbyid":["56.2"],"创建一个新的段落元素":["56.2"],"forward":["57.1"],"back":["57.2"],"它提供了操作浏览器窗口的方法和属性":["58.0"],"如打开":["58.0"],"关闭窗口":["58.0"],"调整窗口大小":["58.0"],"以及获取窗口的位置和尺寸等":["58.0"],"document":["58.0","77.9","78.1","81.3","142.2","145.1"],"它代表当前窗口或标签页中加载的文档":["58.0"],"它提供了对文档内容进行访问和操作的方法和属性":["58.0"],"对象提供了与当前窗口的":["59.0"],"的协议部分":["59.1"],"hostname":["59.1"],"获取url的协议":["59.2"],"用于识别浏览器和操作系统":["60.1"],"useragent":["60.2"],"获取浏览器的名称":["60.2"],"屏幕的高度":["61.1"],"屏幕高度":["61.2"],"对象是":["62.0"],"打开一个新的浏览器窗口或标签页":["62.1"],"close":["62.1","120.4"],"com":["62.2","149.1","149.2","154.11"],"即异步的":["63.1"],"的核心对象":["63.2"],"xmlhttprequest":["63.2"],"method":["63.4","98.5","120.16"],"async":["63.4"],"xhr":["63.5"],"未发送":["63.6"],"headers":["63.6"],"received":["63.6"],"以获取响应头":["63.6"],"方法已经被调用":["63.6"],"响应头和响应状态已经返回":["63.6"],"loading":["63.6"],"正在下载响应体":["63.6"],"get":["63.8","102.9"],"touppercase":["63.8"],"datatype":["63.8","112.1"],"json":["63.8","63.9","70.2","81.4","124.5","124.6","125.4"],"params":["63.8","98.5"],"发送请求":["63.8"],"outervariable":["65.1","74.3"],"innerfunction":["65.1","74.2","74.3","74.4"],"getage":["65.3","89.2"],"工厂函数可以包含一些内部变量和方法":["65.4"],"这些内部变量和方法对外部不可见":["65.4"],"只有通过返回的对象实例才能访问":["65.4"],"实现模块化":["65.4"],"闭包中的变量是引用传递的":["65.5"],"而不是传值":["65.5"],"如果在闭包中修改外部变量":["65.5"],"那么外部作用域中的变量也会被修改":["65.5"],"可以使用一些简单的方法来实现浅拷贝":["66.1"],"assign":["66.1"],"此方法将原始对象转换为":["66.2"],"字符串":["66.2"],"然后再将":["66.2"],"字符串解析为一个新的对象":["66.2"],"从而实现深拷贝":["66.2"],"需要注意的是":["66.2"],"此方法对于无法序列化的属性":["66.2"],"如函数":["66.2"],"正则表达式":["66.2"],"循环引用等":["66.2"],"返回一个新函数":["67.1"],"用于增加":["67.1"],"每个函数接收一个参数并返回一个新函数":["67.2"],"使得函数的组合和复合变得简单而灵活":["67.2"],"高阶函数的创建":["67.2"],"可以将原始函数转化为高阶函数":["67.2"],"即接收一个函数作为参数并返回一个新函数的函数":["67.2"],"中实现柯里化函数的方法有多种":["67.3"],"apply":["67.4","68.3","68.7"],"是两种常见的性能优化技术":["68.0"],"用于限制函数的执行频率":["68.0"],"它们可以帮助控制事件处理函数的触发次数":["68.0"],"以减少资源消耗和提升用户体验":["68.0"],"resize":["68.1","68.4"],"throttle":["68.2","68.7"],"func":["68.2"],"delay":["68.2"],"那么定时器触发后执行函数":["68.5"],"如果在指定时间内又有新的函数调用发生":["68.5"],"则重新开始计时":["68.5"],"以下是一个简单的防抖函数的实现示例":["68.5"],"context":["68.6","128.1","128.2","133.6","135.2"],"arguments":["68.6"],"res":["69.3","69.4","69.6","117.4","118.2","118.4","118.5","118.6","120.16","122.5","122.14"],"unique":["69.5"],"res1":["70.1"],"stringify":["70.2","71.5"],"有三种状态":["71.0"],"pending":["71.0"],"进行中":["71.0"],"fulfilled":["71.0"],"已成功":["71.0"],"catch":["71.2","71.4","97.3","97.4"],"方法可以处理异步操作失败的结果":["71.2"],"处理第一个操作成功的结果":["71.3"],"anotherpromise":["71.3"],"promise2":["71.4"],"promise3":["71.4"],"results":["71.4"],"处理所有":["71.4"],"实例成功的结果":["71.4"],"error":["71.5","97.3","101.10","104.7","110.8"],"statustext":["71.5"],"onerror":["71.5"],"network":["71.5"],"示例用法":["71.5"],"requestdata":["71.5"],"username":["71.5","81.1","81.3","110.10"],"对象都有一个原型对象":["72.1"],"它是一个包含属性和方法的对象":["72.1"],"is":["72.2","72.4"],"eating":["72.4"],"dog":["72.4","89.3"],"breed":["72.4"],"call":["72.4","95.10"],"中有多种方式来实现原型继承":["72.5"],"prototype":["72.6","89.1"],"eat":["72.6","72.7","72.8","72.9"],"该对象的原型就是传入的原型对象":["72.7"],"animal":["72.7","72.8","72.9"],"以下是一些主要区别":["72.10"],"传统面向对象编程语言通常使用类来定义对象的结构和行为":["72.13"],"更可维护的代码":["72.14"],"虽然你可以修改内建对象的原型":["72.15"],"将方法添加到原型上而不是在构造函数内部定义方法":["72.16"],"当在子对象上定义与父对象相同名称的属性或方法时":["72.17"],"是回调函数":["73.1"],"输出结果为":["73.3"],"打印结果":["73.3","73.4"],"这里注意初始值要默认赋予空对象":["73.4"],"不然会报错":["73.4"],"newarr":["73.5","73.7"],"chinese":["73.8"],"建议始终提供":["73.9"],"initialvalue":["73.9"],"来明确指定累加器的初始值":["73.9"],"以避免空数组或其他边界情况可能导致的错误":["73.9"],"globalfunction":["74.1"],"outer":["74.2","74.3","74.4","77.10"],"innervariable":["74.2"],"outerfunction":["74.3"],"在末尾":["75.1"],"结束标签前":["75.1"],"insertbefore":["75.1"],"在父节点中任意子节点之前插入新节点":["75.1"],"如下代码演示":["75.1"],"h3":["75.1"],"删除节点时一定是由父子关系":["75.2"],"它们要么是父子关系":["75.3"],"apis":["75.4"],"parentnode":["75.4"],"获取父节点":["75.4"],"以相对位置查找节点":["75.4"],"实际应用中非常灵活":["75.4"],"table":["75.4","112.1","116.4","116.5","116.7"],"tr":["75.4"],"td":["75.4"],"文本或其他类型的内容":["76.1"],"在":["76.1"],"浏览器将":["76.1"],"标签":["76.3"],"如上图中":["76.3"],"是学习":["76.4"],"的核心":["76.4"],"事件处理是":["77.0"],"便立即调用一个函数":["77.1"],"对象专门用来添加事件监听的方法":["77.2"],"它的两个参数分别为":["77.2"],"事件类型":["77.2"],"事件回调":["77.2"],"以避免不必要的事件处理":["77.3"],"可以使用以下方法来移除事件监听器":["77.3"],"该事件在鼠标指针每次移动时都会触发":["77.5"],"可以用于实时跟踪鼠标位置":["77.5"],"mouseover":["77.5"],"当鼠标指针进入元素的可见区域时触发":["77.5"],"mouseout":["77.5"],"当鼠标指针离开元素的可见区域时触发":["77.5"],"mouseenter":["77.5"],"addeventlistener":["77.6","77.7","77.9"],"keydown":["77.6","77.11"],"当文本框内容发生改变并失去焦点时触发":["77.8"],"事件不同":["77.8"],"事件在用户完成输入并离开文本框时才会触发":["77.8"],"queryselector":["77.9","138.3"],"事件流是事件在执行时的底层机制":["77.10"],"主要体现在父子盒子之间事件的执行上":["77.10"],"键盘事件":["77.11"],"keyup":["77.11"],"keypress":["77.11"],"在事件处理程序中":["77.12"],"通过判断事件的目标元素":["77.12"],"来确定是哪个子元素触发了事件":["77.12"],"根据需要对目标元素进行处理":["77.12"],"appendchild":["78.0","141.7","142.2","145.1"],"newelement":["78.1"],"设置元素的文本内容":["78.2"],"textcontent":["78.2"],"属性或":["78.2"],"innertext":["78.2"],"添加为":["78.3"],"的子元素":["78.3"],"将元素插入到已有元素之前":["78.3"],"是你要修改的":["79.1"],"样式属性的名称":["79.1"],"切换类名":["79.2"],"toggle":["79.2"],"getelementsbyclassname":["80.0","80.1"],"根据类名获取元素节点集合":["80.0"],"elementid":["80.1"],"通过类名获取元素":["80.1"],"传入类名":["80.1"],"修改元素的":["80.2"],"是由服务器发送到浏览器的小型文本文件":["81.0"],"expires":["81.1","81.3"],"fri":["81.1"],"dec":["81.1"],"的值":["81.4"],"存储的值通常是字符串类型":["81.4"],"如果需要存储其他数据类型":["81.4"],"如对象或数组":["81.4"],"storage":["82.0","83.0"],"api":["82.0","83.0","122.14","151.0"],"提供的一种本地存储机制":["82.0","83.0"],"其中":["82.1","83.1"],"中检索数据":["82.2","83.2"],"如果键不存在":["82.2","83.2"],"中的数据":["82.3","83.3"],"removeitem":["82.4","83.4"],"clear":["82.5","83.5"],"方法来删除":["82.5","83.5"],"setitem":["82.6","83.6"],"storeduser":["82.6","83.6"],"getminutes":["84.1"],"获取分钟数":["84.1"],"getmonth":["84.1"],"获取月份":["84.1"],"一月":["84.1"],"mydate":["84.2","84.3"],"秒起至现在的总秒数或毫秒数":["84.4"],"它是一种特殊的计量时间的方式":["84.4"],"注":["84.4"],"中时间戳是以毫秒计的":["84.4"],"获取时间戳的方法":["84.4"],"分别为":["84.4"],"setfullyear":["84.5"],"用于处理各种不同类型的数据和操作":["85.0"],"简介":["85.0"],"数组":["85.1","92.5","95.12"],"string":["85.1","101.1","101.5","101.13","101.14","102.11","106.2","106.5","106.6"],"字符串对象":["85.1"],"number":["85.1","101.5","101.9","102.2","103.3","103.4","109.1"],"的基础对象":["85.2"],"它提供了一系列的方法来操作和处理数据集合":["85.3"],"如添加":["85.3"],"它提供了许多字符串相关的方法":["85.4"],"它提供了一系列数字相关的方法":["85.5"],"如四舍五入":["85.5"],"包括":["85.6"],"它提供了一系列的方法来操作日期和时间":["85.7"],"如获取当前时间":["85.7"],"它提供了一系列数学运算方法":["85.8"],"可以用于文本匹配":["85.9"],"的一个内置对象":["86.0"],"它提供了一些数学属性和方法":["86.0"],"获取圆周率":["86.1"],"到小于":["86.4"],"返回大于或等于一个给定数的最小整数":["86.5"],"返回小于或等于一个给定数字的最大整数":["86.6"],"取整":["86.7"],"是可以返回指定一组数据中最小值":["86.8"],"是可以返回指定一组数据中最大值":["86.9"],"exponent":["86.10"],"次幂":["86.10"],"求某个数的多少次方":["86.10"],"返回一个值的正弦值":["86.12"],"返回一个值的余弦值":["86.13"],"中能表示的最小正数值":["87.1"],"tofixed":["87.2"],"digits":["87.2"],"将数值转换为指定小数位数的字符串表示":["87.2"],"表示保留的小数位数":["87.2"],"toprecision":["87.2"],"precision":["87.2"],"将数值转换为指定精度的字符串表示":["87.2"],"表示有效位数":["87.2"],"tostring":["87.2"],"将数值转换为字符串":["87.2"],"是一个内置的对象类型":["88.1"],"可以通过字面量或构造函数来创建":["88.1"],"正则表达式是一种由字符和特殊符号组成的模式":["88.1"],"用于定义字符串的搜索规则":["88.1"],"它接收两个参数":["88.4"],"匹配字符串的结尾":["88.5"],"匹配前面的元素零次或多次":["88.5"],"全局匹配":["88.6"],"找到所有匹配项而不仅仅是第一个":["88.6"],"匹配数字":["88.7"],"匹配非数字":["88.7"],"test":["88.8","101.8"],"检查字符串是否匹配正则表达式":["88.8"],"并返回":["88.8"],"或":["88.8","97.4","110.8","120.17"],"exec":["88.8"],"在字符串中执行正则表达式匹配":["88.8"],"输出":["88.9"],"不区分大小写匹配":["88.10"],"m":["88.10","99.6","150.9"],"多行匹配":["88.10"],"允许":["88.10"],"密码等":["88.11"],"字符串替换":["88.11"],"使用正则表达式进行文本替换":["88.11"],"格式化或删除特定的字符":["88.11"],"公有方法":["89.2"],"instanceof":["89.3"],"woof":["89.3"],"但在":["90.0"],"其中程序被组织为一组对象":["91.1"],"封装":["91.2"],"封装是面向对象编程的重要原则":["91.2"],"它指的是将数据和操作数据的方法封装在一个单元中":["91.2"],"以隐藏内部实现细节":["91.2"],"只暴露必要的接口":["91.2"],"继承":["91.2"],"大家好啊":["92.3"],"调用对象":["92.3"],"来调用构造函数":["92.4"],"构造函数的特点有两个":["92.4"],"函数体内部使用了":["92.4"],"代表了所要生成的对象实例":["92.4"],"生成对象的时候":["92.4"],"必须使用":["92.4"],"命令":["92.4"],"freeze":["92.5"],"冻结一个对象":["92.5"],"防止对其进行修改":["92.5"],"getownpropertydescriptor":["92.5"],"obj2":["92.6"],"myproto":["92.7"],"descriptor":["92.11"],"symbol":["92.13"],"mysymbol":["92.13"],"添加属性无效":["92.18"],"不会影响原对象":["92.18"],"delete":["92.18"],"原型和原型链是面向对象编程中的重要概念":["93.0"],"原型对象是另一个普通对象":["93.1"],"它包含了可供共享的属性和方法":["93.1"],"当我们访问对象的属性或方法时":["93.1"],"会首先在对象自身查找":["93.1"],"如果找不到":["93.1"],"则继续在对象的原型上查找":["93.1"],"am":["93.2"],"这样可以节省内存空间":["93.3"],"setprototypeof":["93.4"],"要在整个脚本文件中启用严格模式":["94.0"],"只需在脚本的顶部添加一行":["94.0"],"即可":["94.0"],"准确来说":["95.1"],"是在函数发生预编译的前一刻":["95.1"],"这个隐含的参数就是":["95.2"],"以函数形式调用":["95.3"],"this是window":["95.3"],"可以理解成":["95.3"],"的形式调用时":["95.3"],"指向调用方法的那个对象":["95.3"],"绑定":["95.4"],"无论":["95.4"],"专门为我们提供了一些方法来改变函数内部的":["95.5"],"它还可以改变这个函数内部的":["95.7"],"指向":["95.7"],"类似":["95.10"],"方法的应用":["95.10"],"由于":["95.10"],"fn1":["95.11","103.4"],"传的刚好是":["95.12"],"所以我们可以":["95.12"],"曲线救国":["95.12"],"举例":["95.12"],"方法使用得最为频繁":["95.14"],"如果有些函数":["95.14"],"我们不需要立即调用":["95.14"],"但是又想改变这个函数内部的":["95.14"],"此时用":["95.14"],"promise":["97.1"],"或者":["97.3","101.9","121.16"],"普通错误处理":["97.4"],"代码异常处理":["97.4"],"在请求或响应被":["97.4"],"then":["97.4"],"处理前拦截它们":["97.4"],"实现请求":["98.1"],"响应拦截器功能":["98.1"],"localstorage":["98.3"],"getitem":["98.3"],"请求头携带":["98.3"],"设置请求头":["98.3"],"status":["98.4","99.4","122.14"],"case":["98.4"],"接口重定向了":["98.4"],"break":["98.4"],"参数不正确":["98.4"],"postaction":["98.6"],"sys":["98.6"],"在页面中调用":["98.6"],"总是会有所不一样":["98.7"],"十分钟封装一个好用的":["98.7"],"将本地库所有变更添加到暂存区":["99.5"],"or":["99.6"],"filename":["99.7"],"比较暂存区和":["99.7"],"的所有差异":["99.7"],"查看极简日志信息":["99.8"],"oneline":["99.8"],"查看最近":["99.8"],"branch":["99.11","99.12"],"checkout":["99.13"],"分支合并到":["99.14"],"分支":["99.14"],"discard":["99.15"],"changes":["99.15"],"working":["99.15"],"directory":["99.15"],"而不新建":["99.16"],"reference":["99.16"],"为远程仓库起别名":["99.18"],"拉取远程分支":["99.20"],"并与本地分支合并":["99.20"],"表示将本地分支推送到与之存在追踪关系的远程分支":["99.21"],"通常两者同名":["99.21"],"如果该远程分支不存在":["99.21"],"则会被新建":["99.21"],"在空白处点鼠标右键选择":["100.2"],"keygen":["100.4"],"t":["100.4"],"rsa":["100.4","100.5"],"pub文件":["100.5"],"就可以克隆ssh地址了":["100.6"],"num":["101.2"],"普通数字":["101.2"],"也可以通过函数返回布尔值":["101.3"],"可以在元素类型后面接上":["101.4"],"表示由此类型元素组成的一个数组":["101.4"],"ts":["101.4","101.14","102.11","103.4","105.3","106.1","108.0","110.11"],"ok":["101.5"],"增长枚举":["101.6"],"不能带有return":["101.8"],"也可以定义":["101.8"],"是所有类型的子类型":["101.9"],"就是说你可以把":["101.9"],"赋值给":["101.9"],"将不会有返回值":["101.10"],"但本身不会出错":["101.11"],"编译成功":["101.12"],"man":["101.13"],"sex":["101.13"],"方式二":["101.14"],"使用any临时断言":["101.14"],"somevalue":["101.14"],"作为对象的模板":["102.0"],"distance":["102.2"],"private":["102.3"],"在类型":["102.8"],"上不存在":["102.8"],"boolean":["102.9"],"personclass2":["102.9"],"fullname":["102.10"],"是指不包含具体实现的方法":["102.11"],"public":["102.11","118.3"],"匿名函数":["103.1"],"箭头函数":["103.1"],"myadd":["103.1"],"同样也可以有任意个":["103.4"],"编译器创建参数数组":["103.4"],"名字是你在省略号":["103.4"],"后面给定的名字":["103.4"],"你可以在函数体内使用这个数组":["103.4"],"在实现上我们要注意严格判断两个参数的类型是否相等":["103.5"],"而不能简单的写一个":["103.5"],"typeof":["103.5"],"不预先指定具体的类型":["104.0"],"u":["104.5"],"getvalue":["104.6"],"类型":["104.7","118.15"],"typescript":["105.1"],"的简称":["105.1"],"的基础上加入了类型系统":["105.2"],"让每个参数都有明确的意义":["105.2"],"从而带来了更加":["105.2"],"边解释边执行":["105.3"],"错误只有在运行的时候才能发现":["105.3"],"友好地在编辑器里提示错误":["105.5"],"如以前在":["105.6"],"global":["105.7"],"查看版本":["105.7"],"tsc":["105.7"],"interfaces":["106.0"],"这样写是会报错的":["106.1"],"因为我们在person定义了name":["106.1"],"stirng":["106.3"],"带有可选属性的接口与普通的接口定义差不多":["106.4"],"在可选属性名字定义的后面加一个":["106.4"],"符号":["106.4"],"propname":["106.5"],"允许添加新的任意属性":["106.5"],"编译正确":["107.1"],"declaration":["108.0"],"生成相应的":["108.0"],"sourcemap":["108.0"],"outfile":["108.0"],"将输出文件合并为一个文件":["108.0"],"outdir":["108.0"],"指定输出目录":["108.0"],"rootdir":["108.0"],"用来控制输出目录结构":["108.0"],"removecomments":["108.0"],"删除编译后的所有的注释":["108.0"],"noemit":["108.0"],"不生成输出文件":["108.0"],"importhelpers":["108.0"],"相当于":["109.1"],"定义函数别名":["109.2"],"eslint":["110.2"],"stylelint":["110.2"],"prettier":["110.2"],"来对我们的代码质量做检测和修复":["110.2"],"环境准备":["110.3"],"pnpm":["110.4"],"performant":["110.4"],"意味":["110.4"],"高性能的":["110.4"],"项目配置":["110.5"],"eslintrc":["110.6"],"cjs":["110.6"],"npx":["110.6"],"配置文件":["110.6"],"module":["110.6"],"exports":["110.6","121.7"],"运行环境":["110.6"],"运行更漂亮的eslint":["110.7"],"使prettier规则优先级更高":["110.7"],"eslint优先级低":["110.7"],"关闭规则":["110.8"],"warn":["110.8"],"打开的规则作为警告":["110.8"],"不影响代码执行":["110.8"],"规则作为一个错误":["110.8"],"代码不能执行":["110.8"],"界面报错":["110.8"],"要求使用":["110.8"],"而不是":["110.8"],"multiple":["110.8"],"empty":["110.8"],"styles":["110.9"],"目录下创建一个":["110.9"],"文件":["110.9","110.10","124.6","154.6"],"当然项目中需要用到清除默认样式":["110.9"],"因此在":["110.9"],"引入":["110.9"],"reset":["110.9"],"去创建我们需要":["110.10"],"数据与接口":["110.10"],"文件夹内部创建一个":["110.10"],"用户信息数据":["110.10"],"createuserlist":["110.10"],"userid":["110.10"],"avatar":["110.10"],"wpimg":["110.10"],"wallstcn":["110.10"],"f778738c":["110.10"],"e4f8":["110.10"],"b634":["110.10"],"56703b4acafe":["110.10"],"gif":["110.10"],"admin":["110.10"],"elmessage":["110.11"],"element":["110.11"],"plus":["110.11"],"创建axios实例":["110.11"],"loginformdata":["110.12"],"loginresponsedata":["110.12"],"userinforeponsedata":["110.12"],"项目用户相关的请求地址":["110.12"],"enum":["110.12"],"login":["110.12","122.14","125.5"],"配置对应的信息":["111.1"],"检查配置文件是否配置成功":["111.1"],"数据库的常用命令包括管理数据库和表的命令":["112.0"],"databases":["112.1"],"列出所有数据库":["112.1"],"column1":["112.1","116.5","116.6"],"向表中插入数据":["112.2"],"select":["112.2"],"提供了多种数据类型":["113.0"],"用于定义表中列":["113.0"],"int":["113.1"],"常用的整数类型":["113.1"],"个字符":["113.3"],"varchar":["113.3"],"ss":["113.4"],"datetime":["113.4"],"存储日期和时间":["113.4"],"存储枚举值":["113.5"],"从一个预定义的值列表中选择一个值":["113.5"],"tables":["114.0"],"组成":["114.0"],"每个表包含多个记录":["114.0"],"允许用户根据需要自由地修改和定制其源代码":["114.1"],"跨平台支持":["114.1"],"mysql可以在多个操作系统上运行":["114.1"],"包括windows":["114.1"],"macos和各种linux发行版":["114.1"],"服务器":["116.0"],"命令行客户端":["116.1"],"中创建一个新的数据库":["116.2"],"用于存储数据":["116.2"],"sql":["116.3","116.8"],"column2":["116.6"],"语句从表中删除数据":["116.8"],"shell":["117.1","117.5","125.5","125.7"],"movie":["117.3"],"chunk":["117.4"],"得到数据流":["117.4"],"通过字符串得到html结构":["117.4"],"美丽人生":["117.6"],"la":["117.6"],"vita":["117.6"],"è":["117.6"],"bella":["117.6"],"p2578474613":["117.6"],"辛德勒的名单":["117.6"],"schindler":["117.6"],"list":["117.6","118.4"],"p492406163":["117.6"],"星际穿越":["117.6"],"interstellar":["117.6"],"p2614988097":["117.6"],"盗梦空间":["117.6"],"inception":["117.6"],"平台":["118.0"],"并向客户端响应具体的内容":["118.2"],"req":["118.2","118.4","118.5","118.6","120.16","122.5","122.11","122.14"],"gender":["118.2"],"files":["118.3"],"next":["118.5","118.6"],"三个参数":["118.5"],"mw2":["118.7"],"调用了第二个局部生效的中间件":["118.7"],"两种定义局部中间件的方式":["118.7"],"错误级别的中间件":["118.8"],"用来捕获整个项目中发生的异常错误":["118.8"],"从而防止项目异常崩溃的问题":["118.8"],"错误级别中间件的处理函数中":["118.8"],"必须有":["118.8"],"个形参":["118.8"],"形参顺序从前到后分别是":["118.8"],"err":["118.8"],"错误级别的中间件必须注册在所有路由之后":["118.8"],"require":["118.8","120.3","120.6","121.9","121.19","122.2"],"代码跨域获取资源":["118.11"],"浏览器的同源安全策略默认会阻止网页":["118.11"],"跨域":["118.11"],"获取资源":["118.11"],"但如果接口服务器配置了":["118.11"],"个请求头":["118.12"],"accept":["118.12","118.14"],"language":["118.12","118.14"],"dpr":["118.12"],"downlink":["118.12"],"save":["118.12","123.0"],"请求头中包含自定义头部字段":["118.15"],"向服务器发送了":["118.15"],"runtime":["119.1"],"environment":["119.1"],"是一个基于":["119.1"],"的性能和效率非常高":["119.2"],"java":["119.2"],"语言是一个请求开启一个线程":["119.2"],"当请求处理完毕后就关闭这个线程":["119.2"],"时的劣势":["119.3"],"模式":["120.1"],"说明":["120.1"],"r":["120.1"],"读取文件":["120.1"],"文件不存在抛异常":["120.1"],"读取的数据":["120.3"],"如果未指定编码格式则返回一个":["120.3"],"buffer":["120.3"],"监听流的开启和关闭":["120.4"],"这几个监听不是必须的":["120.4"],"once":["120.4","120.7"],"open":["120.4"],"可读流打开了":["120.4"],"flag":["120.6"],"若是字符串则指定编码格式":["120.6"],"回调函数":["120.6"],"ws":["120.7"],"createwritestream":["120.7"],"hello3":["120.7"],"txt":["120.7"],"进制的形式显示":["120.8"],"每一个元素范围是":["120.8"],"00":["120.8"],"ff":["120.8"],"即":["120.8"],"原因":["120.9"],"代码在运行的时候":["120.9"],"会以执行":["120.9"],"命令时所处的目录":["120.9"],"截断文件":["120.10"],"truncate":["120.10"],"len":["120.10"],"truncatesync":["120.10"],"建立目录":["120.10"],"mkdir":["120.10"],"mode":["120.10"],"模块是":["120.11","120.15"],"会被忽略":["120.12"],"pathstr":["120.12"],"ext":["120.13"],"文件路径":["120.13"],"文件扩展名":["120.13"],"fpath":["120.14"],"not":["120.17"],"found":["120.17"],"判断用户请求的是否为":["120.17"],"模块是可组合":["121.2"],"分解和更换的单元":["121.2"],"提高维护性":["121.3"],"内置模块":["121.5"],"和函数作用域类似":["121.6"],"在自定义模块中定义的变量":["121.6"],"将模块内的成员共享出去":["121.7"],"变量代表当前模块":["121.8"],"导入自定义模块时":["121.11"],"若省略文件扩展名":["121.11"],"则":["121.11","121.21"],"进行加载":["121.12","121.22"],"直到":["121.12"],"文件系统的根目录":["121.12"],"假设在":["121.12","121.22"],"作为":["121.13"],"中的内置模块与自定义模块":["121.15"],"包是由第三方个人或团队开发出来的":["121.15"],"免费供所有人使用":["121.15"],"包的元整名称":["121.16"],"registry":["121.17"],"查看当前包镜像源":["121.17"],"包的入口文件":["121.18"],"readme":["121.18"],"md":["121.18"],"包的说明文档":["121.18"],"模块的代码只会被执行一次":["121.19"],"这样的路径标识符":["121.21"],"会把它当作内置模块或第三方模块进行加载":["121.21"],"直到文件系统的根目录":["121.22"],"users":["121.22"],"lemomn":["121.22"],"project":["121.22"],"并寻找":["121.23"],"属性值作为":["121.23"],"加载的入口":["121.23"],"db":["122.2"],"affectedrows":["122.3"],"插入成功":["122.3"],"向表中新增数据时":["122.3"],"如果数据对象的每个属性和数据表的字段一一对应":["122.3"],"则可以通过如下方式快速插入数据":["122.3"],"bruce":["122.3","122.5","122.14"],"调用接口":["122.6"],"优点":["122.6"],"开发体验好":["122.6"],"前端专业页面开发":["122.6"],"后端专注接口开发":["122.6"],"且需要良好的":["122.7"],"seo":["122.7"],"saveuninitalized":["122.11"],"向":["122.11"],"中存数据":["122.11"],"中间件配置成功后":["122.11"],"可通过":["122.11"],"访问":["122.11"],"存储用户信息":["122.11"],"不推荐使用":["122.13"],"认证机制":["122.13"],"工作原理图":["122.13"],"用户的信息通过":["122.13"],"token":["122.13"],"字符串的形式":["122.13"],"密钥为任意字符串":["122.14"],"secretkey":["122.14"],"登录成功":["122.14"],"sign":["122.14"],"添加开发依赖项":["123.0"],"dev":["123.0"],"移除依赖项":["123.0"],"uninstall":["123.0","124.3"],"manager":["124.0"],"一起安装的":["124.2"],"当你安装":["124.2"],"安装指定的包":["124.3"],"安装项目中":["124.3"],"文件中列出的所有依赖项":["124.3"],"脚本和其他元数据":["124.4"],"可以通过运行":["124.4"],"命令来初始化一个新的项目":["124.4"],"文件的":["124.5"],"dependencies":["124.5"],"本教程将向你展示如何发布自己的包到":["125.0"],"如果你还没有":["125.1"],"在你的项目目录中":["125.2"],"打开终端":["125.2"],"在项目目录中":["125.3"],"这个文件由":["125.4"],"按照提示提供你的用户名":["125.5"],"在你的项目中":["125.6"],"修改代码并增加新的功能或修复":["125.6"],"然后":["126.1"],"可以按照以下步骤安装":["126.1"],"运行以下命令来安装依赖项":["126.2"],"将读取项目根目录下的":["126.2"],"并下载安装所有列出的依赖项":["126.2"],"中的一个元素":["127.1"],"允许使用":["127.1"],"轴向右延伸":["127.3"],"但在大多数情况下":["127.4"],"的绘图上下文进行绘制是最基本和有效的方法":["127.4"],"文本":["127.5"],"图像":["127.5"],"矩形和其他形状等":["127.5"],"绘图元素可以通过":["127.5"],"陈述观点":["127.6"],"以及制作各种绚丽的视觉展示等":["127.6"],"您可以通过":["127.6"],"脚本使":["127.7"],"绘制出具有动态效果的图像和视觉艺术也显得非常合适":["127.7"],"html5":["127.8"],"中提供了许多优势":["127.8"],"但也存在一些限制":["127.8"],"图像旋转":["128.0"],"math":["128.1","153.3"],"pi":["128.1"],"表示放大十倍":["128.2"],"fillrect":["128.2","128.5","133.2","135.2"],"轴和":["128.3"],"轴移动的距离":["128.3"],"单位像素":["128.3"],"默认值1":["128.4"],"单位倍数":["128.4"],"水平倾斜":["128.4"],"默认值0":["128.4"],"单位弧度":["128.4"],"垂直倾斜":["128.4"],"源":["129.0"],"绘制在另一个物体":["129.0"],"目标":["129.0"],"只会显示目标图像之外源图像部分":["129.1"],"destination":["129.1"],"在源图像上方显示目标图像":["129.1"],"在源图像顶部显示目标图像":["129.1"],"源图像之外的目标图像部分不会被显示":["129.1"],"htmlcanvaselement":["130.1"],"找到画布":["130.1"],"moveto":["130.2"],"把路径移动到画布中的指定点":["130.2"],"不创建线条":["130.2"],"高度为线条宽度的一半":["131.1"],"linejoin":["131.1","138.3"],"指定线段交点的样式":["131.1"],"交点为扇形":["131.1"],"bevel":["131.1"],"交点为三角形底边":["131.1"],"miter":["131.1"],"从左到右的渐变等等":["131.2"],"该方法的返回值是一个":["131.2"],"canvasgradient":["131.2"],"该对象只有一个":["131.2"],"addcolorstop":["131.2"],"方向":["131.2"],"用来指定渐变点的颜色":["131.2"],"方法接受两个参数":["131.2"],"第一个参数是":["131.2"],"之间的一个位置量":["131.2"],"表示起点":["131.2"],"表示终点":["131.2"],"第二个参数是一个字符串":["131.2","131.3"],"blob":["131.3"],"有四个可能的值":["131.3"],"分别是":["131.3"],"repeat":["131.3"],"双向重复":["131.3"],"水平重复":["131.3"],"shadowoffsetx":["131.4"],"阴影的水平位移":["131.4"],"文字":["133.0","133.6"],"路径":["133.2"],"stroke":["133.3"],"closepath":["133.3"],"嘴巴":["133.3"],"sy":["133.5"],"swidth":["133.5"],"sheight":["133.5"],"获取图片":["133.5"],"textbaseline":["133.6"],"文本的垂直位置":["133.6"],"alphabetic":["133.6"],"大小":["133.6"],"字体":["133.6"],"100px":["133.6"],"microsoft":["133.6"],"yahei":["133.6"],"填充渲染文字":["133.6"],"控制点2":["134.2"],"again":["135.1"],"获取画笔":["135.2"],"getcontext":["135.2"],"2d":["135.2"],"fillstyle":["135.2"],"ccc":["135.2"],"restore":["136.3"],"绘制分钟的刻度":["136.3"],"canvas":["136.4","137.2","141.1","151.0"],"ref":["137.2"],"连接初圆润":["138.3"],"细线条":["138.4"],"savebtn":["138.4"],"保存签名":["138.4"],"change":["138.4"],"e":["140.1"],"0xff0000":["140.2"],"drawrect":["140.2"],"技术的快速":["141.1"],"利用":["141.3"],"webgl":["141.3","151.0"],"pixijs":["141.4","141.6"],"提供了一系列强大的功能":["141.5"],"包括精灵":["141.5"],"加载一个纹理":["141.7"],"loader":["141.7"],"image":["141.7","154.7"],"devicepixelratio":["142.2","143.1","145.1"],"像素比":["142.2","143.1","145.1"],"antialias":["142.2"],"抗锯齿":["142.2"],"将应用画布添加到dom中":["142.2","143.1","145.1"],"innerheight":["143.1"],"backgroundcolor":["143.1"],"0x1099bb":["143.1","145.1"],"resolution":["143.1","145.1"],"screen":["143.2","146.3"],"blur":["145.2"],"将模糊滤镜添加到精灵上":["145.2"],"sprite":["145.2"],"outlinefilter":["145.3"],"0xffff00":["145.3"],"texture":["146.2"],"pixi":["146.2"],"设置位置":["146.3"],"ticker":["146.4"],"beginfill":["147.1"],"0x66ccff":["147.1"],"0x660000":["147.2","147.5"],"参数一个数组":["147.2"],"数组中的每一个元素是一个点的坐标":["147.2"],"每两个元素是一个点的x坐标和y坐标":["147.2"],"绘制圆角矩形":["147.3"],"x坐标":["147.4"],"y坐标":["147.4"],"半径":["147.4"],"其实角度":["147.4"],"宽度":["147.5"],"颜色":["147.5"],"assets":["149.0","149.1"],"用于加载资源":["149.0"],"pic1":["149.1"],"pic":["149.1","149.2"],"rmb":["149.1","149.2"],"bdstatic":["149.1","149.2"],"05b0ea405c9e690ab51627853a13de56":["149.1","149.2"],"jpeg":["149.1","149.2"],"pic2":["149.1","149.2"],"img14":["149.1","149.2"],"360buyimg":["149.1","149.2"],"jfs":["149.2"],"t1":["149.2"],"5c1b0581e1fa6c1c3":["149.2"],"58519cee2a0039e0":["149.2"],"jpg":["149.2"],"是一个基于文本的开放网络标准":["150.1"],"用来定义用于网络的矢量图形":["150.1"],"是看不出效果的":["150.3"],"cx":["150.5","150.6"],"cy":["150.5"],"ellipse":["150.6"],"points":["150.7"],"进行渲染":["151.0"],"它是一种在":["151.0"],"浏览器中渲染":["151.0"],"提供了多种渲染器":["151.0"],"包括基本的":["151.0"],"渲染器和":["151.0"],"css3d":["151.0"],"visual":["152.3"],"orbitcontrols":["152.6"],"或者自动旋转等效果":["152.8"],"就需要加入controls":["152.8"],"scene2":["152.9"],"snippet":["152.9","152.12"],"scene":["152.12"],"cube":["153.1"],"components":["153.5"],"transform":["153.5"],"lemon":["154.0"],"建议勾选":["154.1"],"scripts":["154.2"],"docs":["154.2","154.4"],"build":["154.2"],"site":["154.3"],"文件就是我们的配置文件":["154.6"],"新建一个":["154.6"],"lastupdated":["154.7"],"hero":["154.7"],"组件库名称":["154.7"],"组件库文本":["154.7"],"tagline":["154.7"],"组件库副标题描述":["154.7"],"description":["154.9"],"themeconfig":["154.9"],"sitetitle":["154.9"],"左上角的":["154.9"],"logo":["154.9"],"关于侧边栏":["154.10"],"collapsible":["154.10"],"dist":["154.11"],"如果是发布到自定义域名":["154.11"],"echo":["154.11"],"cname":["154.11"],"git":["154.11"]},{"0":["5.6","9.3","9.4","9.5","9.7","9.10","16.12","18.22","31.3","31.8","32.15","34.4","34.5","39.4","41.31","49.8","54.2","69.3","69.4","69.6","76.2","84.3","84.5","86.14","104.6","121.18","122.2","128.3","147.1","147.2"],"1":["9.5","9.7","13.1","14.5","14.8","14.12","14.15","16.5","16.14","21.2","30.19","35.2","35.3","35.4","48.17","48.20","49.9","49.10","54.2","76.2","88.9","101.3","101.4","120.3","128.5"],"2":["10.3","13.1","13.13","14.2","14.5","14.8","14.15","18.25","19.1","31.1","35.2","35.3","35.4","48.19","48.20","49.9","49.10","49.11","50.3","50.7","50.8","68.3","76.3","86.10","88.9","98.1","99.1","99.15","99.19","113.1","120.6","125.5","125.6","146.3","151.0","153.2"],"3":["13.5","13.13","13.14","14.9","15.4","18.25","35.2","35.3","35.4","35.6","39.1","39.3","44.4","48.19","48.20","48.28","49.10","50.3","58.0","70.0","87.1","92.6","92.8","95.8","95.12","99.14","99.21","122.3","153.1"],"4":["9.14","9.16","10.3","17.10","35.2","35.3","35.4","35.6","48.15","48.19","48.23","48.28","48.29","48.30","65.4","69.1","70.0","86.10","95.8","99.7","110.7","122.14","142.2","153.3"],"5":["35.2","35.3","35.4","36.6","44.3","48.2","48.23","48.24","48.28","48.29","48.30","67.1","69.1","99.8"],"6":["11.8","67.1","95.8"],"7":["95.12"],"8":["30.19","87.2","95.12","120.3"],"10":["48.24","53.5","95.12","131.1"],"14":["84.5"],"15":["48.24"],"16":["53.2"],"20":["15.6","54.18","103.3","133.3","150.9"],"23":["11.16","81.1"],"29":["48.21","122.5"],"30":["5.2","7.2","9.6","73.8","92.12","92.16","92.19"],"32":["30.19"],"34":["11.16","53.13"],"35":["149.1"],"40":["150.7"],"42":["87.2","101.7"],"45":["153.5"],"50":["133.6","150.3"],"59":["81.1"],"70":["128.1","150.7"],"80":["75.4","150.7"],"95":["150.5"],"100":["128.2","133.6","134.1","147.2","150.6","150.8"],"120":["150.8"],"123":["41.4","86.14","101.1","106.7"],"127":["122.2"],"147":["113.1"],"150":["140.2"],"180":["128.1"],"200":["131.2","133.6","150.4"],"250":["133.3"],"255":["120.8"],"300":["150.9"],"308":["87.2"],"324":["87.1"],"345":["87.2"],"360":["86.13"],"403":["98.4"],"404":["98.4"],"420":["24.11"],"483":["113.1"],"647":["113.1"],"648":["113.1"],"1000":["39.5"],"1970":["84.1"],"2023":["81.1"],"2224":["149.1"],"5000":["110.11"],"12087":["149.1"],"23739":["149.1"],"111111":["110.10"],"11111111":["120.8"],"img":["0.0","133.5"],"age":["5.1","5.3","7.2","8.22","32.5","32.8","32.11","55.3","92.4","92.12","92.16","92.19","102.11","106.1","106.2"],"this":["5.1","6.4","8.9","10.18","14.17","31.4","31.8","31.11","32.5","32.7","32.8","32.9","36.2","36.4","36.5","37.9","67.4","67.5","72.7","72.9","101.14"],"person2":["5.2"],"name":["5.3","7.2","8.9","8.11","8.14","15.9","29.23","32.5","41.6","41.17","41.20","72.3","72.9","92.2","92.4","92.18","93.1","102.9","116.4","116.6","126.2","138.4"],"major":["5.3"],"super":["5.3","31.4","34.3","34.5","34.6","36.4","102.6"],"sayhello":["5.4","8.12","89.2","90.1"],"console":["5.4","7.2","11.9","13.8","13.9","13.15","15.2","48.26","50.8","52.5","54.3","54.5","54.7","54.18","65.3","71.5","72.3","72.7","72.8","72.9","74.2","74.3","77.9","82.6","83.6","87.2","89.2","90.1","92.20","98.6","101.11","103.4","104.6","110.8","120.7","120.12","149.2"],"multiply":["5.5"],"if":["5.6","29.14","31.11","36.1","63.8","66.2","68.2","68.7","69.2","73.5","120.3","120.17","130.1"],"throw":["5.6","118.8"],"new":["5.6","7.2","7.4","13.12","72.2","84.4","90.2","118.8","133.5","136.3","143.2","152.7"],"error":["5.6","71.3","71.4","101.5","102.8","118.8"],"半径不能是负的":["5.6"],"入门":["6.1"],"js":["6.2","7.2","13.4","38.2","53.5","54.5","54.10","66.1","68.5","77.2","77.3","84.2","86.5","86.6","86.8","86.9","86.11","86.12","92.4","95.4","95.10","95.12","95.14","97.4","120.11","120.15","121.11","121.22","124.1","128.3","131.4","152.9","152.12"],"的基础":["6.2"],"并且也被其他编程语言":["6.2"],"如":["6.2","10.10","29.14","40.1","43.14","68.0","88.11"],"的语言标准":["6.3"],"还在此基础上新增了一些拓展":["6.3"],"使得我们可以在浏览器可以操作":["6.3"],"dom":["6.3","150.1"],"bom":["6.3"],"在":["6.3","28.1","29.8","39.3","46.3","63.5","72.1"],"let":["6.4","11.12","11.19","41.6","41.8","41.19","42.2","49.2","49.10","53.5","54.5","54.9","54.10","69.6","101.8","104.6","133.5"],"和":["6.4","27.2","39.2","44.5","53.6","84.4","85.6","101.8"],"const":["6.4","7.2","8.13","30.2","30.6","30.8","30.22","32.5","35.2","35.3","35.4","35.5","36.2","36.3","36.4","36.5","38.9","41.4","41.31","49.9","66.1","87.2","88.8","90.2","92.9","92.17","93.1","95.12","98.2","101.13","102.10","104.5","118.10"],"关键字":["6.4","16.12","18.16","102.0"],"提供块级作用域":["6.4"],"支持箭头函数":["6.4"],"简化函数定义和":["6.4"],"的处理":["6.4"],"新增模板字符串":["6.4"],"支持多行字符串和插入表达式":["6.4"],"引入了解构赋值":["6.4"],"可以方便地从数组或对象中提取值":["6.4"],"提供了类和模块化的支持":["6.4"],"更接近传统面向对象编程":["6.4"],"添加了":["6.4"],"promise":["6.4"],"用于更好地处理异步操作":["6.4"],"for":["6.4","50.0"],"of":["6.4","14.13","14.14"],"循环":["6.4"],"用于遍历可迭代对象":["6.4"],"引入":["6.4"],"symbol":["6.4"],"类型":["6.4","101.8"],"用于创建唯一的对象属性名":["6.4"],"中一种强大的数据结构":["7.1"],"对每个键值对执行回调函数":["7.2"],"mymap":["7.2","7.4"],"添加键值对":["7.2"],"john":["7.2","8.14","65.3","72.2","72.3","93.1"],"获取值":["7.2"],"log":["7.2","8.14","11.9","13.9","13.11","13.15","15.2","48.26","50.8","51.1","52.5","54.3","54.7","54.14","54.18","65.1","71.5","72.7","72.8","72.9","74.2","74.3","74.4","77.6","77.9","82.6","83.6","87.2","89.2","90.1","92.20","95.11","103.4","104.6","106.7","118.6","120.7","120.12","140.1","149.2"],"mymap2":["7.5"],"dos":["7.6"],"合并两个":["7.6"],"对象时":["7.6"],"代码组织方式会变得不够优雅和高效":["8.1"],"代码量庞大":["8.2"],"文件众多":["8.2"],"从而避免了命名冲突的问题":["8.3"],"开发者可以更容易地理解每个模块的功能":["8.4"],"只需要导入相应的模块":["8.5"],"export":["8.6","33.10","39.3"],"module1":["8.7","8.13","8.23"],"constructor":["8.9","34.5","34.6","102.7"],"我们可以将其他模块中的变量":["8.10"],"输出":["8.14","10.16","10.17","67.1","72.2","74.1","74.2","74.3","74.4","82.6","83.6","87.2"],"main":["8.16","8.19","8.22","39.3"],"hello":["8.17","11.14","12.4","12.5","30.2","32.7","51.1","88.8","89.2","90.1","90.2","92.7","118.7","120.6"],"my":["8.18","12.4","12.5","37.4","37.17","42.8","89.2"],"is":["8.18","10.17","12.2","12.5","32.9","43.15","72.6","72.8","101.14","120.16"],"import":["8.19","8.21","8.23","32.14","110.9"],"myname":["8.19"],"避免命名冲突或提高代码可读性":["8.20"],"as":["8.22"],"then":["8.23","71.5","98.6","149.1"],"需要注意以下几点":["8.24"],"strict":["8.27","108.0"],"每个模块都有自己的作用域":["8.28"],"并且可以与其他模块进行交互":["8.28"],"模块化的意义在于避免命名冲突":["8.28"],"中的元素只会":["9.1"],"可以连写":["9.3"],"add":["9.5","9.6","9.10","99.18","118.4","126.2"],"forty":["9.8"],"two":["9.8"],"方法相同":["9.9"],"myarray":["9.12"],"filter":["9.15","39.6"],"x":["9.15","10.12","13.13","44.4","118.12","133.6","138.3"],"has":["9.15"],"就用默认值":["10.2"],"只有这两种情况下":["10.4"],"默认值才会生效":["10.4"],"上面代码指定":["10.5"],"如果没有提供参数":["10.5"],"函数":["10.5","95.8"],"的参数默认为一个空对象":["10.5"],"下面是另一个解构赋值默认值的例子":["10.5"],"fetch":["10.5"],"url":["10.5","58.0","63.8","88.11"],"body":["10.5","18.23","18.24","122.11","143.1"],"z":["10.6","10.12"],"报错":["10.7","101.12"],"因为这样相当于传了一个":["10.7"],"undefined":["10.7"],"不符合解构赋值":["10.7"],"函数默认值":["10.7"],"解构赋值":["10.7"],"解构赋值默认值":["10.7"],"看起来和展开语法完全相同都是使用":["10.9"],"的语法糖":["10.9"],"属性表示的是实参的长度":["10.10"],"即调用函数的时候传入的参数个数":["10.10"],"这样我们就对":["10.10"],"对象有了一定的了解":["10.10"],"image":["10.10"],"20220826180356855":["10.10"],"的开发模式下":["10.10"],"想要使用传递的参数":["10.10"],"则需要按位置把对应的参数取出来":["10.10"],"尽管":["10.10"],"是一个类数组且可遍历的变量":["10.10"],"但它终究不是数组":["10.10"],"它不支持数组方法":["10.10"],"因此我们不能调用":["10.10"],"foreeach":["10.10"],"等数组的方法":["10.10"],"需要使用一些特殊的方法转换成数组使用":["10.10"],"arguments":["10.11"],"获取实际参数":["10.11"],"剩余参数是一个":["10.11"],"与对象解构赋值结合":["10.12"],"y":["10.12","131.3","133.6","138.3","146.3","147.3","150.4"],"会引入剩余参数的概念":["10.13"],"可以看到剩余参数所带来的好处":["10.13"],"箭头函数通常与其他":["10.14"],"函数体在箭头后面的花括号内":["10.15"],"如果函数体只有一行代码并且返回一个表达式":["10.15"],"可以省略花括号和":["10.15"],"多个参数":["10.16"],"因为箭头函数会继承外层作用域的":["10.18"],"可能导致":["10.18"],"或":["10.19","33.8"],"后面加一个逗号":["10.19"],"就会报错":["10.19"],"如果像上面这样":["10.19"],"将参数写成多行":["10.19"],"err":["10.20"],"处理错误":["10.20"],"上面代码中":["10.20","52.2","128.2"],"改":["11.1","48.5"],"除了常用":["11.2"],"world":["11.3","11.6","52.2","88.8"],"trimleft":["11.5"],"trimmedstringvalue":["11.6"],"stringvalue":["11.7","11.12"],"na":["11.7"],"abcde":["11.11"],"true":["11.13","13.21","63.8","92.15","101.7","110.6","135.2","138.3"],"str":["11.14","88.8","120.16"],"match":["11.17"],"bat":["11.18"],"sat":["11.18","11.20"],"fat":["11.18","11.20"],"text":["11.19","78.2","118.12","133.6"],"cat":["11.19","89.3"],"也被称为模板字面量":["12.1"],"and":["12.2","12.3","12.5","120.16"],"i":["12.2","69.3","69.4","69.6","88.3","89.1","90.1","90.2","121.16"],"multiple":["12.3"],"lines":["12.3","110.8"],"maintains":["12.3"],"the":["12.3"],"object":["13.1","13.4","13.12","23.2","66.2","72.4"],"除了属性简写":["13.1"],"sex2":["13.4"],"注意":["13.4","16.5","52.13","101.3","154.9"],"属性名表达式如果是一个对象":["13.4"],"默认情况下会自动将对象转为字符串":["13.4"],"这一点要特别小心":["13.4"],"合法标识符":["13.5"],"能用点语法优先使用点语法":["13.5"],"function":["13.6","30.22","41.31","50.11","63.9","66.2","68.5","72.7","73.7","77.2","77.7","77.9","92.4","94.0","97.4","120.3","120.6","120.7","135.2","138.3","141.7"],"上面三种":["13.6"],"的用法都会报错":["13.6"],"因为对于":["13.6"],"javascript":["13.6","29.0","30.13","35.1","37.1","38.8","53.1","82.2","82.3","83.2","83.3","87.2","88.4","141.1"],"引擎来说":["13.6"],"taste":["13.8"],"甜":["13.8"],"新对象拥有全部属性":["13.9"],"相同属性":["13.9"],"后者覆盖前者":["13.9"],"e":["13.13","15.2","15.3","77.9","120.12"],"use":["13.15","44.4","97.4","116.3"],"写字":["13.15"],"c":["13.17","14.11","15.3","15.4","51.0","92.6","100.4","120.12","120.14"],"jerry":["13.18"],"算法":["13.20"],"用来解决这个问题":["13.20"],"就是部署这个算法的新方法":["13.20"],"它用来比较两个值是否严格相等":["13.20"],"与严格比较运算符":["13.20"],"的行为基本一致":["13.20"],"直接合并到了第一个参数中":["13.21"],"返回的就是合并后的对象":["13.21"],"可以合并多个对象":["13.21"],"第一个参数使用一个空对象来实现合并返回一个新对象的目的":["13.21"],"array":["13.22","104.3"],"iterator":["13.22"],"数组的":["13.22"],"属性名无法转换为数值":["14.3"],"返回长度为":["14.3"],"key0":["14.4"],"value0":["14.4"],"abc":["14.6","101.12","102.7"],"参数1":["14.9","14.15"],"用来填充的值":["14.10"],"参数2":["14.10","14.17"],"被填充的起始索引":["14.10"],"参数3":["14.10"],"a":["14.11","14.13","14.14","15.3","15.5","16.8","49.9","99.6","101.14","102.9","106.5","106.6","117.6","120.14","121.22","154.1"],"b":["14.11","15.4","15.5","49.9","53.5","120.12","120.14"],"d":["14.11","120.12"],"不使用":["14.12"],"包含的指定值":["14.15"],"原数组":["14.17"],"指定遍历函数中":["14.17"],"我们可以从数组或对象中提取数据":["15.0"],"并将其赋值给对应的变量":["15.0"],"rest":["15.5"],"country":["15.10"],"unknown":["15.10"],"padding":["16.1"],"不能涉及差异化样式":["16.2"],"color":["16.3","138.4"],"css":["16.4","17.0","17.1","17.5","17.6","17.7","18.3","18.9","20.1","131.2","150.1"],"orange":["16.5"],"tip":["16.5","49.1","49.3","76.4","113.5"],"选择器3":["16.6"],"选择器":["16.6","19.0"],"li":["16.7","32.10","33.11","33.13","75.5"],"good":["16.9"],"hover":["16.11"],"光标经过链接的样式":["16.11"],"的第":["16.12"],"个":["16.12"],"可以是数字":["16.12"],"even":["16.12"],"odd":["16.12"],"公式":["16.12"],"从":["16.12","86.4","108.0"],"开始":["16.12"],"size":["16.14","79.1"],"伪元素清除浮动":["16.14"],"额外标签法":["16.14"],"隔墙法":["16.14"],"在浮动元素后面添加一个块级标签":["16.14"],"如div":["16.14"],"并设置":["16.14"],"clear":["16.14"],"both":["16.14"],"div":["16.14","18.23","18.24","27.2","27.3","27.5","30.6","30.8","37.16","42.4","75.1","135.1"],"工具":["17.0"],"即可":["17.1"],"水平排列":["17.2"],"默认值":["17.2"],"reverse":["17.2"],"水平逆向排列":["17.2"],"项目平均分布在主轴上":["17.3"],"两端不留空白":["17.3"],"around":["17.3","17.10"],"两端留有空白":["17.3"],"指定":["17.4"],"项目是否换行":["17.4"],"nowrap":["17.4"],"的缩写":["17.5"],"属性可以控制项目在空间不足时的缩小比例":["17.6"],"则会参考该值进行布局":["17.7"],"嵌套的":["17.8"],"容器有自己的主轴和交叉轴":["17.8"],"end":["17.9","117.4","120.4"],"多行项目靠交叉轴末尾位置对齐":["17.9"],"center":["17.9","20.7"],"多行项目在交叉轴上居中对齐":["17.9"],"space":["17.9","21.1"],"between":["17.9"],"通过设置":["17.10"],"属性为":["17.10"],"实现项目平均分布":["17.10"],"columns":["18.1","114.0"],"通过将网格容器":["18.1"],"container":["18.1","18.3","18.23","18.24"],"我们可以通过设置":["18.2"],"display":["18.2","20.8","21.2"],"rows":["18.3"],"属性来定义列和行的大小和结构":["18.3"],"span":["18.4","18.16","43.10"],"允许一个网格项跨越多个行或列":["18.4"],"我们可以使用":["18.4"],"布局提供了一系列强大的属性":["18.5"],"可以指定固定大小":["18.6"],"如像素":["18.6"],"百分比等":["18.6"],"也可以使用":["18.6"],"fr":["18.6"],"单位表示可用空间的比例分配":["18.6"],"header":["18.7","18.24","122.13"],"areas":["18.8"],"的缩写属性":["18.8"],"可以通过一个属性同时定义列":["18.8"],"行和区域":["18.8"],"可以使用两个值表示行和列的间隔":["18.9"],"分别定义网格列和行之间的间隔":["18.10"],"与":["18.10","39.3","55.8","82.0","83.0","108.0"],"定义了当网格容器中的网格项目无法放入先前定义的网格轨道时":["18.11"],"自动创建的额外列和行的大小":["18.11"],"可以指定固定大小或使用":["18.11"],"默认值是":["18.12"],"row":["18.12"],"表示按照行进行放置":["18.12"],"用于在网格项目中定义对齐方式":["18.13"],"控制项目在列轴上的对齐方式":["18.13"],"控制网格项目在列轴上的对齐方式":["18.14"],"用于定义单个网格项目自身在网格单元格中的对齐方式":["18.15"],"用于将网格项目放置在指定的列和行位置":["18.16"],"可以使用数字":["18.16"],"布局":["18.17"],"100px":["18.18"],"auto":["18.18","23.2"],"1fr":["18.18","18.19"],"定义三列":["18.18","18.19"],"第一列宽度为":["18.18"],"repeat":["18.19"],"每列宽度为1fr":["18.19"],"width":["18.20","20.1","21.2","24.11","29.23","41.31","137.2","146.1"],"768px":["18.20"],"initial":["18.22","29.23","76.2"],"scale":["18.22","29.23","76.2"],"title":["18.22","43.6","76.2"],"simple":["18.22"],"layout":["18.22","18.23","18.24"],"class":["18.23","18.24","30.11","30.20","31.9","32.14","34.6","44.4","75.1","102.0","102.9"],"布局和":["18.26"],"布局适用于复杂的网页布局":["18.27"],"如主页布局":["18.27"],"支持网格区域的命名":["18.28"],"更具语义性":["18.28"],"flexbox":["18.28"],"grid":["18.29","18.31"],"中的顺序一致":["18.30"],"可以使用":["18.30","30.13","36.6","79.0"],"order":["18.30"],"布局在现代浏览器中得到了很好的支持":["18.31"],"布局强大":["18.32"],"但在某些情况下可能会对性能产生一定影响":["18.32"],"以提高代码的可读性和维护性":["18.33"],"嵌套使用":["18.33"],"id":["19.0","33.5","38.6"],"比较规则":["19.1"],"按照":["19.1"],"从左到右":["19.1"],"的顺序":["19.1"],"依次比较大小":["19.1"],"当前位胜出后":["19.1"],"后面的不再对比":["19.1"],"例如":["19.1","77.1","127.8"],"height":["20.3","21.3","146.3"],"100vh":["20.3"],"position":["20.5"],"absolute":["20.5"],"translate":["20.6"],"content":["20.7","29.23","98.3"],"000":["21.1"],"white":["21.1"],"400px":["21.2"],"设置元素的宽度":["21.2"],"box":["21.2","41.30","75.1"],"60px":["21.3"],"line":["21.3"],"30px":["21.3"],"track":["22.0"],"没有滑块":["22.0"],"20px":["23.1"],"top":["23.1","42.11"],"fit":["23.2"],"cover":["23.2"],"mpeg":["24.0","24.2"],"您的浏览器不支持音频播放":["24.0"],"视频示例":["24.0"],"video":["24.0"],"定义了声音内容":["24.5"],"source":["24.5","24.6","24.11"],"定义一个视频":["24.6"],"用户控制界面":["24.7"],"poster":["24.7"],"视频封面":["24.7"],"autoplay":["24.7"],"播放":["24.8"],"runoob":["24.10","24.11"],"com":["24.10","24.11","71.5"],"try":["24.10","24.11","111.0"],"src":["24.11","26.4","37.7","51.4","133.5"],"https":["24.11","26.3","71.5","145.1","154.11"],"www":["24.11","118.12"],"demo":["24.11"],"markup":["25.0"],"文档类型声明":["25.1"],"告诉浏览器文档使用的":["25.1"],"以下是一些常用的":["25.2"],"h1":["25.2","30.2","30.14","30.15","42.9","122.5"],"到":["25.2"],"h6":["25.2"],"标题标签":["25.2"],"用于定义标题":["25.2","27.1"],"article":["25.3"],"等":["25.3","79.1"],"从而实现更丰富的用户体验":["25.4"],"在进阶阶段":["25.4"],"可以学习响应式设计":["25.4"],"web":["25.4"],"accessibility":["25.4"],"这是h2级别的标题":["26.1"],"h3":["26.1"],"这是一个段落文本":["26.2"],"列表项1":["26.5","26.6"],"这是一个div容器":["26.7"],"style":["26.8","41.28","44.4","135.1"],"表头1":["26.9"],"点击我":["26.12"],"username":["26.13","122.5","122.14","154.11"],"用户名":["26.13"],"首页":["26.14","120.17"],"mp4":["26.15"],"controls":["26.15","152.8"],"它们由尖括号包围":["27.0"],"为最高级别的标题":["27.1"],"为最低级别":["27.1"],"但用于内联元素的包裹":["27.2"],"strong":["27.2"],"标签中包裹这个":["27.3"],"custom":["27.5"],"example":["27.5","71.5"],"然后自动填充以前保存的密码":["28.1"],"这里推荐一种特别简单的方法解决这个问题":["28.1"],"属性":["28.1","52.12","78.2"],"的设计理念是声明式编程":["29.1"],"开发者只需描述":["29.1"],"应该如何在不同状态下进行渲染":["29.1"],"而无需关心实现的细节":["29.1"],"每个组件具有自己的状态和行为":["29.3"],"这种组件化的开发模式使得代码更易于维护":["29.3"],"的结构":["29.4"],"当组件的状态发生变化时":["29.4","29.11"],"会通过比较新旧虚拟":["29.4"],"即数据只能从父组件流向子组件":["29.5"],"应用程序":["29.6"],"比如":["29.6","110.6"],"我们需要掌握以下几个核心概念":["29.7"],"函数组件是一种简单的声明式组件":["29.8"],"类组件具有更多的功能":["29.8"],"如生命周期方法和状态管理":["29.8"],"代码中编写类似":["29.9"],"的标记":["29.9","30.1"],"通过":["29.10","118.12"],"更新和卸载阶段":["29.12"],"在这些生命周期方法中":["29.12"],"通过事件处理函数":["29.13"],"我们可以执行特定的操作":["29.13"],"如更新组件的状态":["29.13"],"map":["29.15","32.10","40.2"],"方法遍历数组":["29.15"],"我们可以通过对表单元素的事件监听和状态更新":["29.16"],"来收集用户的输入并实时更新组件的状态":["29.16"],"中共享状态的技术":["29.17"],"中实现组件的复用逻辑":["29.18"],"而不必通过":["29.19"],"props":["29.19","34.3","34.5","34.6","39.2"],"用于在函数组件中添加状态":["29.20"],"副作用和其他":["29.20"],"来写一个":["29.21"],"这个包":["29.22"],"是专门用来创建":["29.22"],"组件":["29.22"],"组件生命周期等":["29.22"],"compatible":["29.23"],"ie":["29.23"],"edge":["29.23"],"viewport":["29.23"],"device":["29.23"],"from":["29.24","32.14","33.12","41.31","116.6","116.8","146.2"],"reactdom":["29.24","32.15"],"ui":["30.0","30.7","30.9","31.5","154.7"],"代码中编写类似于":["30.1"],"html":["30.1","37.6","37.14","38.4","43.10","76.4","120.17","154.6"],"element":["30.2","30.6","30.8","49.10","77.2"],"标签可以是":["30.4"],"使用":["30.5","36.6","43.14","126.1","149.0"],"key":["30.5","32.10"],"value":["30.5","30.18","30.21","41.28","71.1","71.2","87.2","92.13","102.10"],"这样可以在":["30.7"],"中插入动态的内容":["30.7"],"拆分成独立的":["30.9"],"react":["30.10","31.6","31.9","31.10","32.4","33.6","33.7","33.12"],"元素":["30.10"],"jsx":["30.11","31.9","32.14","34.6"],"welcome":["30.11","36.3"],"可以在组件中获取这些属性并进行相应的渲染":["30.12"],"isloggedin":["30.14","30.15","36.2","36.4","36.5"],"return":["30.14","30.17","30.21","35.4","36.3","41.0","54.11","65.1","66.2","68.2","69.5","73.7","102.1","103.2","103.4","103.5","104.2","104.3","104.4"],"我们经常需要渲染数据列表":["30.16"],"ul":["30.17","33.11","33.13","75.5"],"setstate":["30.18"],"target":["30.18"],"extends":["30.20","31.6","31.9","31.10","32.4","34.6","102.6","102.11","106.3","110.6"],"component":["30.20","31.6","31.9","31.10","32.4","33.15","34.5","34.6","38.6","44.4"],"componentdidmount":["30.20"],"provider":["30.21"],"dark":["30.21"],"toolbar":["30.21"],"生命周期方法等":["30.22"],"counter":["30.22"],"这些方法允许我们在特定时间点执行代码":["31.0"],"控制组件的行为":["31.0"],"操作等":["31.1","37.18"],"组件更新阶段":["31.1"],"count":["31.3","31.4","31.8","34.3","34.4","34.5","39.4","48.7"],"绑定方法":["31.3"],"handleclick":["31.3"],"initialcount":["31.4"],"用于描述组件的":["31.5"],"结构":["31.5"],"发送网络请求":["31.6"],"mycomponent":["31.9","31.10","34.6","43.2"],"prevprops":["31.11"],"prevstate":["31.11"],"做一些副作用操作":["31.11"],"someprop":["31.11"],"组件即将被销毁时取消订阅":["31.13"],"off":["31.13"],"处理事件":["31.13"],"组件是构建用户界面的基本单位":["32.0"],"每个组件可以接收外部传入的数据":["32.0"],"组件都可以通过":["32.1"],"接收数据":["32.1"],"这些数据可以来自组件的父组件或者外部环境":["32.1"],"子组件":["32.3","43.16","46.1","46.4"],"static":["32.4"],"render":["32.5","35.2","35.3","35.4","36.2","36.3","36.4","36.5"],"布尔值":["32.6"],"p":["32.7","32.8","36.3","43.9","52.3","101.13"],"active":["32.9"],"item":["32.10","37.12","48.12","48.13"],"index":["32.10","105.7","110.12","120.17","154.2","154.6"],"是只读的":["32.13"],"组件本身无法修改":["32.13"],"然后在组件中引入":["32.14"],"并进行验证":["32.14"],"设置默认props":["32.15"],"使用组件并传递props":["32.15"],"document":["32.15","130.1","143.1"],"single":["33.1"],"page":["33.1","118.8"],"application":["33.1","118.12","118.15","146.1"],"会渲染对应的页面组件":["33.3"],"路径":["33.4"],"中传递一个特定的":["33.5"],"然后在页面组件中根据":["33.5"],"router":["33.6","33.7","38.8"],"npm":["33.8","105.10","117.1","125.4"],"yarn":["33.8","110.4"],"进行安装":["33.8"],"的依赖":["33.9"],"default":["33.10","39.3","43.13","49.3"],"about":["33.10","120.17"],"nav":["33.11","41.17","41.19","154.9"],"to":["33.11","33.13","33.14","38.5","141.7"],"path":["33.15","38.7","38.10","81.1","141.7"],"exact":["33.15"],"是组件用于存储和管理可变数据的一种机制":["34.0"],"是":["34.1","39.1"],"组件的一部分":["34.1"],"因此它受到组件的生命周期和渲染过程的影响":["34.1"],"当":["34.1","71.0"],"handleincrement":["34.4"],"onincrement":["34.7"],"button":["34.7","41.7","41.10","41.13","42.8","75.2"],"中":["35.0","36.0"],"我们通常使用":["35.1"],"numbers":["35.2","35.3"],"newnumbers":["35.5"],"number":["35.5","41.4","54.1","101.4","101.14","102.11"],"节点":["35.6"],"抽象列表项":["35.6"],"如果列表项的渲染逻辑较复杂":["35.6"],"建议将其抽象成组件":["35.6"],"以提高代码的可读性和复用性":["35.6"],"注意性能":["35.6"],"当列表数据较大时":["35.6"],"要注意列表渲染的性能":["35.6"],"else":["36.1","67.4","97.5","103.5"],"switch":["36.1"],"state":["36.2","36.4","36.5","39.4"],"false":["36.2","36.3","36.4","36.5","49.1","52.10","53.11","69.0","135.2","138.3","154.10"],"fragment":["36.6"],"包裹多个元素":["36.6"],"当需要在条件渲染中返回多个元素时":["36.6"],"来包裹这些元素":["36.6"],"manager":["37.3"],"first":["37.4"],"模板中":["37.6"],"imagesrc":["37.7"],"isvisible":["37.9"],"in":["37.12","96.2"],"click":["37.13","41.5","41.7","41.10","41.13","41.14","77.9"],"实例数据的双向绑定":["37.14"],"template":["37.16","43.12"],"可以进行":["37.18"],"beforeupdate":["37.18","41.27"],"数据更新前":["37.18"],"在数据更新之前调用":["37.18"],"发生在重新渲染之前":["37.18"],"可以在此处进行状态更新前的准备工作":["37.18"],"updated":["37.18"],"官方提供的路由管理器":["38.1"],"用于实现单页面应用":["38.1"],"spa":["38.1"],"到您的":["38.2"],"home":["38.3","110.10","118.8"],"components":["38.3"],"标签来渲染路由匹配到的组件":["38.4"],"parent":["38.7"],"routes":["38.9","38.10","110.10"],"如路由别名":["38.12"],"用于管理":["39.0"],"可以被多个组件共用":["39.1"],"避免重复逻辑代码":["39.1"],"mutations":["39.1"],"变更":["39.1"],"events":["39.2"],"状态定义":["39.3"],"状态修改":["39.3"],"异步操作":["39.3","71.1"],"获取状态":["39.3"],"将":["39.3"],"应用关联":["39.3"],"应用的入口文件":["39.3"],"increment":["39.4"],"incrementasync":["39.5"],"context":["39.5","128.3","131.4"],"settimeout":["39.5","55.6"],"commit":["39.5","99.10","110.2","154.11"],"获取未完成的todos":["39.6"],"unfinishedtodos":["39.6"],"todo":["39.6"],"获取特定id的todo":["39.6"],"gettodobyid":["39.6"],"find":["39.6"],"能够监听属性的读取和修改操作":["40.1"],"依赖追踪":["40.1"],"dependency":["40.1"],"tracking":["40.1"],"在模板中":["40.1"],"当你使用数据对象中的属性时":["40.1"],"message":["40.1","41.6","41.18","41.19","41.20","43.10","54.3","101.10"],"的依赖追踪更加精细化":["40.2"],"使用了基于":["40.2"],"数据结构的依赖收集":["40.2"],"每个属性都有一个关联的":["40.2"],"存储依赖关系":["40.2"],"这种方式比":["40.2"],"使用的数组更高效":["40.2"],"响应式触发":["40.2"],"组件只需引入不用注册":["41.0"],"属性和方法也不用":["41.0"],"api":["41.1","42.6","71.5","98.1","110.11","117.2","122.11","127.4","127.5","127.7"],"的统一入口":["41.1"],"简单来说":["41.1"],"就是所有的":["41.1"],"count1":["41.2"],"count2":["41.2"],"val":["41.2"],"notref":["41.4"],"changemsg":["41.5"],"change":["41.5","41.7"],"string":["41.6","101.9","101.10","102.7","102.9"],"修改":["41.7"],"vue":["41.8","41.12","41.31","42.7","42.8","44.2","44.7","110.7","153.5"],"或是一个":["41.9"],"数据是会变的":["41.12"],"但不会更新视图":["41.12"],"它可以接收一个函数或对象作为参数":["41.15"],"会返回一个只读的":["41.15"],"data":["41.16","118.14"],"参数一":["41.16"],"监听的数据":["41.16"],"bar":["41.17"],"message2":["41.18"],"并在其依赖变更时重新运行该函数":["41.21"],"也是一个函数":["41.22"],"函数或生命周期钩子被调用时":["41.23"],"pre":["41.24","70.3","73.5","73.7"],"组件更新前执行":["41.24"],"在我们使用":["41.25"],"vue3":["41.25","42.5"],"元素被更新之前调用":["41.27"],"dir":["41.28"],"directivebinding":["41.28"],"background":["41.28"],"无论值是否有更改都可用":["41.29"],"arg":["41.29"],"传递给指令的参数":["41.29"],"如果有的话":["41.29"],"例如在":["41.29"],"foo":["41.29","121.12"],"onmounted":["41.31"],"onunmounted":["41.31"],"ref":["41.31","136.4","138.4"],"usewindowresize":["41.31"],"子父组件":["42.1"],"甚至兄弟组件通信":["42.1"],"自定义事件":["42.1"],"可以实现子父组件通信":["42.1"],"全局事件总线":["42.1"],"方式":["42.2"],"事件":["42.3"],"另外一种自定义事件":["42.3"],"原生":["42.3","44.5"],"当然点击事件想注入多个参数可以按照下图操作":["42.4"],"但是切记注入的事件对象务必叫做":["42.4"],"script":["42.5","123.0"],"标签内部":["42.5"],"使用了":["42.5"],"defineemits":["42.5"],"方法":["42.5","66.1"],"此方法是":["42.5"],"提供的方法":["42.5"],"不需要引入直接使用":["42.5"],"也就没有":["42.6"],"prototype":["42.6"],"以及组合式":["42.6"],"实现父子组件数据同步":["42.7"],"msg":["42.7"],"在父组件内部使用一个子组件":["42.8"],"ref与":["42.9"],"son":["42.9"],"可以实现隔辈组件传递参数":["42.10"],"组件组件提供数据":["42.10"],"可以用":["42.12"],"a替换":["42.12"],"填入组件a部分的结构":["42.12"],"tree":["43.5"],"shaking":["43.5"],"我是标题":["43.6"],"父组件使用插槽":["43.8"],"在父组件给这个插槽填充内容":["43.8"],"父组件":["43.9"],"child":["43.9","43.11","77.10","102.11"],"v":["43.9","99.11","105.7"],"children":["43.12"],"组件有两个插槽":["43.13"],"它们都只接收一个直接子节点":["43.13"],"插槽里的节点会尽可能展示出来":["43.13"],"如果不能":["43.13"],"则展示":["43.13"],"fallback":["43.13"],"完全不受父级style样式影响":["43.14"],"通过to":["43.14"],"属性插入到指定元素位置":["43.14"],"view":["43.15","143.1","145.1"],"多个条件判断的子组件":["43.15"],"开发者可以自定义":["43.17"],"model修饰符":["43.17"],"bind":["43.17"],"的":["43.17","52.7","53.9","119.1"],"sync":["43.17"],"修饰符和组件的":["43.17"],"with":["44.4"],"preview":["44.4"],"syntax":["44.4"],"直接回车":["44.4"],"这两种使用vite创建vue3项目的步骤一样":["44.6"],"运行命令":["44.6","116.1"],"输入项目名称":["44.6"],"正式版在今年9月份发布":["45.1"],"2年多开发":["45.1"],"更新渲染快133":["45.2"],"watch":["45.3"],"新的生命周期函数":["45.3"],"普通写法":["46.2"],"seutp":["46.3"],"语法糖模式发现":["46.3"],"如果有多个数据可以用数组保存起来":["48.0"],"var":["48.1","81.2","95.4","131.2"],"arr":["48.1","49.10","70.1"],"unshift":["48.6"],"创建一个数组":["48.7","48.8"],"removed":["48.9","48.14","48.17"],"yellow":["48.10","132.0"],"black":["48.10"],"shift":["48.11","51.7"],"green":["48.12","48.13"],"colors3":["48.15"],"includes":["48.18"],"nicholas":["48.21"],"sort":["48.22"],"blue":["48.26"],"some":["48.27"],"mapresult":["48.32"],"可以省略":["49.1"],"哈哈哈":["49.1"],"为止":["49.2"],"如果所有的条件表达式都是":["49.2"],"则执行":["49.2"],"从键盘输入小明的期末成绩":["49.2"],"score":["49.2"],"prompt":["49.2"],"请输入小明的期末成绩":["49.2"],"检查score是否合法":["49.2"],"执行的流程":["49.3"],"do":["49.4"],"执行流程":["49.5"],"语句在执行时":["49.5","49.6"],"执行顺序":["49.6"],"obj":["49.9","52.9","95.4"],"循环适用于迭代对象的值":["49.11"],"迭代对象的类型不同":["49.11"],"循环适用于遍历对象":["49.11"],"包括普通对象":["49.11"],"内层循环":["49.12"],"虽然":["50.0"],"函数名":["50.2"],"函数体代码":["50.2"],"全部小写":["50.3"],"函数是做某件事情":["50.3"],"函数名一般是动词":["50.3"],"形参2":["50.6"],"在声明函数的小括号里面是":["50.6"],"形式上的参数":["50.6"],"实参1":["50.6"],"如果实参的个数多于形参的个数":["50.7"],"会取到形参的个数":["50.7"],"后面的代码不会被执行":["50.8"],"alert":["50.8"],"我是不会被执行的哦":["50.8"],"fn":["50.8"],"跳出本次循环":["50.9"],"无法直接使用":["50.10"],"xxxx":["50.12","63.9","100.4"],"的语法类似于":["51.0"],"语言":["51.0"],"代码":["51.2"],"head":["51.3","99.15"],"meta":["51.3","110.11"],"charset":["51.3"],"utf":["51.3","120.3"],"标签的":["51.4"],"ctrl":["51.6"],"大括号就定义了一个对象":["52.2"],"它被赋值给变量":["52.2"],"所以变量":["52.2"],"1p":["52.3"],"不报错":["52.3"],"h":["52.3"],"w":["52.3","120.1"],"q":["52.3"],"上面对象的三个键名":["52.3"],"都不符合标识名的条件":["52.3"],"所以必须加上引号":["52.3"],"对象的每一个键名又称为":["52.3"],"如果取消某一个变量对于原对象的引用":["52.4"],"不会影响到另一个变量":["52.4"],"无法确定是对象还是代码块":["52.5"],"一律解释为代码块":["52.5"],"上面的语句是一个代码块":["52.5"],"而且只有解释为代码块":["52.5"],"属性时":["52.7"],"如果使用点运算符":["52.7"],"就是字符串":["52.7"],"但是不使用引号":["52.7"],"那么":["52.7"],"就是一个变量":["52.7"],"指向字符串":["52.7"],"方括号运算符内部还可以使用表达式":["52.7"],"分别使用点运算符和方括号运算符":["52.8"],"对属性赋值":["52.8"],"允许属性的":["52.8"],"key1":["52.9"],"并没有":["52.10"],"但是":["52.10","52.12"],"命令照样返回":["52.10"],"因此":["52.10"],"不能根据":["52.10"],"命令的结果":["52.10"],"认定某个属性是存在的":["52.10"],"只有一种情况":["52.10"],"命令会返回":["52.10"],"那就是该属性存在":["52.10"],"且不得删除":["52.10"],"tostring":["52.11","52.12","107.1"],"运算符的一个问题是":["52.11"],"它不能识别哪些属性是对象自身的":["52.11"],"还遍历继承的属性":["52.12"],"举例来说":["52.12"],"对象都继承了":["52.12"],"循环不会遍历到这个属性":["52.12"],"属性是存在的":["52.12"],"如果":["52.13"],"区块内部有变量的赋值操作":["52.13"],"必须是当前对象已经存在的属性":["52.13"],"否则会创造一个当前作用域的全局变量":["52.13"],"幂运算":["53.2"],"模运算":["53.2"],"取余数":["53.2"],"等价于":["53.3"],"减等于":["53.3"],"新值":["53.5"],"的值不同":["53.6"],"是新值":["53.6"],"大于等于号":["53.7"],"如果找到":["53.9","53.10"],"则直接返回":["53.9","53.10"],"或运算是找":["53.10"],"条件运算符在执行时":["53.12"],"会先对条件表达式进行求值判断":["53.12"],"圆括号":["53.13"],"可以用来提高运算的优先级":["53.13"],"因为它的优先级是最高的":["53.13"],"floatnum1":["54.2"],"floatnum2":["54.2"],"jacob":["54.4"],"car":["54.5"],"的值":["54.6"],"othergenericsymbol":["54.7"],"我们这里主要讲述下面三种":["54.8"],"person":["54.9","65.3","92.4","93.1","106.5"],"num2":["54.11"],"函数表达式":["54.11"],"regexp":["54.12"],"typeof":["54.14","66.2"],"对象":["54.16","151.0"],"对象会转换为":["54.16"],"所有表示空性的没有的错误的值都会转换为":["54.16"],"引用类型的对象存储于堆中":["54.17"],"在栈中存放的是指向堆内存的地址":["54.20"],"不同的类型数据导致赋值变量时的不同":["54.20"],"全局变量":["55.1"],"在严格模式下":["55.1"],"如果像这样给未声明的变量赋值":["55.1"],"则会导致抛出referenceerror":["55.1"],"定义多个变量":["55.1"],"syntaxerror":["55.2"],"标识符age":["55.2"],"已经声明过了":["55.2"],"块作用域没有重复声明则使用相同标识符则不会报错":["55.2"],"zhangsan":["55.3"],"是块级作用域":["55.5"],"所以检查不到之前是否声明过":["55.5"],"没有定义":["55.6"],"常见的异步循环问题":["55.6"],"typeerror":["55.7"],"给常量赋值":["55.7"],"也不允许重复声明":["55.7"],"都存在变量提升":["55.8"],"但":["55.8"],"对象代表当前窗口或标签页中加载的文档":["56.0"],"createelement":["56.1"],"tagname":["56.1","78.1"],"并将其添加到文档中":["56.2"],"newparagraph":["56.2"],"对象提供了对浏览器历史记录的操作":["57.0"],"导航到下一个页面":["57.1","57.2"],"如获取或修改元素":["58.0"],"创建新的元素或节点":["58.0"],"修改文档结构等":["58.0"],"location":["58.0"],"它提供了与当前窗口的":["58.0"],"相关的信息和操作":["58.0","59.0"],"它包含了":["58.0"],"的主机名部分":["59.1"],"pathname":["59.1"],"protocol":["59.2"],"对象提供了关于浏览器的信息":["60.0"],"appname":["60.1","60.2"],"浏览器的名称":["60.1"],"对象提供了关于用户屏幕的信息":["61.0"],"availwidth":["61.1"],"屏幕的可用宽度":["61.1"],"获取屏幕的可用宽度":["61.2"],"关闭当前窗口":["62.1","62.2"],"resizeto":["62.1"],"blank":["62.2"],"是一种创建交互式网页应用的网页开发技术":["63.1"],"可以在不重新加载整个网页的情况下":["63.1"],"对象的":["63.2"],"open":["63.2","63.8","120.7"],"方法与服务端建立连接":["63.2"],"构造函数用于初始化一个":["63.3"],"password":["63.4","71.5","110.10"],"参数说明":["63.4"],"表示当前的请求方式":["63.4"],"请求中要发送的数据体":["63.5"],"响应体下载中":["63.6"],"responsetext":["63.6"],"已经获取部分数据":["63.6"],"done":["63.6"],"请求完成":["63.6"],"整个请求过程已完毕":["63.6"],"只要":["63.6"],"属性值一变化":["63.6"],"就会触发一次":["63.6"],"readystatechange":["63.6"],"success":["63.9"],"core":["64.1"],"中一种强大且常用的特性":["65.0"],"它允许内部函数访问其外部函数的作用域":["65.0"],"incrementcounter":["65.2"],"可以实现模块化的代码结构":["65.4"],"将相关的功能和状态封装在闭包中":["65.4"],"提供公共接口给外部":["65.4"],"从而实现代码的隔离和组织":["65.4"],"保存状态":["65.4"],"闭包可以用于保存函数的状态":["65.4"],"闭包中的变量是共享的":["65.5"],"如果多个闭包引用相同的外部变量":["65.5"],"那么它们会共享相同的变量实例":["65.5"],"shallowcopy":["66.1"],"会丢失或报错":["66.2"],"使用递归函数":["66.2"],"deepclone":["66.2"],"null":["66.2","82.2","83.2","101.8","108.0","131.3"],"take":["67.1"],"部分应用函数":["67.2"],"柯里化可以部分应用函数":["67.2"],"即预先设置函数的一部分参数":["67.2"],"然后返回一个接收剩余参数的新函数":["67.2"],"这使得函数的调用更加灵活和可定制":["67.2"],"需要注意的是":["67.2"],"下面是几种常见的实现方式":["67.3"],"nextargs":["67.4","67.6"],"apply":["67.5"],"本质上是优化高频率执行代码的一种手段":["68.0"],"浏览器的":["68.0"],"resize":["68.0"],"scroll":["68.1","68.4"],"timer":["68.2","68.3"],"args":["68.2"],"可以将时间戳写法的特性与定时器写法的特性相结合":["68.3"],"实现一个更加精确的节流":["68.3"],"实现如下":["68.3"],"throttled":["68.3"],"debounce":["68.5"],"func":["68.5"],"cleartimeout":["68.6"],"不为null":["68.6"],"replace":["70.2"],"g":["70.2","88.3"],"split":["70.2","102.10"],"cur":["70.3","73.5"],"length":["70.4"],"rejected":["71.0"],"已失败":["71.0"],"对象的状态从":["71.0"],"在操作成功时调用":["71.1"],"处理第二个操作成功的结果":["71.3"],"yetanotherpromise":["71.3"],"catch":["71.3","71.5"],"处理任意一个":["71.4"],"实例失败的结果":["71.4"],"在上述示例中":["71.4"],"接收一个":["71.4"],"login":["71.5","122.11"],"post":["71.5","98.3","118.4","122.11"],"response":["71.5"],"这个原型对象可以被其他对象继承":["72.1"],"从而实现属性和方法的共享":["72.1"],"create":["72.4","93.2","110.11","112.3","116.2"],"让我们一一了解这些方式":["72.5"],"eating":["72.6","72.8"],"dog":["72.6","89.1","117.6"],"的原型继承是动态的":["72.11"],"中的继承是通过原型链来实现的":["72.12"],"而":["72.13","79.1","101.9"],"但最好不要这样做":["72.15"],"可以节省内存":["72.16"],"它会覆盖父对象上的属性或方法":["72.17"],"来创建对象":["72.18"],"数组的一个高阶函数":["73.0"],"它用于对数组中的元素进行累积操作":["73.0"],"它接受四个参数":["73.1"],"前一个值":["73.1"],"prev":["73.1"],"设置初始值":["73.3"],"reduce":["73.5","73.6","73.7"],"newarr":["73.6"],"english":["73.8"],"方法不会修改原始数组":["73.9"],"它始终返回一个新的累积结果":["73.9"],"如果需要对原始数组进行修改":["73.9"],"请使用其他数组方法":["73.9"],"中有两种主要的作用域类型":["74.0"],"inner":["74.2","74.3","77.10"],"innervariable":["74.3"],"在现有":["75.1"],"结构基础上插入新的元素节点":["75.1"],"hr":["75.1"],"普通盒子":["75.1"],"点击按钮向":["75.1"],"点击按钮删除节点":["75.2"],"要么是兄弟关系":["75.3"],"序号":["75.4"],"课程名":["75.4"],"难度":["75.4"],"操作":["75.4"],"文档解析为":["76.1"],"树":["76.1"],"并提供了一组":["76.1"],"标题":["76.2"],"等都属于元素节点":["76.3"],"是指":["76.3"],"标签中的属性":["76.3"],"中常用的一项功能":["77.0"],"用户使用":["77.1"],"方法来添加事件监听器":["77.2"],"eventhandler":["77.2"],"eventname":["77.2"],"不同的是":["77.5"],"不会在子元素上触发":["77.5"],"mouseleave":["77.5"],"键盘按下了":["77.6"],"focus":["77.7"],"keydown":["77.8"],"当用户按下键盘上的任意键时触发":["77.8"],"可以使用该事件来监测实时的键盘输入":["77.8"],"并进行相应处理":["77.8"],"keyup":["77.8"],"表单事件":["77.11"],"submit":["77.11"],"input":["77.11"],"或者根据目标元素的特定属性或位置来执行相应操作":["77.12"],"通过事件委托":["77.12"],"你只需要在父元素上绑定一个事件监听器":["77.12"],"无论子元素的数量如何变化":["77.12"],"只要满足选择器条件的子元素触发了事件":["77.12"],"都可以被捕获和处理":["77.12"],"这样可以避免为每个子元素分别绑定事件监听器":["77.12"],"从而减少内存占用和提高性能":["77.12"],"将一个节点添加为另一个节点的子节点":["78.0"],"removechild":["78.0"],"insertbefore":["78.3"],"font":["79.1"],"如果元素已经具有指定的类名":["79.2"],"则移除它":["79.2"],"如果元素没有指定的类名":["79.2"],"getelementsbytagname":["80.0"],"根据标签名获取元素节点集合":["80.0"],"queryselector":["80.0"],"elements":["80.1"],"classname":["80.1"],"内容":["80.2"],"innerhtml":["80.2"],"然后浏览器会将":["81.0"],"gmt":["81.1"],"cookies":["81.2"],"thu":["81.3"],"01":["81.3"],"jan":["81.3"],"stringify":["81.4"],"方法将其转换为字符串存储":["81.4"],"然后在需要时使用":["81.4"],"parse":["81.4"],"方法将其还原":["81.4"],"每个域名和浏览器对":["81.4"],"允许开发者在浏览器中存储和检索持久化的键值对数据":["82.0"],"是要存储的数据的键":["82.1","83.1"],"返回":["82.2","83.2","87.2"],"方法来删除指定键的数据":["82.4","83.4"],"getitem":["82.6","83.6"],"允许开发者在浏览器中存储和检索会话级别的键值对数据":["83.0"],"十二月":["84.1"],"getseconds":["84.1"],"获取秒数":["84.1"],"gettime":["84.1","84.4"],"获取日期的时间戳":["84.1"],"返回值为从":["84.1"],"年":["84.1"],"月":["84.1"],"有四种方式初始化日期":["84.2"],"setfullyear":["84.3"],"date":["84.4","136.3"],"now":["84.4"],"的内置对象为开发者提供了丰富的功能和方法":["85.0"],"能够简化开发过程并处理各种数据和操作":["85.0"],"数值对象":["85.1"],"boolean":["85.1"],"布尔对象":["85.1"],"其他对象都继承自它":["85.2"],"删除":["85.3"],"如拼接":["85.4"],"转换为字符串":["85.5"],"设置时间":["85.7"],"如求绝对值":["85.8"],"分割":["85.9"],"替换等复杂的文本处理任务":["85.9"],"除了上述常用的内置对象外":["85.9"],"可以对数字进行计算":["86.0"],"用于":["86.0"],"圆周率":["86.1"],"返回一个数的绝对值":["86.3"],"往上不包括":["86.4"],"四舍五入原则":["86.7"],"找出最小值":["86.8"],"找出最大值":["86.9"],"返回的是一个数的平方根":["86.11"],"positive":["87.1"],"infinity":["87.1","101.2"],"表示正无穷大":["87.1"],"当一个数超过了":["87.1"],"valueof":["87.2"],"对象的原始数值":["87.2"],"示例代码":["87.2"],"max":["87.2","110.8"],"7976931348623157e":["87.2"],"可以使用正则表达式执行以下操作":["88.1"],"匹配":["88.1"],"matching":["88.1"],"正则表达式可以使用字面量形式或构造函数形式来创建":["88.2"],"模式字符串和可选的修饰符字符串":["88.4"],"匹配前面的元素一次或多次":["88.5"],"不区分大小写匹配":["88.6"],"m":["88.6","102.2","154.11"],"匹配空格字符":["88.7"],"s":["88.7","88.10","154.0"],"匹配非空格字符":["88.7"],"返回匹配结果的数组或":["88.8"],"使用名称访问捕获的子串":["88.9"],"来匹配字符串的开始和结束":["88.10"],"允许点号":["88.10"],"匹配任意字符":["88.10"],"包括换行符":["88.10"],"数据提取":["88.11"],"使用正则表达式从文本中提取特定的信息":["88.11"],"am":["89.1","90.1","90.2"],"子类":["89.1","91.2"],"breed":["89.1"],"call":["89.1"],"meow":["89.3"],"之后":["90.0"],"引入了":["90.0"],"创建类的实例":["90.2"],"person1":["90.2","104.5"],"每个对象都有自己的状态和行为":["91.1"],"继承是一种对象之间共享属性和方法的机制":["91.2"],"通过继承":["91.2"],"一个类":["91.2"],"可以继承另一个类":["91.2"],"父类":["91.2"],"张三":["92.2"],"调用对象的属性":["92.3"],"我们采取":["92.3"],"对象名":["92.3"],"属性名":["92.3"],"我们理解为":["92.3"],"uname":["92.4"],"sex":["92.4"],"prop":["92.5"],"返回指定对象上一个自有属性对应的属性描述符":["92.5"],"getownpropertynames":["92.5"],"返回一个给定对象自身的所有属性的名称数组":["92.5"],"getownpropertysymbols":["92.5"],"obj3":["92.6"],"jane":["92.10"],"修改无效":["92.10"],"newobj":["92.14"],"删除属性无效":["92.18"],"用于实现继承和共享属性和方法":["93.0"],"直到找到为止":["93.1"],"示例":["93.1","152.9","152.12"],"friend":["93.2"],"的原型是":["93.2"],"继承":["93.3"],"通过原型链":["93.3"],"等方法来设置对象的原型":["93.4"],"而不是直接修改":["93.4"],"现在这里的代码会在严格模式下运行":["94.0"],"启用单个函数的严格模式":["94.0"],"如果你只想在特定函数内启用严格模式":["94.0"],"可以在函数体的开头添加":["94.0"],"会创建一个执行期上下文的内部对象":["95.1"],"以方法的形式调用":["95.3"],"this是调用方法的对象":["95.3"],"绑定到什么":["95.4"],"方法的另一个应用":["95.7"],"可以实现继承":["95.7"],"之所以能实现继承":["95.7"],"其实是利用了上面的作用":["95.7"],"先将":["95.8"],"然后执行":["95.8"],"需要传递":["95.10"],"数组":["95.10","107.0"],"所以它有一些巧妙应用":["95.10"],"稍后看接下来的应用举例就知道了":["95.10"],"语法":["95.10","95.14"],"求数组中多个元素的最大值":["95.12"],"arr1":["95.12"],"下面这一行代码的目的":["95.12"],"无需改变":["95.12"],"是最为合适的":["95.14"],"新函数":["95.14"],"fn1":["95.14"],"想要将this指向哪里":["95.14"],"函数实参1":["95.14"],"http":["97.1"],"install":["97.2","125.7"],"params":["97.3"],"添加请求拦截器":["97.4"],"axios":["97.4"],"interceptors":["97.4","110.11"],"request":["97.4"],"status":["97.5"],"headers":["97.5"],"集中式管理":["98.1"],"apibaseurl":["98.2"],"service":["98.2"],"type":["98.3","138.4"],"如果没有设置请求头":["98.3"],"method":["98.3"],"您未登录":["98.4"],"或者登录已经超时":["98.4"],"请先登录":["98.4"],"您没有权限操作":["98.4"],"请求地址出错":["98.4"],"postaction":["98.5"],"xxx":["98.6"],"引入上面login方法所在的文件":["98.6"],"res":["98.6","104.6","122.11"],"配置局部账户":["99.1"],"只对当前":["99.1"],"日志信息":["99.6"],"提交当前目录及其子目录的变更":["99.6"],"cached":["99.7"],"比较指定文件暂存区和":["99.7"],"的差异":["99.7"],"n":["99.8","101.8","109.1"],"次的版本信息":["99.8"],"已有分支":["99.10"],"基于某个":["99.10"],"分支":["99.12"],"分支名":["99.13"],"把当前分":["99.14"],"基于":["99.14"],"暂存区指定文件恢复成和":["99.15"],"一样":["99.15"],"reset":["99.15"],"bash":["99.16","99.20"],"git":["99.16","100.1","100.2"],"别名":["99.18"],"地址":["99.18","99.19"],"origin":["99.21"],"master":["99.21"],"如果省略本地分支名":["99.21"],"copy内容到git":["100.5"],"infinitynumber":["101.2"],"无穷大":["101.2"],"warning":["101.3"],"list":["101.4"],"ok":["101.7"],"类型的变量":["101.9"],"void":["101.9","102.9","102.11"],"类型不可以分给其他类型":["101.9"],"这样写会报错":["101.9"],"void类型不可以分给其他类型":["101.9"],"函数中使用联合类型":["101.12"],"any":["101.14","103.4","142.2","143.1","145.1"],"strlength1":["101.14"],"一般方法":["102.1"],"say":["102.1","102.6","102.8"],"我叫":["102.1"],"protected":["102.3"],"修饰符":["102.4","102.5"],"man":["102.6"],"你的意思是改为访问静态成员":["102.8"],"吗":["102.8"],"asd":["102.9"],"names":["102.10"],"setage":["102.11"],"返回值":["103.0"],"为上面那个函数添加类型":["103.1"],"ts":["103.1","106.4","110.9"],"items":["103.4"],"而在使用的时候再指定具体类型的一种特性":["104.0"],"上不存在属性":["104.7"],"我们可以使用泛型约束来实现":["104.7"],"是一种由微软开发的自由和开源的编程语言":["105.1"],"智能":["105.2"],"的提示":["105.2"],"相对于js而言":["105.2"],"先编译再执行":["105.3"],"在写的时候就会发现错误了":["105.3"],"编译阶段就能检查类型发现大部分错误":["105.5"],"项目里使用":["105.6"],"编译":["105.7"],"tsc":["105.9"],"来定义对象的类型":["106.0"],"接口是对象的状态":["106.0"],"但是对象里面缺少age属性":["106.1"],"使用接口约束的时候不能多一个属性也不能少一个属性":["106.1"],"interface":["106.4","106.5"],"propname":["106.6"],"大":["107.1"],"代表所有拥有":["107.1"],"hasownproperty":["107.1"],"方法的类型":["107.1"],"所以所有原始类型":["107.1"],"非原始类型都可以赋给":["107.1"],"tslib":["108.0"],"导入辅助工具函数":["108.0"],"isolatedmodules":["108.0"],"将每个文件做为单独的模块":["108.0"],"transpilemodule":["108.0"],"类似":["108.0"],"严格的类型检查选项":["108.0"],"启用所有严格类型检查选项":["108.0"],"noimplicitany":["108.0"],"在表达式和声明上有隐含的":["108.0"],"any类型时报错":["108.0"],"strictnullchecks":["108.0"],"启用严格的":["108.0"],"检查":["108.0"],"noimplicitthis":["108.0"],"我是一个字符串":["109.2"],"定义联合类型别名":["109.2"],"husky":["110.2"],"来做":["110.2"],"拦截":["110.2"],"node":["110.3","117.5","121.11"],"由":["110.4"],"衍生而来":["110.4"],"解决了":["110.4"],"env":["110.6","110.11"],"browser":["110.6"],"浏览器端":["110.6"],"es2021":["110.6"],"规则继承":["110.6"],"全部规则默认是关闭的":["110.6"],"这个配置项开启推荐规则":["110.6"],"推荐规则参照文档":["110.6"],"函数不能重名":["110.6"],"js的eslint插件":["110.7"],"查找vue语法错误":["110.7"],"发现错误指令":["110.7"],"不允许多个空行":["110.8"],"process":["110.8"],"production":["110.8"],"debugger":["110.8"],"unexpected":["110.8"],"multiline":["110.8"],"禁止空余的多行":["110.8"],"useless":["110.8"],"escape":["110.8"],"禁止不必要的转义字符":["110.8"],"在入口文件引入":["110.9"],"但是你会发现在":["110.9"],"desc":["110.10"],"平台管理员":["110.10"],"roles":["110.10"],"buttons":["110.10"],"cuser":["110.10"],"detail":["110.10"],"token":["110.10","122.14"],"baseurl":["110.11"],"vite":["110.11"],"app":["110.11","146.4","148.2"],"base":["110.11"],"timeout":["110.11"],"请求拦截器":["110.11"],"admin":["110.12","154.7"],"acl":["110.12"],"userinfo":["110.12","122.14"],"info":["110.12"],"htm":["111.0"],"files":["111.0","120.3","120.6"],"uri":["111.0"],"cmd":["111.1"],"nginx":["111.1"],"t":["111.1"],"数据操作命令以及授权和权限管理命令":["112.0"],"column2":["112.1","116.5","116.7"],"创建一个新的表":["112.1"],"alter":["112.1"],"where":["112.2"],"condition":["112.2"],"从表中检索数据":["112.2"],"从用户撤销特定数据库或表的权限":["112.3"],"user":["112.3","122.11"],"字段":["113.0"],"可变长度的字符串":["113.3"],"存储一个或多个预定义的值":["113.5"],"除了上述常见的数据类型":["113.5"],"每个记录包含多个字段":["114.0"],"通过使用查询语言":["114.0"],"如sql":["114.0"],"可扩展性":["114.1"],"mysql具有良好的可扩展性":["114.1"],"可以通过分布式架构和主从复制来处理大规模数据和高并发访问":["114.1"],"高性能":["114.1"],"mysql通过优化查询执行计划":["114.1"],"创建数据库":["116.0"],"创建表":["116.0"],"打开命令行终端":["116.1"],"u":["116.1"],"sql":["116.2"],"database":["116.3"],"column1":["116.4","116.7"],"values":["116.5"],"value1":["116.5","116.7"],"table":["116.6","116.8"],"解析标记并提供用于遍历":["117.2"],"操作结果数据结构的":["117.2"],"douban":["117.3"],"创建一个空数组":["117.4"],"把数据以对象的形式存放在数组中":["117.4"],"allfiles":["117.4"],"获取html中的数据":["117.4"],"load":["117.4","141.7","149.1","149.2"],"p513344864":["117.6"],"楚门的世界":["117.6"],"truman":["117.6"],"show":["117.6"],"p479682972":["117.6"],"忠犬八公的故事":["117.6"],"hachi":["117.6"],"tale":["117.6"],"p2587099240":["117.6"],"海上钢琴师":["117.6"],"leggenda":["117.6"],"del":["117.6"],"快速":["118.0"],"男":["118.2"],"请求成功":["118.2"],"bruce":["118.3","121.12"],"可直接访问":["118.3"],"参数把流转关系交给下一个中间件或路由":["118.5"],"中间件注意事项":["118.5"],"调用了第1个全局中间件":["118.6"],"定义第二个全局中间件":["118.6"],"get":["118.7"],"send":["118.7","118.8"],"服务器内部发生了错误":["118.8"],"定义错误级别的中间件":["118.8"],"捕获整个项目的异常错误":["118.8"],"从而防止程序的崩溃":["118.8"],"导入中间件":["118.10"],"相关的":["118.11"],"响应头":["118.11"],"就可解除浏览器端的跨域访问限制":["118.11"],"值仅限于":["118.12"],"plain":["118.12"],"multipart":["118.12"],"form":["118.12"],"urlencoded":["118.12"],"三者之一":["118.12"],"如果客户端向服务器发送了额外的请求头信息":["118.12"],"则需要在服务器端":["118.12"],"dpr":["118.14"],"downlink":["118.14"],"save":["118.14"],"json":["118.15","122.12"],"格式的数据":["118.15"],"chrome":["119.1"],"v8":["119.1"],"引擎":["119.1"],"则完全没有采用这种模型":["119.2"],"它本质上就是一个单线程":["119.2"],"但一个线程如何服务于大量的请求":["119.2"],"如何处理高并发的呢":["119.2"],"程序运行不稳定":["119.3"],"读写文件":["120.1"],"rs":["120.1"],"同步模式下打开文件用于读取":["120.1"],"同步模式下打开文件用于读写":["120.1"],"txt":["120.3","120.6"],"可读流关闭了":["120.4"],"数据读取完毕":["120.4"],"关闭可写流":["120.4"],"nodejs":["120.6","121.21"],"流打开了":["120.7"],"00000000":["120.8"],"每一个元素占用一个字节内存":["120.8"],"是对底层内存的直接操作":["120.8"],"动态拼接出被操作文件的完整路径":["120.9"],"解决方案":["120.9"],"mkdirsync":["120.10"],"删除目录":["120.10"],"rmdir":["120.10"],"rmdirsync":["120.10"],"重命名文件和目录":["120.10"],"rename":["120.10"],"oldpath":["120.10"],"newpath":["120.10"],"require":["120.13","121.12","121.13"],"定义文件的存放路径":["120.13"],"fpath":["120.13"],"your":["120.16"],"关于页面":["120.17"],"模块化可提高代码的复用性和可维护性":["121.2"],"实现按需加载":["121.2"],"更好的分离":["121.3"],"自定义模块":["121.5"],"方法等成员":["121.6"],"供外界使用":["121.7"],"导入自定义模块时":["121.7","121.21"],"得到的就是":["121.7"],"变量是一个对象":["121.8"],"不会导致模块的代码被执行多次":["121.9"],"会按顺序尝试加载文件":["121.11"],"users":["121.12"],"project":["121.12"],"文件里调用了":["121.12"],"加载的入口":["121.13"],"如果没有":["121.13"],"中的包都是免费且开源的":["121.15"],"由于":["121.15"],"包的名称":["121.18"],"version":["121.18"],"不论是内置模块":["121.19"],"如果省略了文件的扩展名":["121.21"],"里调用":["121.22"],"tools":["121.22"],"如果目录里没有":["121.23"],"文件":["121.23","124.4"],"或者":["121.23"],"createpool":["122.2"],"host":["122.2"],"set":["122.3","153.1"],"更新数据":["122.3"],"update":["122.3","123.0","124.3"],"用户体验好":["122.6"],"页面局部刷新":["122.6"],"无需重新请求页面":["122.6"],"减轻服务器的渲染压力":["122.6"],"可考虑服务端渲染":["122.7"],"后台管理项目":["122.7"],"islogin":["122.11"],"保存在客户端浏览器中":["122.13"],"服务器通过还原":["122.13"],"字符串的形式来认证用户的身份":["122.13"],"组成部分":["122.13"],"payload":["122.13"],"signature":["122.13"],"参数":["122.14"],"用户信息对象":["122.14"],"加密密钥":["122.14"],"配置对象":["122.14"],"token有效期":["122.14"],"尽量不保存敏感信息":["122.14"],"因此只有用户名":["122.14"],"没有密码":["122.14"],"expiresin":["122.14"],"10h":["122.14"],"字符串还原为":["122.14"],"客户端访问有权限的接口时":["122.14"],"需通过请求头的":["122.14"],"remove":["123.0"],"更新依赖项":["123.0"],"upgrade":["123.0"],"运行脚本命令":["123.0"],"run":["123.0"],"清理缓存":["123.0"],"的默认包管理器":["124.1"],"也是世界上最大的开源软件注册表":["124.1"],"时":["124.2"],"卸载指定的包":["124.3"],"更新指定的包":["124.3"],"并生成":["124.4"],"部分":["124.5"],"你可以列出项目所需的包及其版本号":["124.5"],"定义脚本和使用":["124.6"],"publish":["124.6"],"请访问":["125.1"],"并执行以下命令来初始化项目":["125.2"],"编写你的包的代码":["125.3"],"init":["125.4"],"密码和邮箱":["125.5"],"执行以下命令发布你的包":["125.5"],"bug":["125.6"],"通过包管理器安装":["126.1"],"添加依赖项":["126.2"],"若要添加新的依赖项":["126.2"],"可以运行以下命令":["126.2"],"脚本在矩形区域中绘制图像":["127.1"],"动画和其他复杂的视觉效果":["127.1"],"轴向下延伸":["127.3"],"可以通过":["127.3"],"提供了两种基本的绘图上下文":["127.4"],"进行控制":["127.5"],"在一个网页上创造一个交互式地图":["127.6"],"让用户点击地图上的数据点来查看更多的信息或与其他应用程序进行交互":["127.6"],"您可以控制图形元素的位移":["127.7"],"位置":["127.7"],"颜色和其他属性":["127.7"],"不同的浏览器可能解释":["127.8"],"图像缩放":["128.0"],"fillrect":["128.1","128.3"],"原来的矩形是":["128.2"],"缩放后展示出来是":["128.2"],"垂直缩放":["128.4"],"水平位移":["128.4"],"单位像素":["128.4"],"垂直位移":["128.4"],"之上":["129.0"],"那么浏览器就会简单地把源特体的图像叠放在目标物体图像上面":["129.0"],"在源图像中显示目标图像":["129.1"],"只有源图像内的目标图像部分会被显示":["129.1"],"源图像是透明的":["129.1"],"在源图像外显示目标图像":["129.1"],"getelementbyid":["130.1"],"判断是否有getcontext":["130.1"],"lineto":["130.2"],"添加一个新点":["130.2"],"绘制一条从当前位置到指定新点":["130.2"],"交点为菱形":["131.1"],"miterlimit":["131.1"],"指定交点菱形的长度":["131.1"],"该属性只在":["131.1"],"属性的值等于":["131.1"],"时有效":["131.1"],"表示":["131.2"],"颜色":["131.2","145.3"],"gradient":["131.2"],"pink":["131.2"],"skyblue":["131.2"],"垂直重复":["131.3"],"no":["131.3"],"不重复":["131.3"],"如果第二个参数是空字符串或":["131.3"],"则等同于":["131.3"],"shadowoffsety":["131.4"],"阴影的垂直位移":["131.4"],"下面是一个例子":["131.4"],"填充":["133.2"],"beginpath":["133.2","138.3"],"rect":["133.2"],"左眼":["133.3"],"stroke":["133.4"],"closepath":["133.4"],"两条线段使用fill":["133.4"],"tx":["133.5"],"png":["133.5","141.7","154.7","154.9"],"文本":["133.6"],"绘制文字最大宽度":["133.6"],"终点x":["134.2"],"终点y":["134.2"],"isdraw":["135.2","138.3"],"onmousedown":["135.2","138.3"],"onmouseup":["135.2"],"globalcompositeoperation":["135.2"],"获取当前的时间":["136.3"],"time":["136.3"],"hour":["136.3"],"gethours":["136.3"],"min":["136.3"],"getminutes":["136.3"],"sec":["136.3"],"round":["138.3"],"设置允许绘制的变量":["138.3"],"event":["138.3"],"pagex":["138.3"],"offsetleft":["138.3"],"pagey":["138.3"],"offsettop":["138.3"],"moveto":["138.3","147.5"],"onmouseleave":["138.3"],"inputcolor":["138.4"],"endfill":["140.2"],"轻量级的":["141.1"],"技术进行硬件加速渲染":["141.3"],"能够处理大量的图形元素并实现流畅的动画效果":["141.3"],"提供了简洁而直观的":["141.4"],"sprite":["141.5"],"可以在现代浏览器上运行":["141.6"],"onassetsloaded":["141.7"],"当纹理加载完成后执行的回调函数":["141.7"],"创建一个矩形":["142.2"],"rectangle":["142.2"],"设置边框样式":["142.2"],"linestyle":["142.2"],"appendchild":["143.1"],"显示helloworld文字":["143.1"],"创建一个圆形":["143.2"],"circle":["143.2"],"创建一个纹理":["145.1"],"texture":["145.1"],"img14":["145.1"],"filters":["145.2"],"监听鼠标是否进入精灵":["145.2"],"轮廓宽度":["145.3"],"创建发光滤镜":["145.3"],"glowfilter":["145.3"],"window":["146.1"],"innerwidth":["146.1"],"drawellipse":["147.1"],"drawpolygon":["147.2"],"宽":["147.3"],"高":["147.3"],"圆角半径":["147.3"],"结束角度":["147.4"],"顺":["147.4"],"逆时针":["147.4"],"透明度":["147.5"],"jfs":["149.1"],"t1":["149.1"],"5c1b0581e1fa6c1c3":["149.1"],"58519cee2a0039e0":["149.1"],"jpg":["149.1"],"异步加载资源":["149.1","149.2"],"texturespromise":["149.1","149.2"],"加载完成后创建精灵":["149.1"],"loadbundle":["149.2"],"progress":["149.2"],"加载完成":["149.2"],"图像在放大或改变尺寸的情况下其图形质量不会有所损失":["150.1"],"因此能够优雅而简洁地渲染不同大小的图形":["150.1"],"并和":["150.1"],"x1":["150.3"],"x2":["150.3"],"r":["150.5"],"cy":["150.6"],"l":["150.9"],"渲染器是最常用的":["151.0"],"因为它利用了":["151.0"],"gpu":["151.0"],"加速":["151.0"],"提供更高的性能和更好的渲染效果":["151.0"],"scene":["151.0"],"场景是":["151.0"],"中所有":["151.0"],"对象的容器":["151.0"],"您可以在场景中添加":["151.0"],"移动和管理各种":["151.0"],"如几何体":["151.0"],"threejs":["152.3"],"three":["152.6"],"pi":["153.3"],"围绕x轴旋转45度":["153.3"],"blog":["154.0"],"readme":["154.1"],"新建文件夹":["154.2"],"在文件夹":["154.2"],"内新建":["154.2"],"cd":["154.3"],"dev":["154.4"],"打包":["154.4"],"作为我们的主页":["154.6"],"在新建一个":["154.6"],"logo":["154.7"],"alt":["154.7"],"yyg":["154.7"],"actions":["154.7"],"theme":["154.7"],"brand":["154.7"],"左上角的logo":["154.9"],"它的路径是从public文件夹开始的":["154.9"],"所以这里引用的是public":["154.9"],"jpg这张图":["154.9"],"是不是可以动态展开":["154.10"],"collapsed":["154.10"],"发布到":["154.11"],"repo":["154.11"],"push":["154.11"]},{"0":["13.14","16.1","19.1","29.23","30.22","32.4","34.3","34.6","44.3","48.14","49.2","52.7","92.15","102.10","122.11","128.1","128.4","147.4","149.1"],"1":["9.3","9.4","9.10","10.7","10.13","13.4","14.1","14.17","29.23","34.4","34.5","34.6","43.15","48.2","48.9","48.14","52.9","55.6","65.2","75.4","84.4","94.0","101.9","102.10","103.4","103.5","104.2","104.3","128.2","128.4","153.1"],"2":["9.3","9.4","9.5","9.7","9.10","10.7","13.4","14.1","16.5","16.14","18.20","21.1","21.2","41.24","42.4","44.6","48.2","50.6","54.14","55.6","65.2","67.1","68.7","92.3","94.0","99.16","101.4","103.4","103.5","104.2","104.3","117.6","128.4","130.1","153.1"],"3":["9.5","9.7","9.13","10.7","14.5","14.8","14.15","16.14","40.1","41.1","42.4","46.1","49.9","49.12","50.7","50.8","52.7","53.7","55.6","73.4","95.3","98.1","99.18","101.4","103.4","117.6","122.2","151.0","153.2"],"4":["9.13","10.18","14.8","39.1","40.2","48.20","53.7","55.6","58.0","73.9","87.1","101.6","103.4","113.1","122.11","150.1","151.0"],"5":["5.6","18.25","35.6","48.19","48.20","49.8","53.6","65.4","70.0","86.7","99.7","101.6","122.14"],"6":["10.3","36.6","70.0","99.8","101.2"],"7":["6.4","52.7","122.3"],"8":["6.4","51.3"],"9":["11.8","110.7"],"10":["131.2","131.4"],"11":["84.3"],"15":["145.3"],"16":["110.3"],"17":["53.2"],"18":["55.4","92.2","102.6"],"20":["102.8"],"25":["81.1","90.2"],"29":["55.1"],"30":["90.1","90.2","128.1","128.2","136.3","150.8","150.9"],"32":["147.4"],"35":["145.1"],"40":["150.9"],"50":["20.5","134.2","150.5"],"54":["147.3"],"58":["153.5"],"64":["147.1"],"66":["150.9"],"77":["153.5"],"80":["118.8"],"90":["86.12","150.7"],"100":["45.1","49.2","128.1","128.3","131.2","142.2","143.1","147.5","150.7"],"120":["150.9"],"123":["52.10","102.9","109.2"],"150":["150.4"],"160":["147.3"],"164":["147.1"],"200":["132.0","134.2","142.2","150.3","150.7","150.8"],"294":["113.1"],"295":["113.1"],"300":["142.2"],"324":["87.2"],"350":["133.3"],"400":["24.0"],"408":["98.4"],"409":["98.4"],"450":["134.1","134.2"],"500":["134.2"],"600":["136.4","137.2"],"967":["113.1"],"1970":["81.3","113.4"],"2015":["8.1"],"2016":["6.4"],"2017":["6.4"],"2224":["145.1"],"3000":["118.3"],"12087":["145.1"],"23739":["145.1"],"65535":["113.3"],"中":["5.0","29.8","39.3","72.1","129.0"],"引入了类":["5.0"],"类的方法":["5.1"],"alice":["5.2","8.13","10.17"],"调用父类的构造函数":["5.3"],"this":["5.3","27.5","30.8","32.3","32.14","37.10","39.3","39.4","39.5","39.6","42.6","68.2","93.1","95.12","102.7","102.9","108.0","117.4"],"log":["5.4","5.6","8.23","11.3","11.6","11.11","12.3","13.8","13.17","14.17","15.3","15.4","15.5","15.8","15.10","15.11","30.20","34.5","36.3","36.5","48.10","48.15","48.24","49.10","50.11","53.5","54.5","54.15","54.16","65.3","72.3","77.7","81.2","88.8","92.3","92.11","92.18","93.1","98.6","101.11","101.13","102.6","103.5","118.2","120.3","120.6","120.16","130.1"],"你好":["5.4","143.1"],"我叫":["5.4"],"console":["5.5","5.6","8.23","9.8","11.3","11.6","11.11","11.12","12.2","12.3","12.4","13.17","14.10","14.17","15.3","15.4","15.5","15.8","15.10","15.11","30.20","34.5","41.17","48.10","48.14","48.15","48.23","48.24","49.10","50.11","53.5","54.15","54.16","63.9","77.7","81.2","86.1","88.8","92.3","92.10","92.11","92.14","92.18","93.1","101.13","102.6","103.5","118.2","120.3","120.6","120.16","130.1"],"const":["5.6","13.5","30.5","30.7","30.12","31.10","38.3","63.6","67.5","72.4","77.5","79.2","84.4","88.4","89.2","89.3","90.1","102.1","103.2","104.4","104.6","106.6","110.12"],"actionscript":["6.2"],"jscript":["6.2"],"等":["6.2","73.9"],"所使用":["6.2"],"node":["6.3","121.23"],"环境中可以读写文件等操作":["6.3"],"因为":["6.3"],"是在":["6.3"],"基础上的拓展":["6.3"],"所有":["6.3"],"es7":["6.4"],"es2016":["6.4"],"prototype":["6.4"],"includes":["6.4","73.5"],"用于检查数组是否包含某个元素":["6.4"],"引入指数运算符":["6.4"],"es8":["6.4"],"es2017":["6.4"],"entries":["6.4"],"values":["6.4"],"它是一种用于存储键值对的集合":["7.1"],"判断键是否存在":["7.2"],"true":["7.2","13.20","14.15","31.1","49.5","53.11","53.12","54.3","77.10","92.20","101.5","102.6","145.2"],"city":["7.2"],"false":["7.2","11.13","13.20","31.1","54.7","55.1","85.6"],"删除键值对":["7.2"],"array":["7.4","14.5","48.1","48.32","66.2","70.3","70.4","73.7","101.4"],"from":["7.4","8.11","8.12","8.16","8.18","8.19","8.21","120.8","120.10"],"有重复的键值":["7.6"],"则后面的会覆盖前面的":["7.6"],"对应值即":["7.6"],"为了解决这些问题":["8.1"],"ecmascript":["8.1"],"这些问题会变得更为明显":["8.2"],"模块化的意义在于将代码分割成不同的模块":["8.2"],"每个模块拥有自己的作用域":["8.2"],"并且修改":["8.4"],"而不需要重复编写代码":["8.5"],"关键字":["8.6","10.15","90.0"],"function":["8.8","30.10","52.3","93.1","95.4","101.12","133.5"],"sayhello":["8.8","8.9","8.14","93.1"],"函数或类导入到当前模块中":["8.10"],"module1":["8.11","8.12"],"new":["8.13","63.6","69.1","72.4","95.3","101.10","104.6","118.4","131.3"],"hello":["8.14","11.12","13.1","29.21","31.13","32.14","93.1","95.11","101.7"],"import":["8.16","8.17","8.18","8.22"],"myage":["8.16","95.8"],"main":["8.17","8.18","121.18"],"as":["8.21"],"name":["8.21","30.7","32.7","32.14","41.19","43.11","54.9","55.7","72.7","95.8","103.2","106.1","106.7","116.3","116.8","125.7"],"更好地组织和维护代码":["8.28"],"提高代码的重用性":["8.28"],"出现一次":["9.1"],"thirty":["9.6"],"iterator1":["9.6","9.8"],"for":["9.6","13.22","46.4","49.4","66.2"],"返回一个新的迭代器对象":["9.9"],"该对象包含":["9.9"],"string":["9.12","42.2","54.1","54.6","54.14","101.12","104.4","104.5","106.4","106.7","109.1"],"union":["9.14"],"使用":["9.15","13.22","29.1","33.3","33.15","41.7","154.2"],"方法判断当前":["9.15"],"对象":["9.15","41.15","52.11","52.12","71.5"],"中是否含有":["9.15"],"difference":["9.16"],"es6":["10.3"],"默认值实现方式":["10.3"],"注意":["10.4","29.23"],"null":["10.4","63.5","63.8","68.2","68.7","95.12"],"method":["10.5","13.1","110.10"],"get":["10.5","63.4","63.5","71.5","122.11"],"headers":["10.5"],"http":["10.5","118.3","118.8","121.17"],"example":["10.5","26.3","26.4","27.4","31.6","31.11"],"com":["10.5","31.6","100.4","117.3","145.1"],"报错":["10.5"],"上面代码中":["10.5","52.12","52.13","128.5","131.2"],"的第二个参数是一个对象":["10.5"],"就可以为它的三个属性设置默认值":["10.5"],"解释":["10.7"],"与":["10.7"],"互等":["10.7"],"其实就是":["10.7"],"不同之处在于剩余参数用于解构数组和对象":["10.9"],"从某种意义上说":["10.9"],"slice":["10.10"],"call":["10.10","72.6","95.5"],"终于借助":["10.10"],"方法把":["10.10"],"转化成一个真正的数组了":["10.10"],"但是这样无疑是一个繁琐的过程":["10.10"],"而且不容易理解":["10.10"],"这时":["10.10"],"真数组":["10.11"],"是一个":["10.11"],"这里的剩余参数是个对象":["10.12"],"准确的应该叫":["10.12"],"剩余元素":["10.12"],"func":["10.12"],"本节内容可以总结以下几点":["10.13"],"剩余参数是为了能替代函数内部的":["10.13"],"特性":["10.14","29.20"],"add":["10.15","41.2","112.1","146.4"],"multiply":["10.16","67.1"],"x":["10.16","52.3","98.3","101.12"],"y":["10.16","88.10"],"箭头函数中的this":["10.17"],"person2":["10.17","90.2"],"的指向错误":["10.18"],"在需要动态绑定":["10.18"],"即每个参数占据一行":["10.19"],"以后修改代码的时候":["10.19"],"想为函数":["10.19"],"添加第三个参数":["10.19"],"或者调整参数的次序":["10.19"],"命令后面带有参数":["10.20"],"很多时候":["10.20"],"查":["11.1","48.5"],"以及":["11.2"],"进行字符串拼接之外":["11.2"],"trimright":["11.5"],"repeat":["11.5","18.20"],"copyresult":["11.7"],"world":["11.12","101.7"],"bar":["11.13","41.19"],"arr":["11.16","101.5"],"search":["11.17","59.1"],"pattern":["11.18","88.4","88.8"],"at":["11.18","11.20","118.8"],"bat":["11.19"],"sat":["11.19"],"fat":["11.19"],"result":["11.20","104.4"],"是一种方便拼接字符串的新语法":["12.1"],"模板字符串使用反引号":["12.1"],"m":["12.2","12.5","88.3"],"years":["12.2","12.5","89.2"],"old":["12.2","12.5","89.2"],"breaks":["12.3"],"输出":["12.3","12.5","49.10","65.1","65.2","65.3","88.8","93.2","95.3"],"is":["12.4","27.5","30.8","37.9","72.7","72.9","89.2"],"i":["12.5","89.2","93.1"],"方法也可以简写":["13.1"],"o":["13.1"],"keya":["13.4"],"a":["13.4","13.11","14.6","25.2","27.5","30.8","43.15","69.0","76.2","76.3","99.5","103.4","103.5","118.12","120.13","121.21"],"keyb":["13.4"],"b":["13.4","14.13","14.14","103.5","106.4","120.13","121.21"],"myobject":["13.4"],"javascript":["13.5","65.5","72.13","82.1","82.4","83.1","83.4","88.3","91.2","125.3","127.6","150.1"],"person":["13.5","41.8","95.3","102.9","106.1","106.4"],"这里的":["13.6","118.2"],"都没有用在对象的方法之中":["13.6"],"第一种写法是":["13.6"],"用在属性里面":["13.6"],"第二种和第三种写法是":["13.6"],"用在一个函数里面":["13.6"],"然后赋值给":["13.6"],"目前":["13.6"],"只有对象方法的简写法可以让":["13.6"],"引擎确认":["13.6"],"定义的是对象的方法":["13.6"],"引擎内部":["13.6"],"number":["13.12","35.2","35.3","54.6","86.0","101.12","103.1","104.3","104.5","104.7","106.2","106.3","106.7","109.2"],"字符串在数组中展开":["13.13"],"会直接覆盖":["13.15"],"再优化":["13.18"],"js":["13.20","30.2","53.6","54.16","63.6","77.5","84.4","86.3","86.4","95.3","95.7","105.7","120.10","121.23","131.1"],"foo":["13.20","55.1","95.4"],"注意事项":["13.21"],"基本数据类型作为源对象":["13.21"],"与对象的展开类似":["13.21"],"先转换成对象":["13.21"],"再合并":["13.21"],"undefined":["13.21","14.3","52.13","54.5"],"等方法是实例方法":["13.22"],"返回的都是":["13.22"],"对象的":["13.22"],"等方法是构造函数方法":["13.22"],"返回的是数组":["13.22"],"应用":["13.22"],"of":["13.22"],"循环遍历对象":["13.22"],"元素值为":["14.3"],"的数组":["14.3"],"array1":["14.3"],"key1":["14.4"],"value1":["14.4"],"回调函数":["14.9"],"参数2":["14.9","133.5"],"可选":["14.9","14.10","71.5"],"指定回调函数中的":["14.9"],"被填充的结束索引":["14.10"],"默认为数组末尾":["14.10"],"e":["14.11","117.6","135.2"],"f":["14.11","154.11"],"g":["14.11","105.10","123.0"],"循环":["14.12"],"不管嵌套多少层":["14.16"],"的指向":["14.17"],"下面我将详细介绍数组解构和对象解构的用法":["15.0"],"以及一些扩展功能":["15.0"],"前面必须要加分号":["15.6"],"age":["15.9","55.1","55.4","81.1","92.2","106.3"],"只能选择全部标签":["16.2"],"css":["16.2","16.6","18.2","18.6","18.8","18.10","18.11","18.12","18.13","18.14","18.16","18.30","20.2","75.5"],"pink":["16.3"],"md":["16.4","154.2"],"有标签名":["16.5"],"标签名必须写在前面":["16.5"],"id":["16.5","26.11","29.23","33.15","122.3"],"选择器":["16.5"],"理论上可以作为交集的条件":["16.5"],"但实际应用中几乎不用":["16.5"],"n":["16.6"],"color":["16.7","16.8","26.8"],"p1":["16.9"],"p2":["16.9"],"active":["16.11","138.4"],"链接被按下时的样式":["16.11"],"先找父亲的第":["16.12"],"个孩子":["16.12"],"再看是否为元素":["16.12"],"是成功":["16.12"],"否失败":["16.12"],"是直接找第":["16.12"],"属性且属性值以":["16.13"],"开头的":["16.13"],"style":["16.14","110.9","150.5"],"父级元素添加overflow":["16.14"],"将其属性值设置为":["16.14"],"hidden":["16.14","21.3"],"auto":["16.14","18.16"],"或":["16.14","31.1","35.6","71.0","154.3"],"scroll":["16.14","68.0"],"父级添加after伪元素":["16.14"],"它通过在父元素上设置":["17.0"],"display":["17.0","17.5","17.8","18.3","18.6","18.8","18.9"],"container":["17.1","17.5","17.8","18.2","18.6","18.8","18.9","18.10","18.11","18.22","149.0","149.1","149.2"],"一旦容器成为":["17.1"],"column":["17.2","18.4","18.12","112.1"],"垂直排列":["17.2"],"垂直逆向排列":["17.2"],"项目在交叉轴上的对齐方式":["17.3"],"项目靠交叉轴起始位置对齐":["17.3"],"不换行":["17.4","21.1"],"默认值":["17.4"],"换行":["17.4"],"item":["17.6","17.7","48.31","48.32","69.5","117.4"],"scss":["17.8"],"多行项目平均分布在交叉轴上":["17.9"],"两端不留空白":["17.9"],"around":["17.9"],"两端留有空白":["17.9"],"导航栏布局":["17.10"],"direction":["17.10"],"row":["17.10","18.4"],"分割为网格单元格":["18.1"],"cells":["18.1"],"开发者可以更轻松地控制页面元素在网格中的位置和大小":["18.1"],"来实现":["18.2"],"和":["18.4","20.6","27.1","88.6","95.8","122.13","127.4","150.1"],"属性来指定一个网格项的位置和跨度":["18.4"],"用于更精确地控制网页布局":["18.5"],"可以使用空格分隔值来创建多列或多行":["18.6"],"sidebar":["18.7"],"content":["18.7","43.6","78.2","120.3","120.16"],"footer":["18.7"],"类似":["18.10"],"但允许分别指定列和行的间隔":["18.10"],"fr":["18.11"],"单位":["18.11"],"也可以设置为":["18.12"],"控制项目在行轴上的对齐方式":["18.13","18.15"],"grid":["18.13","18.14"],"控制网格项目在行轴上的对齐方式":["18.14"],"控制项目在列轴上的对齐方式":["18.15"],"网格线名称或":["18.16"],"值来指定位置":["18.16"],"我们可以创建灵活且复杂的网页布局":["18.17"],"第二":["18.18"],"列宽度自适应":["18.18"],"第三列占据剩余空间":["18.18"],"rows":["18.18","18.19"],"大于768px时":["18.20"],"使用两列布局":["18.20"],"布局在实际应用中非常强大":["18.21"],"body":["18.22","29.23","43.14","76.2"],"div":["18.22","29.23","30.21","32.3","32.5","34.4","35.5","37.6","38.4","41.12","43.16"],"class":["18.22","31.5","90.0"],"header":["18.22","18.23","41.30","43.6"],"nav":["18.23","18.24","96.2"],"navigation":["18.23","18.24"],"布局是":["18.26"],"产品展示页面等":["18.27"],"flexbox":["18.27","18.33"],"适用于一维布局":["18.28"],"支持在主轴上对齐网格项":["18.28"],"布局时":["18.29"],"属性来改变网格项的顺序":["18.30"],"但在旧版本的浏览器中可能存在兼容性问题":["18.31"],"为了确保网页在不同浏览器中正常显示":["18.31"],"当网页中包含大量网格项和复杂的布局时":["18.32"],"可能会导致渲染性能下降":["18.32"],"布局":["18.33"],"实现更复杂的布局需求":["18.33"],"结合":["18.33"],"类选择器":["19.0"],"元素选择器":["19.0"],"400px":["20.1","20.3","135.1"],"200px":["20.1"],"background":["20.1","23.2"],"box":["20.3","77.5"],"width":["20.3","21.0","24.0","62.1","118.14","136.4","150.4"],"left":["20.5","133.6"],"top":["20.5"],"margin":["20.6"],"水平居中":["20.7"],"align":["20.7"],"nowrap":["21.1"],"改变元素为box弹性盒子":["21.2"],"line":["21.2"],"clamp":["21.2"],"限定行数":["21.2"],"不是一个规范的属性":["21.2"],"没有在css规范草案中":["21.2"],"position":["21.3"],"relative":["21.3"],"overflow":["21.3"],"piece":["22.0"],"垂直滚动条和水平滚动条交汇的部分":["22.0"],"f00":["23.1"],"朝右的三角形":["23.1"],"60px":["23.1"],"image":["23.2","100.5"],"url":["23.2","98.4","110.10"],"图片路径":["23.2"],"videoplayer":["24.0"],"ogg":["24.2"],"webm":["24.3"],"规定了多媒体资源":["24.5"],"可以是多个":["24.5"],"定义多种媒体资源":["24.6"],"比如":["24.6","42.3"],"自动播放":["24.7"],"muted":["24.7"],"是否静音":["24.7"],"loop":["24.7"],"psuse":["24.8"],"暂停":["24.8"],"demo":["24.10"],"horse":["24.10"],"movie":["24.11"],"mp4":["24.11"],"type":["24.11","26.13","30.18","42.2","42.8","120.16"],"您的浏览器不支持":["24.11"],"html5":["24.11","25.1"],"标签":["24.11","27.3"],"language":["25.0"],"是一种用于创建网页和网页应用程序的标记语言":["25.0"],"版本是":["25.1"],"文档的根元素":["25.1"],"包含整个网页的内容":["25.1"],"头部部分":["25.1"],"为最高级别的标题":["25.2"],"为最低级别":["25.2"],"p":["25.2","26.7","27.1","31.13","32.3","32.5","32.14","34.3","34.4","36.2","36.4","36.5","43.16","52.12","56.2","80.2","102.1","102.10","116.1"],"段落标签":["25.2","27.1"],"用于定义段落文本":["25.2","27.1"],"锚链接标签":["25.2"],"多媒体支持":["25.3"],"video":["25.3"],"audio":["25.3"],"无障碍性":["25.4"],"表单验证":["25.4"],"框架等":["25.4"],"标记":["26.0"],"为了避免这种情况":["26.0"],"这是h3级别的标题":["26.1"],"h4":["26.1"],"www":["26.3","27.4","98.3"],"jpg":["26.4","118.3"],"列表项2":["26.5","26.6"],"包含一段文本":["26.7"],"blue":["26.8"],"表头2":["26.9"],"这是另一行文本":["26.10"],"checkbox":["26.11"],"input":["26.13","30.18","37.14"],"text":["26.13","28.1","30.18","63.9","117.4","143.1","154.9"],"about":["26.14","38.3","118.7"],"关于我们":["26.14"],"您的浏览器不支持视频播放":["26.15"],"ul":["27.1","35.2","35.3","35.5","46.4","75.2"],"li":["27.1","35.2","35.3","46.4","75.2","117.4"],"em":["27.2"],"强调标签":["27.2"],"分别表示强调和斜体":["27.2"],"img":["27.2","44.6"],"从而形成嵌套的关系":["27.3"],"https":["27.4","31.6","31.11"],"tag":["27.5"],"的标签上添加下面的属性":["28.1"],"autocomplete":["28.1"],"off":["28.1"],"库":["29.0","97.1","141.1"],"virtual":["29.1"],"dom":["29.1","29.24","33.12","36.6","37.7"],"虚拟":["29.1"],"技术":["29.1"],"复用和测试":["29.3"],"开发者可以将大型应用程序拆分为小的":["29.3"],"树的差异":["29.4"],"找出需要更新的部分":["29.4"],"并最小化地更新真实":["29.4"],"子组件无法直接修改父组件的数据":["29.5"],"router":["29.6","33.4","38.6"],"用于实现前端路由":["29.6"],"组件可以接受输入的数据":["29.8"],"称为":["29.8"],"通过":["29.9","29.20","51.2","73.0","118.2"],"我们可以以一种更直观的方式描述组件的结构和样式":["29.9"],"父组件可以向子组件传递数据或方法":["29.10"],"这种单向数据流的机制使得":["29.10"],"会自动重新渲染组件以反映最新的状态":["29.11"],"状态是类组件中的一个特殊对象":["29.11"],"我们可以执行特定的操作":["29.12"],"如初始化组件":["29.12"],"发送网络请求":["29.13","31.11"],"处理用户输入等":["29.13"],"在":["29.13","42.7","95.14","129.0"],"和三元表达式":["29.14"],"来控制组件的渲染逻辑":["29.14"],"并将数组的每个元素渲染成相应的组件":["29.15"],"列表渲染允许动态地渲染多个相同类型的组件":["29.15"],"提供了一些方便的组件来处理表单数据":["29.16"],"允许将共享的状态提升到共同的父组件":["29.17"],"实现组件之间的数据共享":["29.17"],"可以增强组件的功能":["29.18"],"使得代码更具可复用性和灵活性":["29.18"],"一层层传递":["29.19"],"上下文提供了一种便捷的方式来在组件之间共享数据":["29.19"],"操作":["29.22"],"的扩展库":["29.22"],"title":["29.23","42.8","51.3","117.4"],"document":["29.23","51.1","77.5"],"mycontainer":["29.23"],"client":["29.24"],"app":["29.24","37.4","39.3","140.2"],"的魔法":["30.0"],"从而使得构建动态":["30.1"],"ui":["30.1"],"变得更加直观和简洁":["30.1"],"将被转换为以下":["30.2"],"也可以是自定义的":["30.4"],"组件":["30.4","154.7"],"的形式":["30.5"],"h1":["30.6"],"syntax":["30.6"],"可复用的组件":["30.9"],"从而使得代码结构更加清晰和易于维护":["30.9"],"jsx":["30.10","30.12","31.5"],"welcome":["30.10","30.14","30.15","36.2","36.4"],"extends":["30.11","31.5","32.14","102.2"],"的条件语句":["30.13"],"如":["30.13","73.9","85.9"],"back":["30.14","30.15"],"比如商品列表":["30.16"],"product":["30.17"],"render":["30.18","31.13","32.4","32.14","34.3","34.4","35.5"],"return":["30.18","31.13","32.4","32.5","32.14","34.3","34.4","35.2","35.3","35.5","36.2","36.4","36.5","52.3","67.6","68.5","73.5","73.6","97.4","103.3","104.6","110.11","120.3","120.6"],"form":["30.18","98.3"],"handlefahrenheitchange":["30.19"],"has":["30.20","69.6"],"mounted":["30.20"],"count":["30.22","32.4","34.6","48.8"],"setcount":["30.22"],"usestate":["30.22"],"handleincrement":["30.22","34.5","34.6"],"并进行必要的操作":["31.0"],"理解":["31.0"],"shouldcomponentupdate":["31.1","35.6"],"在组件更新之前调用":["31.1"],"返回":["31.1"],"用于控制组件是否需要重新渲染":["31.1"],"bind":["31.3"],"setstate":["31.3"],"prevstate":["31.3","31.4","31.8","34.5"],"nextprops":["31.4","31.8","31.9"],"根据props更新state":["31.4","31.8"],"if":["31.4","31.8","31.9","43.15","69.3","69.4","69.6","70.4","120.6","135.2","138.3"],"mycomponent":["31.5","32.14"],"fetch":["31.6","31.11"],"api":["31.6","31.11","76.1","110.10","121.15","127.1","127.3","127.8","141.4"],"data":["31.6","37.16","96.2","98.5","110.11","110.12"],"nextstate":["31.9"],"根据新的props或state判断是否需要重新渲染":["31.9"],"someprop":["31.9"],"获取更新前的dom快照":["31.10"],"snapshot":["31.10"],"somedomelement":["31.10"],"scrolltop":["31.10"],"props":["31.11","32.7","32.8","32.9"],"tip":["31.13","32.15","50.12","91.2","93.4"],"总结":["31.13"],"这些数据被称为":["32.0"],"在组件的生命周期中是只读的":["32.1"],"意味着组件本身无法修改接收到的":["32.1"],"数组":["32.6","49.11","131.1"],"对象等":["32.6"],"isactive":["32.9"],"yes":["32.9"],"no":["32.9"],"使用组件并传递props":["32.10"],"的传递是自上而下的":["32.12"],"的值":["32.13"],"component":["32.14","33.11","33.13","33.14","37.17","38.7","38.10","43.2"],"getelementbyid":["32.15"],"root":["32.15","122.2"],"在上面的例子中":["32.15","33.15","34.7","39.5","72.2"],"如果没有传递":["32.15"],"属性":["32.15","36.6","52.3","52.11","52.13","76.3","93.4","95.8","102.6","106.0","131.2"],"将使用默认值":["32.15"],"spa":["33.1"],"在用户体验和性能方面有很大的优势":["33.1"],"在传统多页应用中":["33.1"],"每次用户切换页面都会导致整个页面的重新加载":["33.1"],"route":["33.3"],"react":["33.4","33.5"],"加载对应的数据":["33.5"],"提供了":["33.6","33.7"],"link":["33.6","38.6","154.7","154.9"],"history":["33.7","44.4"],"对象来管理导航历史记录":["33.7"],"bash":["33.8","38.2"],"install":["33.8","105.10","154.3"],"我们就可以在项目中开始使用它了":["33.9"],"以下是使用":["33.9"],"path":["33.11","33.13","33.14","38.9","122.14"],"exact":["33.11","33.13","33.14"],"reactdom":["33.12"],"user":["33.15","36.2","36.3","36.4","122.2"],"export":["33.15","36.3","36.4","110.12"],"default":["33.15","42.2"],"组件来创建导航链接":["33.15"],"从而实现页面之间的切换":["33.15"],"允许我们在组件内部保存数据":["34.0"],"发生变化时":["34.1"],"会重新渲染组件":["34.1"],"并根据新的":["34.1"],"updated":["34.5","41.28"],"错误的方式":["34.6"],"直接修改state的值":["34.6"],"onclick":["34.7"],"increment":["34.7"],"我们将":["34.7"],"提升到了":["34.7"],"传递给":["34.7"],"这样":["34.7","39.3"],"列表渲染是一种常见的技术":["35.0"],"用于动态地生成列表元素":["35.0"],"的数组和":["35.1"],"map":["35.1","35.5","49.11","54.12","67.5","73.9"],"key":["35.2","35.3","36.6","37.12","66.2"],"listitems":["35.4"],"的性能优化技术":["35.6"],"例如":["35.6","71.5","77.2"],"purecomponent":["35.6"],"来避免不必要的重新渲染":["35.6"],"使用箭头函数":["35.6"],"条件渲染是一种根据特定条件决定是否渲染组件或组件的一部分的技术":["36.0"],"或三元表达式来实现条件渲染":["36.1"],"条件渲染允许我们根据不同的条件来显示或隐藏组件":["36.1"],"或者根据不同的状态来渲染不同的内容":["36.1"],"please":["36.2","36.3","36.5"],"in":["36.3","36.5","66.2"],"to":["36.3","36.5","38.8"],"continue":["36.3","36.5"],"以避免额外的":["36.6"],"节点":["36.6"],"如果返回的元素列表可能会发生变化":["36.6"],"框架":["37.1","119.1"],"它允许您将应用程序划分为可复用的组件":["37.1"],"html":["37.3","38.6","43.14","51.6","120.13","120.14"],"直接引入vue":["37.3"],"on":["37.7","120.4","145.2"],"用于监听":["37.7"],"visible":["37.9"],"isvisible":["37.10"],"items":["37.12","154.9","154.10"],"handleclick":["37.13"],"me":["37.13"],"message":["37.16","41.5","118.8","120.3","120.6"],"数据更新后":["37.18"],"在数据更新之后调用":["37.18"],"发生在重新渲染之后":["37.18"],"可以在此处执行依赖于更新后":["37.18"],"的操作":["37.18"],"beforedestroy":["37.18"],"销毁前":["37.18"],"在实例销毁之前调用":["37.18"],"可以在此处进行清理工作":["37.18"],"的路由功能":["38.1"],"学习":["38.1"],"项目中":["38.2"],"使用npm":["38.2"],"template":["38.4","41.0","41.12","43.13","43.14","43.17"],"home":["38.5"],"beforeeach":["38.8"],"category":["38.9"],"lazy":["38.10"],"重定向":["38.12"],"应用中的共享状态":["39.0"],"state":["39.0"],"中唯一允许修改状态的地方":["39.1"],"它们类似于事件":["39.1"],"每个":["39.1"],"mutation":["39.1"],"都有一个字符串的事件类型和一个回调函数":["39.1"],"在回调函数中进行实际的状态修改操作":["39.1"],"actions":["39.1"],"动作":["39.1"],"的繁琐操作":["39.2"],"可预测性":["39.2"],"由于状态的变更必须通过":["39.2"],"导入":["39.3"],"并将其关联到":["39.3"],"实例中":["39.3"],"整个应用的组件都可以通过":["39.3"],"来访问":["39.3"],"decrement":["39.4"],"组件中的代码":["39.4","39.5","39.6"],"methods":["39.4","39.5"],"我们在":["39.5"],"中新增了一个":["39.5"],"会建立一个与该属性的依赖关系":["40.1"],"每个依赖关系都会跟踪哪些":["40.1"],"watcher":["40.1"],"观察者":["40.1"],"依赖于这个属性":["40.1"],"响应式触发":["40.1"],"reactivity":["40.1","40.2"],"trigger":["40.1","40.2"],"当数据对象的属性被修改时":["40.1"],"它的":["40.1","52.3"],"当数据对象的属性被访问或修改时":["40.2"],"会捕获这些操作":["40.2"],"并触发相应的依赖":["40.2"],"这使得":["40.2"],"能够更精确地追踪数据的依赖关系":["40.2"],"从而避免不必要的更新":["40.2"],"优化与缓存":["40.2"],"引入了许多性能优化策略":["40.2"],"才能于":["41.0"],"中使用":["41.0"],"也不用写":["41.0"],"compositionapi":["41.1"],"新特性都应该写在这个函数内部":["41.1"],"组件中所用到的":["41.1"],"count3":["41.2"],"button":["41.2","41.12","46.2","75.1"],"click":["41.2","46.2","77.2"],"changemsg":["41.4"],"value":["41.4","41.31","52.10","84.2"],"change":["41.4","41.13","41.14","77.11"],"创建一个自定义的":["41.7"],"并对其依赖项跟踪和更新触发进行显式控制":["41.7"],"需求":["41.7"],"zhangsan":["41.8","55.7","95.3"],"ref":["41.9","41.15"],"change1":["41.10"],"test1":["41.10"],"按钮":["41.13","41.14"],"vue":["41.15","43.13","43.14","43.17","110.6"],"参数二":["41.16"],"数据改变时触发的回调函数":["41.16"],"newval":["41.16","41.17"],"oldval":["41.16","41.17"],"name2":["41.20"],"不用直接指定要监视的数据":["41.21"],"回调函数中使用的哪些响应式数据就监视哪些响应式数据":["41.21"],"用于清除":["41.22"],"effect":["41.22"],"侦听器会被链接到该组件的生命周期":["41.23"],"并在组件卸载时自动停止":["41.23"],"sync":["41.24"],"组合式api":["41.25"],"是没有":["41.25"],"update":["41.27","112.2"],"这个周期方法被移除":["41.27"],"beforeupdate":["41.28"],"更新之前":["41.28"],"为":["41.29"],"modifiers":["41.29"],"包含修饰符":["41.29"],"的对象":["41.29"],"height":["41.31","62.1","135.1","137.2","146.1","150.4"],"onresize":["41.31"],"window":["41.31"],"innerwidth":["41.31"],"bus":["42.1"],"可以实现任意组件通信":["42.1"],"pubsub":["42.1"],"发布订阅模式实现任意组件通信":["42.1"],"vuex":["42.1"],"接受的数据类型":["42.2"],"默认参数":["42.2"],"接受默认数据":["42.2"],"事件可以让用户与网页进行交互":["42.3"],"handler1":["42.4"],"我要传递多个参数":["42.4"],"方法执行":["42.5"],"传递一个数组":["42.5"],"数组元素即为将来组件需要触发的自定义事件类型":["42.5"],"此方执行会返回一个":["42.5"],"emit":["42.5"],"方法用于触发自定义事件":["42.5"],"当点击按钮的时候":["42.5"],"事件回调内部调用":["42.5"],"方法去触发自定义事件":["42.5"],"写法没有":["42.6"],"那么在":["42.6"],"想实现全局事件的总线功能就有点不现实啦":["42.6"],"vue3":["42.7","46.1","110.6"],"中一个组件可以通过使用多个":["42.7"],"让父子组件多个数据同步":["42.7"],"下方代码相当于给组件":["42.7"],"success":["42.8"],"size":["42.8"],"small":["42.8"],"标题":["42.8"],"但是需要注意":["42.9"],"如果想让父组件获取子组件的数据或者方法需要通过":["42.9"],"defineexpose":["42.9"],"对外暴露":["42.9"],"方法用于提供数据":["42.10"],"此方法执需要传递两个参数":["42.10"],"分别提供数据的":["42.10"],"也是集中式管理状态容器":["42.11"],"类似于":["42.11","77.8"],"b替换":["42.12"],"填入组件b部分的结构":["42.12"],"作用域插槽":["42.12"],"可以理解为":["42.12"],"子组件数据由父组件提供":["42.12"],"但是子组件内部决定不了自身结构与外观":["42.12"],"样式":["42.12"],"子组件":["42.12"],"代码如下":["42.12"],"components":["43.2","64.1","152.3","154.7"],"更加友好":["43.5"],"在使用":["43.5"],"right":["43.6","133.6"],"fancybutton":["43.10"],"msg":["43.12","43.16","122.11"],"插槽里的节点":["43.13"],"异步组件":["43.13"],"自定义classname等等":["43.14"],"comp":["43.15"],"v":["43.15","46.4"],"选项已移除":["43.17"],"父组件":["43.17"],"modelvalue简写为v":["43.17"],"cli":["44.2"],"babel":["44.4","110.7"],"alongside":["44.4"],"linter":["44.4"],"formatter":["44.4"],"config":["44.4","97.4","98.4","110.11"],"动态导入":["44.5"],"hmr":["44.5"],"速度快到惊人的":["44.5"],"构建的项目模板":["44.6"],"latest":["44.7"],"位贡献者":["45.1"],"内存减少54":["45.2"],"使用proxy代替defineproperty实现数据响应式":["45.2"],"provide与inject":["45.3"],"新组件":["45.3"],"fragment":["45.3"],"对":["46.1","52.13"],"的改进":["46.1"],"不好定义了需要在开启一个":["46.3"],"script":["46.3","51.2","124.3"],"然后放到一个变量中":["48.0"],"管理非常方便":["48.0"],"创建了一个空的数组":["48.1"],"splice":["48.6","48.11","69.2"],"red":["48.7","54.10","136.3"],"yellow":["48.9","143.2"],"orange":["48.9"],"brown":["48.10"],"取得最后一项":["48.12"],"取得第一项":["48.13"],"删除第一项":["48.14"],"purple":["48.17"],"插入两个值":["48.17"],"删除一个元素":["48.17"],"find":["48.18"],"element":["48.21","56.1","77.3"],"index":["48.21","48.32","117.5","120.13","120.14"],"every":["48.27"],"someresult":["48.28"],"everyresult":["48.29"],"filterresult":["48.31"],"执行流程":["49.1"],"语句在执行会先对":["49.1"],"isnan":["49.2"],"alert":["49.2","92.4"],"请输入一个合法的分数":["49.2"],"当成绩为100时":["49.2"],"奖励一辆bmw":["49.2"],"语句在执行时":["49.3"],"会依次将":["49.3"],"后的表达式和":["49.3"],"后的表达式进行全等比较":["49.3"],"会先对条件表达式进行判断":["49.5"],"如果结果为":["49.5","53.12"],"则执行循环体":["49.5"],"会先执行":["49.6"],"后的循环体":["49.6"],"执行完毕后":["49.6"],"会对while后的条件表达式进行判断":["49.6"],"c":["49.9","111.1","120.13"],"let":["49.9","54.11","66.2","68.5","103.4","106.2","106.3"],"prop":["49.9"],"函数等":["49.11"],"循环适用于遍历可迭代对象":["49.11"],"包括数组":["49.11"],"字符串":["49.11"],"用来跳过当次循环":["49.12"],"循环语句也能实现一些简单的重复操作":["50.0"],"但是比较具有局限性":["50.0"],"此时我们就可以使用":["50.0"],"这是函数表达式写法":["50.2"],"匿名函数后面跟分号结束":["50.2"],"var":["50.2","82.2","83.2","120.10","131.3"],"函数不调用自己不执行":["50.3"],"调用函数的时候千万不要忘记加小括号":["50.3"],"函数是可以相互调用的":["50.3"],"实参2":["50.6"],"在函数调用的小括号里面是实参":["50.6"],"实际的参数":["50.6"],"形参和实参的执行过程":["50.6"],"如果实参的个数小于形参的个数":["50.7"],"多于的形参定义为undefined":["50.7"],"最终的结果就是":["50.7"],"nan":["50.7"],"形参可以看做是不用声明的变量":["50.7"],"返回的结果是最后一个值":["50.8"],"我们求任意两个数的":["50.8"],"加减乘数结果":["50.8"],"继续执行下次循环":["50.9"],"无需调用":["50.12"],"但它是一种解释性语言":["51.0"],"不需要编译":["51.0"],"标签将":["51.2"],"基":["51.3"],"属性引入":["51.4"],"标签如果带":["51.4"],"alt":["51.7"],"就指向一个对象":["52.2"],"该对象内部包含两个键值对":["52.2"],"又称为两个":["52.2"],"成员":["52.2"],"第一个键值对是":["52.2"],"property":["52.3"],"键值":["52.3"],"可以是任何数据类型":["52.3"],"如果一个属性的值为函数":["52.3"],"通常把这个属性称为":["52.3"],"方法":["52.3","79.1"],"它可以像函数那样调用":["52.3"],"然后":["52.4","71.5","131.2"],"的值变为":["52.4"],"这时不会对":["52.4"],"才能执行":["52.5"],"如果要解释为对象":["52.5"],"最好在大括号前加上圆括号":["52.5"],"因为圆括号的里面":["52.5"],"只能是表达式":["52.5"],"所以确保大括号只能解释为对象":["52.5"],"数字键可以不加引号":["52.7"],"因为会自动转成字符串":["52.7"],"后绑定":["52.8"],"也就是说":["52.8"],"你可以在任意时刻新增属性":["52.8"],"没必要在定义对象的时候":["52.8"],"key2":["52.9"],"defineproperty":["52.10"],"configurable":["52.10"],"上面代码之中":["52.10"],"哪些属性是继承的":["52.11"],"就像上面代码中":["52.11"],"本身并没有":["52.11"],"但是":["52.11"],"native":["52.12"],"code":["52.12","110.7"],"没有任何输出":["52.12"],"继承了":["52.12"],"并没有":["52.13"],"赋值等于创造了一个全局变量":["52.13"],"正确的写法应该是":["52.13"],"先定义对象":["52.13"],"中常用的运算符有":["53.1"],"算数运算符":["53.1"],"浮点数的进度问题":["53.2"],"浮点数值的最高精度是":["53.2"],"乘等于":["53.3"],"是旧值":["53.6"],"a1":["53.6"],"判等号":["53.7"],"判断两边值是否相等":["53.7"],"没有":["53.9","53.10"],"才会返回":["53.9","53.10"],"对于非布尔值进行与运算":["53.9"],"对于非布尔值或运算":["53.10"],"即圆括号中的表达式会第一个运算":["53.13"],"使用运算符时":["53.13"],"如果遇到拿不准的":["53.13"],"可以直接通过":["53.13"],"boolean":["54.1"],"floatnum3":["54.2"],"有效":["54.2"],"但不推荐":["54.2"],"floatnum":["54.2"],"包含":["54.3"],"值的变量跟未定义变量是有区别的":["54.3"],"jingleheimerschmidt":["54.4"],"字符串是不可变的":["54.4"],"意思是一旦创建":["54.4"],"非空字符串":["54.6"],"foosymbol":["54.7"],"nicholas":["54.9"],"colors":["54.10"],"利用string":["54.14"],"typeof":["54.15"],"只用这5种情况":["54.16"],"其他都为true":["54.16"],"当我们把变量赋值给一个变量时":["54.17"],"10值":["54.18"],"引用类型数据存放在堆中":["54.19"],"每个堆内存对象都有对应的引用地址指向它":["54.19"],"引用地址存放在栈中":["54.19"],"简单类型赋值":["54.20"],"是生成相同的值":["54.20"],"found":["55.1"],"不能定义名为eval":["55.1"],"和arguments":["55.1"],"的变量":["55.1"],"否则会导致语法错误":["55.1"],"声明提升":["55.1"],"lisi":["55.2","55.7"],"不会被提升":["55.3"],"try":["55.5"],"你可能以为会输出0":["55.6"],"实际上会输出5":["55.6"],"比":["55.8"],"优先级高":["55.8"],"它提供了对文档内容进行访问和操作的方法和属性":["56.0"],"创建新元素":["56.1"],"并使用":["56.1"],"appendchild":["56.1"],"createelement":["56.2"],"textcontent":["56.2"],"可以使用它向前或向后导航":["57.0"],"go":["57.1"],"forward":["57.2"],"导航到相对于当前页面的偏移量为2的页面":["57.2"],"的各个部分":["58.0"],"如协议":["58.0"],"主机名":["58.0"],"路径和查询参数等":["58.0"],"同时也提供了一些导航方法":["58.0"],"如重定向到其他":["58.0"],"刷新页面等":["58.0"],"它包含了":["59.0"],"的路径部分":["59.1"],"将页面重定向到新的url":["59.2"],"assign":["59.2"],"如浏览器的名称":["60.0"],"版本":["60.0","124.4"],"appversion":["60.1"],"获取浏览器的版本":["60.2"],"如屏幕的尺寸":["61.0"],"不包括系统任务栏或工具栏":["61.1"],"屏幕可用宽度":["61.2"],"availwidth":["61.2"],"获取屏幕的可用高度":["61.2"],"的顶级对象":["62.0"],"调整窗口的大小":["62.1"],"close":["62.2","120.7"],"调整窗口大小":["62.2"],"与服务器交换数据":["63.1"],"并且更新部分网页":["63.1"],"的原理简单来说通过":["63.1"],"构建请求所需的数据内容":["63.2"],"并通过":["63.2"],"实例对象":["63.3"],"常见的有":["63.4"],"post":["63.4","63.8","110.10"],"服务端地址":["63.4"],"如果不传递数据则为":["63.5"],"如果使用":["63.5"],"属性用于接收服务器端的响应结果":["63.6"],"举个例子":["63.6"],"request":["63.6","97.5"],"send":["63.8","122.5","122.11"],"else":["63.8","120.17"],"xml":["63.9"],"请求成功后的回调函数":["63.9"],"carousel":["64.1"],"即使外部函数已经执行完毕":["65.0"],"也可以继续访问":["65.0"],"closure":["65.1"],"在上述示例中":["65.2","71.3","71.5","74.4","81.1"],"通过捕获外部变量":["65.4"],"闭包可以持久化存储函数的状态":["65.4"],"并在每次调用时保持该状态":["65.4"],"这在处理异步操作":["65.4"],"定时器和事件处理等场景中特别有用":["65.4"],"实现函数柯里化":["65.4"],"可能会导致意外的行为":["65.5"],"闭包是":["65.5"],"中一项强大的特性":["65.5"],"originalobject":["66.1"],"使用扩展运算符":["66.1"],"newobj":["66.2","92.7"],"isarray":["66.2","70.4","73.7"],"用于乘以":["67.1"],"柯里化可能会增加代码的复杂性和理解难度":["67.2"],"过度的柯里化可能导致函数嵌套过深":["67.2"],"难以阅读和调试":["67.2"],"因此":["67.2","72.17","81.4"],"在使用柯里化时":["67.2"],"需要根据具体场景和需求权衡使用的程度":["67.2"],"concat":["67.4","70.3","73.7"],"nextargs":["67.5"],"mergedargs":["67.5"],"arg":["67.5"],"这种方法使用箭头函数和递归来实现柯里化":["67.6"],"keypress":["68.0"],"mousemove":["68.0","68.4"],"等事件在触发时":["68.0"],"会不断地调用绑定在事件上的回调函数":["68.0"],"mousedown":["68.1","68.4"],"settimeout":["68.2","68.6"],"apply":["68.2"],"starttime":["68.3"],"curtime":["68.3"],"delay":["68.5"],"timer":["68.5"],"callnow":["68.6"],"第一次会立即执行":["68.6"],"以后只有事件执行后才会再次触发":["68.6"],"定义要进行的函数":["68.7"],"uniquearray":["69.1"],"每删除一个树":["69.2"],"保证j的值经过自加后不变":["69.2"],"length":["69.3","69.4","69.6","101.14"],"使用infinity":["70.1"],"无论多少层都将扁平化为一维数组":["70.1"],"优化":["70.2"],"res3":["70.2"],"变为":["71.0"],"时":["71.0","87.1"],"会调用相应的回调函数":["71.0"],"在操作失败时调用":["71.1"],"error":["71.1","71.2","85.9","97.4","102.6","109.1","110.11"],"在回调函数中":["71.1"],"可以执行异步操作":["71.1"],"例如发送网络请求":["71.1"],"处理成功的结果":["71.2"],"处理失败的结果":["71.2"],"处理任意一个操作失败的结果":["71.3"],"第一个":["71.3","128.5"],"方法返回了一个新的":["71.3"],"并返回一个新的":["71.4"],"当":["71.4","108.0"],"中的所有":["71.4"],"实例都成功完成时":["71.4"],"新的":["71.4"],"实例的":["71.4"],"函数封装了一个基本的":["71.5"],"请求":["71.5","98.3"],"它接收三个参数":["71.5"],"请求的":["71.5"],"请求的方法":["71.5"],"和请求的数据":["71.5"],"函数内部创建了一个":["71.5"],"并使用传递的参数设置请求的相关属性":["71.5"],"方法发送请求":["71.5"],"当请求成功完成时":["71.5"],"原型是一个关键的概念":["72.1"],"定义了一个构造函数":["72.2"],"它有一个属性":["72.2"],"和一个方法":["72.2"],"buddy":["72.4"],"golden":["72.4"],"retriever":["72.4"],"breed":["72.6","72.8"],"eating":["72.7","72.9"],"dog":["72.7","72.8","72.9","102.2"],"这意味着你可以在运行时更改对象的原型":["72.11"],"这种灵活性可以带来很多优势":["72.11"],"这意味着一个对象可以继承多个原型对象的属性和方法":["72.12"],"因为它可能会导致意外的行为和不稳定性":["72.15"],"如果需要扩展内建对象的功能":["72.15"],"因为所有对象实例共享同一个方法":["72.16"],"将数组缩减为单个值":["73.0"],"当前值":["73.1"],"currentvalue":["73.1"],"当前索引":["73.1"],"pre":["73.6"],"cur":["73.6","73.7"],"sum":["73.8"],"reduce":["73.8"],"filter":["73.9"],"foreach":["73.9"],"全局作用域和局部作用域":["74.0"],"内部的":["74.4","92.5"],"盒子插入节点":["75.1"],"btn":["75.1"],"再来看另一种情形的代码演示":["75.1"],"不仅如此":["75.3"],"span":["75.4"],"初级":["75.4"],"变色":["75.4"],"应用程序编程接口":["76.1"],"来访问和操作":["76.1"],"树中的节点":["76.1"],"文本":["76.2"],"href":["76.2","76.3"],"标签的":["76.3"],"提供了丰富的功能和方法":["76.4"],"使开发者能够通过":["76.4"],"与网页进行交互和动态操作":["76.4"],"它允许你监听和响应用户与网页元素之间的交互":["77.0"],"鼠标点击":["77.1"],"网页中的一个按钮":["77.1"],"其中":["77.2","78.1","116.1"],"是要监听的事件名称":["77.2"],"mouseover":["77.2"],"contextmenu":["77.5"],"当用户在元素上点击鼠标右键时触发":["77.5"],"通常用于显示自定义的上下文菜单":["77.5"],"wheel":["77.5"],"当用户使用鼠标滚轮时触发":["77.5"],"queryselector":["77.5"],"keyup":["77.6"],"有焦点触发":["77.7"],"当用户释放键盘上的按键时触发":["77.8"],"在事件处理程序中":["77.9"],"可以通过事件对象访问有关事件的详细信息":["77.9"],"事件对象提供了许多属性和方法":["77.9"],"以帮助我们处理事件":["77.9"],"事件捕获":["77.10"],"可以通过将第三个参数设置为":["77.10"],"来启用事件捕获模式":["77.10"],"在事件捕获模式下":["77.10"],"focus":["77.11"],"blur":["77.11"],"页面加载事件":["77.11"],"事件委托还可以解决动态添加或删除的子元素无法自动绑定事件监听器的问题":["77.12"],"因为委托是基于事件冒泡的":["77.12"],"所以后续添加的子元素也能够触发绑定在父元素上的事件监听器":["77.12"],"总结起来":["77.12"],"事件委托是一种利用事件冒泡机制":["77.12"],"在父元素上统一绑定事件监听器":["77.12"],"通过事件的目标元素来判断并处理子元素的事件":["77.12"],"提供了更简洁":["77.12"],"删除指定的子节点":["78.0"],"setattribute":["78.0"],"或者":["78.2","98.6","121.13"],"existingelement":["78.3"],"插入到":["78.3"],"是相应的属性值":["79.1"],"获取元素的计算样式":["79.1"],"getcomputedstyle":["79.1"],"则添加它":["79.2"],"检查是否包含类名":["79.2"],"contains":["79.2"],"hasclass":["79.2"],"根据选择器获取匹配的第一个元素节点":["80.0"],"queryselectorall":["80.0"],"根据选择器获取匹配的所有元素节点":["80.0"],"通过标签名获取元素":["80.1"],"getelementsbytagname":["80.1"],"传入标签名":["80.1"],"修改元素的属性":["80.2"],"存储在用户的计算机上":["81.0"],"每次用户请求与相同域名下的网页时":["81.0"],"浏览器都会将相关":["81.0"],"我们设置了两个":["81.1"],"00":["81.3"],"的存储容量都有限制":["81.4"],"通常在几":["81.4","82.6","83.6"],"kb":["81.4"],"左右":["81.4","82.6","83.6"],"存储大量数据可能会导致溢出或性能问题":["81.4"],"sessionstorage":["82.0"],"不同":["82.0","83.0"],"是对应的值":["82.1","83.1"],"存储的值必须是字符串类型":["82.1","83.1"],"username":["82.2","83.2","116.1","122.11"],"setitem":["82.3","83.3"],"中的所有数据":["82.5","83.5"],"的存储容量是有限的":["82.6","83.6"],"mb":["82.6","83.6"],"localstorage":["83.0"],"日至今的毫秒数":["84.1"],"gettimezoneoffset":["84.1"],"获取本地时间与":["84.1"],"utc":["84.1"],"时间之间的时差":["84.1"],"返回值为以分钟为单位的整数值":["84.1"],"setdate":["84.1"],"day":["84.1"],"设置日期的天数为指定的值":["84.1"],"参数为一个整数":["84.1"],"setfullyear":["84.1"],"year":["84.1"],"设置日期的年份为指定的值":["84.1"],"参数为一个四位数的整数":["84.1"],"sethours":["84.1"],"hour":["84.1"],"设置日期的小时数为指定的值":["84.1"],"第二个参数为月份":["84.3"],"到":["84.3"],"之间的整数值":["84.3"],"表示从一月到十二月":["84.3"],"实例化":["84.4"],"today":["84.5"],"无论是处理基本数据类型":["85.0"],"集合数据":["85.0"],"文本数据还是进行数学计算":["85.0"],"date":["85.1"],"日期时间":["85.1"],"math":["85.1","146.3","147.4"],"提供了一系列通用的方法":["85.2"],"查询":["85.3"],"查找":["85.4"],"替换等":["85.4"],"计算等":["85.5"],"格式化等":["85.7"],"计算平方根":["85.8"],"生成随机数等":["85.8"],"还有一些其他的内置对象":["85.9"],"类型":["86.0","110.8"],"舍弃小数部分":["86.5","86.6"],"整数部分加1":["86.5"],"整数部分不变":["86.6"],"求":["86.10"],"的":["86.10","92.3"],"求某数的平方根":["86.11"],"pi":["86.13","146.3"],"将返回":["87.1"],"min":["87.2"],"5e":["87.2"],"positive":["87.2"],"negative":["87.2"],"使用正则表达式来检查字符串是否符合特定模式":["88.1"],"搜索":["88.1"],"searching":["88.1"],"使用正则表达式在字符串中查找特定模式的出现位置":["88.1"],"替换":["88.1"],"replacing":["88.1"],"匹配前面的元素零次或一次":["88.5"],"定义字符类":["88.5"],"多行匹配":["88.6"],"允许":["88.6"],"匹配单词字符":["88.7"],"w":["88.7","105.9"],"匹配非单词字符":["88.7"],"greeting":["88.9"],"subject":["88.9"],"u":["88.10","101.8"],"启用":["88.10"],"unicode":["88.10"],"匹配模式":["88.10"],"粘附模式":["88.10"],"日期":["88.11"],"数字等":["88.11"],"语法解析":["88.11"],"使用正则表达式解析特定的语法或格式":["88.11"],"object":["89.1"],"create":["89.1","92.14","98.2","102.6"],"and":["89.2"],"am":["89.2","93.1"],"unknown":["89.3"],"sound":["89.3"],"使得类的定义和使用更加直观和方便":["90.0"],"使用构造函数创建对象实例":["90.1"],"person1":["90.1","95.3"],"john":["90.1","90.2"],"jane":["90.2","93.2"],"在面向对象编程中":["91.1"],"的属性和方法":["91.2"],"从而实现代码的重用和扩展":["91.2"],"多态性":["91.2"],"多态性允许不同的对象对相同的消息作出不同的响应":["91.2"],"它可以通过函数重载或方法覆盖来实现":["91.2"],"obj":["92.3"],"sayhi":["92.4"],"我的名字叫":["92.4"],"返回一个给定对象自身的所有":["92.5"],"symbol":["92.5"],"属性的数组":["92.5"],"getprototypeof":["92.5"],"返回指定对象的原型":["92.5"],"mergedobj":["92.6"],"不会影响原对象":["92.10"],"propnames":["92.12"],"symbols":["92.13"],"我们可以实现继承":["93.3"],"子对象可以继承父对象的属性和方法":["93.3"],"proto":["93.4"],"myfunction":["94.0"],"在这个函数内的代码会在严格模式下运行":["94.0"],"严格模式的一些特性和限制包括":["94.0"],"变量必须先声明后使用":["94.0"],"避免意外创建全局变量":["94.0"],"一个执行期上下文定义了一个函数执行时的环境":["95.1"],"每调用一次函数":["95.1"],"指向的是一个对象":["95.2"],"构造函数":["95.3"],"指向实例对象":["95.3"],"arrowfn":["95.4"],"常见的方法有":["95.5"],"语法":["95.7"],"fn1":["95.7","95.10"],"实现继承":["95.8"],"给":["95.8"],"father":["95.8"],"增加":["95.8"],"myname":["95.8"],"想要将this指向哪里":["95.10"],"函数实参1":["95.10"],"函数实参2":["95.10","95.14"],"备注":["95.10"],"指向":["95.12"],"所以":["95.12"],"第一个参数填":["95.12"],"或者填":["95.12"],"都可以":["95.12"],"严格模式中":["95.12"],"参数":["95.14"],"第一个参数":["95.14"],"函数运行时":["95.14"],"指定":["95.14"],"可以用在浏览器和":["97.1"],"axios":["97.2"],"在发送请求之前做些什么":["97.4"],"对请求错误做些什么":["97.4"],"提出了要求":["97.5"],"但没有收到答复":["97.5"],"是浏览器中xmlhttprequest的一个实例":["97.5"],"请求头设置":["98.1"],"一般可以在请求头中携带公共的参数":["98.1"],"baseurl":["98.2"],"application":["98.3"],"urlencoded":["98.3"],"请求超时":["98.4"],"系统已存在相同数据":["98.4"],"imort":["98.6"],"getaction":["98.6"],"getaction方法所在的文件路径":["98.6"],"省时又省力他不香吗":["98.7"],"前端架构带你":["98.7"],"local":["99.1"],"比较两个版本的差异":["99.7"],"以前者为基准看后者的变化":["99.7"],"表示最后一次":["99.7"],"commit":["99.7"],"对应的版本":["99.7"],"查看所有分支的版本历史":["99.8"],"all":["99.8"],"以图形形式展示版本历史":["99.8"],"强制删除本地分支":["99.12"],"分":["99.14"],"做":["99.14"],"以便把":["99.14"],"合":["99.14"],"到当前分":["99.14"],"amend":["99.16"],"合并":["99.16"],"删除远程仓库别名":["99.18"],"克隆远程仓库指定分支到本地":["99.19"],"等同于推送一个空的本地分支到远程分支":["99.21"],"表示删除指定的远程分支":["99.21"],"等同于":["99.21"],"scm":["100.1"],"bush":["100.2"],"here":["100.2"],"email":["100.3"],"xxxx":["100.3"],"xxx":["100.4"],"直接按三次回车":["100.4"],"ssh个人设置":["100.5"],"也可以使用es6的字符串模板":["101.1"],"decimal":["101.2"],"使用构造函数":["101.3"],"创造的对象不是布尔值":["101.3"],"第二种方式是使用数组泛型":["101.4"],"当赋值或访问一个已知索引的元素时":["101.5"],"会得到正确的类型":["101.5"],"字符串枚举":["101.6"],"warning":["101.8"],"test":["101.9","122.2"],"num1":["101.9"],"throw":["101.10"],"只会抛出异常没有返回值":["101.11"],"定义一个一个函数得到一个数字或字符串值的长度":["101.12"],"getlength":["101.12"],"strlength2":["101.14"],"可以定义类":["102.0"],"基本上":["102.0"],"es6的class可以看作只是一个":["102.0"],"我":["102.1"],"了":["102.1"],"创建类的实例":["102.1"],"cry":["102.2"],"可以让你定义的变量":["102.4"],"内部访问":["102.4"],"代表定义的变量私有的只能在内部访问":["102.5"],"zs":["102.6"],"静态函数":["102.8"],"同样也是不能通过this":["102.8"],"去调用":["102.8"],"也是通过类名去调用":["102.8"],"constructor":["102.9"],"super":["102.11"],"的类型":["103.0"],"fn":["103.2","106.7"],"str":["104.2","120.8","120.10"],"树哥":["104.5"],"interface":["104.7","106.1"],"len":["104.7"],"它是":["105.1"],"ts属于":["105.2"],"强类型":["105.2"],"语言":["105.2"],"ts不能直接执行":["105.3"],"需要先编译成":["105.3"],"支持最新的javascript新特特性":["105.5"],"周边生态繁荣":["105.5"],"typescript就并不是那么顺畅":["105.6"],"ts":["105.7","110.8"],"indexts":["105.7"],"升成tsconfig":["105.7"],"和行为":["106.0"],"必须与接口保持一致":["106.1"],"any":["106.6","108.0","110.8"],"类":["107.0"],"严格模式下":["107.1"],"不可以":["107.1"],"bigobject":["107.1"],"表达式值为":["108.0"],"类型的时候":["108.0"],"生成一个错误":["108.0"],"alwaysstrict":["108.0"],"以严格模式检查每个模块":["108.0"],"并在每个文件里加入":["108.0"],"use":["108.0","110.11","122.14"],"额外的检查":["108.0"],"nounusedlocals":["108.0"],"有未使用的变量时":["108.0"],"抛出错误":["108.0"],"nounusedparameters":["108.0"],"有未使用的参数时":["108.0"],"noimplicitreturns":["108.0"],"并不是所有函数里的代码都有返回值时":["108.0"],"nofallthroughcasesinswitch":["108.0"],"abc":["109.1"],"不能将类型":["109.1"],"s1":["109.2"],"commitlint":["110.2"],"来统一提交规范":["110.2"],"preinstall":["110.2"],"pnpm":["110.3"],"内部潜在的":["110.4"],"bug":["110.4"],"极大的优化了性能":["110.4"],"扩展了使用场景":["110.4"],"被誉为":["110.4"],"最先进的包管理工具":["110.4"],"对象不能出现重复key":["110.6"],"recommended":["110.6"],"vue3语法规则":["110.6"],"plugin":["110.6"],"essential":["110.6"],"ts语法规则":["110.6"],"typescript":["110.6"],"要为特定类型的文件指定处理器":["110.6"],"查找违规风格指南":["110.7"],"该解析器允许使用eslint校验所有babel":["110.7"],"io":["110.8"],"unused":["110.8"],"vars":["110.8"],"禁止定义未使用的变量":["110.8"],"prefer":["110.8"],"expect":["110.8"],"禁止使用":["110.8"],"ignore":["110.8"],"explicit":["110.8"],"全局样式文件中没有办法使用":["110.9"],"变量":["110.9"],"因此需要给项目中引入全局变量":["110.9"],"variable":["110.9"],"创建一个":["110.9"],"system":["110.10"],"系统管理员":["110.10"],"用户登录接口":["110.10"],"login":["110.10"],"请求地址":["110.10"],"请求方式":["110.10"],"response":["110.10","110.11"],"响应拦截器":["110.11"],"处理网络错误":["110.11"],"logout":["110.12"],"登录接口":["110.12"],"reqlogin":["110.12"],"qrouter":["111.0"],"加上这一句":["111.0"],"找指定路径下的文件":["111.0"],"d":["111.1"],"下面列出了一些常用的":["112.0"],"向表中添加一个新的列":["112.1"],"set":["112.2","149.1","153.3"],"identified":["112.3"],"by":["112.3"],"password":["112.3","122.2"],"创建一个新用户":["112.3"],"alter":["112.3"],"的数据类型":["113.0"],"每个数据类型都有特定的存储需求和可接受的值范围":["113.0"],"bigint":["113.1"],"double":["113.2"],"双精度浮点数":["113.2"],"7976931348623157e":["113.2"],"timestamp":["113.4"],"存储时间戳":["113.4"],"范围从":["113.4"],"mysql":["113.5"],"还提供了其他特定用途的数据类型":["113.5"],"如二进制类型":["113.5"],"用户可以对数据库进行各种操作":["114.0"],"包括创建":["114.0"],"读取":["114.0"],"更新和删除数据":["114.0"],"数据库的优势包括":["114.0"],"索引和缓存等技术":["114.1"],"提供了快速的数据读写性能":["114.1"],"丰富的功能":["114.1"],"mysql提供了丰富的功能和工具":["114.1"],"包括存储过程":["114.1"],"触发器":["114.1"],"插入数据":["116.0"],"查询数据":["116.0"],"database":["116.2","122.2"],"将":["116.3","116.5","116.6","122.14"],"datatype":["116.4"],"column2":["116.4"],"value2":["116.5","116.7"],"where":["116.6","116.7","116.8","122.3"],"condition":["116.6","116.7","116.8"],"init":["117.1"],"它不会像网络浏览器那样解释结果":["117.2"],"具体来说":["117.2"],"它不会生成视觉渲染":["117.2"],"top250":["117.3"],"each":["117.4"],"star":["117.4"],"info":["117.4"],"bd":["117.4"],"pianista":["117.6"],"sull":["117.6"],"oceano":["117.6"],"p2574551676":["117.6"],"三傻大闹宝莱坞":["117.6"],"idiots":["117.6"],"p579729551":["117.6"],"放牛班的春天":["117.6"],"les":["117.6"],"choristes":["117.6"],"p2884280708":["117.6"],"机器人总动员":["117.6"],"wall":["117.6"],"开放":["118.0"],"极简的":["118.0"],"query":["118.2"],"可以获取到客户端发送过来的查询参数":["118.2"],"目录下的静态资源":["118.3"],"localhost":["118.3"],"images":["118.3"],"bg":["118.3"],"向外导出路由对象":["118.4"],"module":["118.4"],"exports":["118.4","121.8"],"注册路由模块":["118.4"],"在注册路由之前注册中间件":["118.5"],"错误级别中间件除外":["118.5"],"中间件可连续调用多个":["118.5"],"调用了第2个全局中间件":["118.6"],"page":["118.7"],"发生了错误":["118.8"],"listen":["118.8"],"server":["118.8"],"running":["118.8"],"require":["118.10"],"主要在服务器端进行配置":["118.11"],"客户端浏览器无须做任何额外的配置":["118.11"],"即可请求开启了":["118.11"],"ccess":["118.12"],"对额外的请求头进行声明":["118.12"],"否则这次请求会失败":["118.12"],"viewport":["118.14"],"在浏览器与服务器正式通信之前":["118.15"],"浏览器会先发送":["118.15"],"option":["118.15"],"运行时环境":["119.1"],"基于":["119.1"],"express":["119.1"],"可以快速构建":["119.1"],"web":["119.1","122.12"],"这是因为":["119.2"],"采用的是异步的":["119.2"],"非阻塞的模型":["119.2"],"这里所谓的":["119.2"],"可能会出现服务不可用的情况":["119.3"],"写文件":["120.1"],"不存在则创建":["120.1"],"存在则覆盖原有内容":["120.1"],"wx":["120.1"],"文件存在打开失败":["120.1"],"failed":["120.3","120.6"],"可写流打开了":["120.4"],"可写流关闭了":["120.4"],"要读取一个可读流中的数据":["120.4"],"要为可读流绑定一个data事件":["120.4"],"data事件绑定完毕自动开始读取数据":["120.4"],"err":["120.6"],"流关闭了":["120.7"],"通过ws向文件中输出内容":["120.7"],"因此大小一旦确定就不能修改":["120.8"],"常用方法":["120.8"],"encoding":["120.8"],"直接提供完整的路径":["120.9"],"从而防止路径动态拼接的问题":["120.9"],"renamesync":["120.10"],"监视文件更改":["120.10"],"watchfile":["120.10"],"filename":["120.10"],"listener":["120.10"],"hello前端":["120.10"],"buf":["120.10"],"buffer":["120.10"],"官方提供的":["120.11","120.15"],"readfile":["120.12"],"fullname":["120.13"],"设置":["120.16"],"响应头":["120.16"],"模块的内部数据":["121.2"],"实现是私有的":["121.2"],"实现按需加载":["121.3"],"第三方模块":["121.5"],"只能在当前模块内被访问":["121.6"],"指向的对象":["121.7"],"默认情况下":["121.7"],"是对外的接口":["121.8"],"提高模块加载效率":["121.9"],"按确切的文件名加载":["121.11"],"补全":["121.11","121.21"],"tools":["121.12"],"则":["121.12","121.23"],"会按以下顺序查找":["121.12","121.22"],"文件":["121.13","154.2"],"的内置模块仅提供了一些底层的":["121.15"],"现在也有其他的包管理工具":["121.16"],"版本号":["121.18"],"入口文件":["121.18"],"核心代码":["121.18"],"用户自定义模块":["121.19"],"会按顺序分别尝试加载以下的文件":["121.21"],"按照确切的文件名进行加载":["121.21"],"入口不存在或无法解析":["121.23"],"将会试图加载目录下的":["121.23"],"快捷方式":["122.3"],"页面最终在浏览器里生成":["122.6"],"缺点":["122.6"],"不利于":["122.6"],"seo":["122.6"],"完整的":["122.6"],"交互性强":["122.7"],"无需考虑":["122.7"],"status":["122.11"],"done":["122.11"],"从":["122.11"],"取数据":["122.11"],"token":["122.12"],"是真正的用户信息":["122.13"],"加密后的字符串":["122.13"],"是安全性相关部分":["122.13"],"保证":["122.13"],"安全性":["122.13"],"三者使用":["122.13"],"分隔":["122.13"],"authorization":["122.14"],"字段":["122.14"],"字符串发送到服务器进行身份认证":["122.14"],"服务器可以通过":["122.14"],"中间件将客户端发送过来的":["122.14"],"解析还原成":["122.14"],"unless":["122.14"],"指定哪些接口无需访问权限":["122.14"],"cache":["123.0"],"clean":["123.0"],"检查过时的依赖项":["123.0"],"outdated":["123.0","124.3"],"安装全局依赖项":["123.0"],"包管理器":["124.0"],"允许开发者轻松地安装":["124.1"],"更新":["124.1","125.6"],"也会自动安装":["124.2"],"你可以通过在终端中运行以下命令来检查是否已安装":["124.2"],"检查过时的包":["124.3"],"run":["124.3"],"运行在":["124.3"],"在创建项目时":["124.4"],"可以提供一些信息":["124.4"],"如项目名称":["124.4"],"当其他开发者获得你的项目时":["124.5"],"他们可以使用":["124.5"],"命令":["124.6"],"你可以将自己的包发布到":["124.6"],"官方网站":["125.1"],"shell":["125.2"],"可以创建一个或多个":["125.3"],"命令生成":["125.4"],"并包含了你的包的基本信息":["125.4"],"publish":["125.5"],"这将会将你的包上传到":["125.5"],"package":["125.6","125.7"],"json":["125.6"],"npm":["126.1","154.3"],"全局安装":["126.1"],"打开终端并运行以下命令":["126.1"],"是你要添加的包的名称":["126.2"],"移除依赖项":["126.2"],"如果你想移除不再需要的依赖项":["126.2"],"remove":["126.2"],"它提供了许多":["127.1"],"访问":["127.3"],"轴和":["127.3"],"2d":["127.4","141.1"],"webgl":["127.4"],"它们都通过特定的方法和属性来控制视觉效果":["127.4"],"可以简单地绘制圆形":["127.5"],"矩形":["127.5"],"线条等图形":["127.5"],"在实现过程中":["127.6","127.7"],"您可以使用":["127.6"],"来监控用户的交互":["127.6"],"从而创建动画效果":["127.7"],"您可以通过原生":["127.7"],"translate":["128.0"],"图像平移":["128.0"],"上面代码会显示一个顺时针倾斜":["128.1"],"如果缩放因子为":["128.2"],"就表示图像没有任何缩放":["128.2"],"如果为":["128.2"],"则表示方向翻转":["128.2"],"下面是一个例子":["128.4"],"只有源图像外的目标图像部分会被显示":["129.1"],"lighter":["129.1"],"显示源图像":["129.1"],"目标图像":["129.1"],"copy":["129.1"],"忽略目标图像":["129.1"],"xor":["129.1"],"getcontext":["130.1"],"当前浏览器不支持canvas":["130.1"],"请下载最新的浏览器":["130.1"],"位置的直线":["130.2"],"linewidth":["130.2"],"设置或返回当前的线条宽度":["130.2"],"linejoin":["130.2"],"getlinedash":["131.1"],"返回一个数组":["131.1"],"表示虚线里面线段和间距的长度":["131.1"],"setlinedash":["131.1"],"用于指定虚线里面线段和间距的长度":["131.1"],"context":["131.1"],"beginpath":["131.1","135.2"],"fillstyle":["131.2"],"fillrect":["131.2"],"定义了渐变样式":["131.2"],"以后":["131.2"],"将这个样式指定给":["131.2"],"就会生成以这个样式填充的矩形区域":["131.2"],"该方法的返回值是一个":["131.3"],"canvaspattern":["131.3"],"src":["131.3"],"stroke":["133.2"],"显示路径":["133.2"],"closepath":["133.2","138.3"],"右眼":["133.3"],"时会填充为三角形":["133.4"],"onload":["133.5"],"第一种绘制图片的方式":["133.5"],"参数1图片对象":["133.5"],"3将图片渲染到画布的水平和垂直位置":["133.5"],"文本对齐选项":["133.6"],"center":["133.6"],"end":["133.6"],"文本基线对齐":["133.6"],"destination":["135.2"],"out":["135.2"],"onmousemove":["135.2","138.3"],"arc":["135.2"],"pagex":["135.2"],"getseconds":["136.3"],"绘制秒针":["136.3"],"onmouseup":["138.3"],"lineto":["138.3","147.5"],"clearbtn":["138.4"],"橡皮擦":["138.4"],"isca":["138.4"],"鼠标进入移出事件":["140.1"],"pointerenter":["140.1"],"stage":["140.2"],"addchild":["140.2"],"用于创建交互式":["141.1"],"它还支持使用":["141.3"],"canvas":["141.3"],"使开发者能够快速上手并高效地创建图形和动画":["141.4"],"纹理":["141.5"],"texture":["141.5"],"并提供了针对移动设备的优化":["141.6"],"创建一个精灵":["141.7","146.2","149.1","149.2"],"sprite":["141.7","149.1","149.2"],"0xff0000":["142.2"],"beginfill":["142.2","143.2"],"0x66ccff":["142.2"],"drawrect":["142.2"],"fontfamily":["143.1"],"楷体":["143.1"],"fontsize":["143.1"],"fill":["143.1"],"graphics":["143.2"],"drawcircle":["143.2"],"360buyimg":["145.1"],"pop":["145.1"],"jfs":["145.1"],"t1":["145.1"],"5c1b0581e1fa6c1c3":["145.1"],"58519cee2a0039e0":["145.1"],"interactive":["145.2"],"distance":["145.3"],"虚化":["145.3"],"innerheight":["146.1"],"backgroundcolor":["146.1"],"0x1099bb":["146.1"],"vite":["146.2"],"svg":["146.2"],"旋转45度":["146.3"],"rotation":["146.3"],"delta":["146.4"],"endfill":["147.1"],"drawroundedrect":["147.3"],"textures":["149.1","149.2"],"创建容器":["149.1","149.2"],"锚点":["149.1"],"anchor":["149.1"],"加载完成后创建精灵":["149.2"],"then":["149.2"],"smil":["150.1"],"等其他网络标准无缝衔接":["150.1"],"y1":["150.3"],"rx":["150.6"],"灯光":["151.0"],"相机等":["151.0"],"相机":["151.0"],"camera":["151.0"],"相机定义了观察者在场景中看到的位置和视角":["151.0"],"提供了不同类型的相机":["151.0"],"包括透视相机":["151.0"],"perspectivecamera":["151.0"],"和正交相机":["151.0"],"orthographiccamera":["151.0"],"可根据需求进行选择":["151.0"],"几何体":["151.0"],"geometry":["151.0"],"几何体是":["151.0"],"scene1":["152.3"],"examples":["152.6"],"orbitcontrols":["152.7"],"renderer":["152.8"],"单独设置某个轴的位移":["153.2"],"从无到有的过程":["154.0"],"file":["154.1"],"新建文件夹":["154.1"],"git":["154.2"],"如果下载了":["154.2"],"可以在当前的文件夹右键":["154.2"],"选择":["154.2"],"public":["154.6"],"文件夹用于静态资源的引用":["154.6"],"目录结构如下":["154.6"],"快速开始":["154.7"],"guide":["154.7"],"features":["154.7"],"icon":["154.7"],"右上角的导航栏":["154.9"],"关于":["154.9"],"导航标签的名字":["154.9"],"这种格式是有下拉菜单的版本":["154.9"],"关于1":["154.9","154.10"],"默认是不是展开":["154.10"],"lining98":["154.11"],"master":["154.11"],"gh":["154.11"],"pages":["154.11"],"配置":["154.11"]},{"0":["7.2","13.21","16.14","35.3","42.2","53.2","54.6","88.8","101.5","118.8","133.5","138.3","145.2","145.3","149.2","150.8"],"1":["11.14","13.11","16.12","17.6","30.22","31.3","69.3","86.13","86.14","101.5","104.6","108.0","120.7","120.12","140.1","145.3"],"2":["5.5","14.17","42.2","52.9","54.10","75.4","77.6","84.4","104.6","113.2","142.2","143.2","149.1","149.2"],"3":["5.5","9.3","9.4","14.2","14.17","16.5","19.1","21.1","41.24","44.6","48.2","49.11","54.2","68.7","76.3","93.3","94.0","99.1","125.6"],"4":["9.12","10.7","14.11","39.3","40.1","44.6","63.8","67.1","95.3","98.1","99.14","99.18","122.3","146.3"],"5":["10.7","17.10","40.2","58.0","73.9","84.3","103.4","131.4","138.3","149.1","149.2","151.0"],"6":["14.11","18.25","65.4","103.4","108.0"],"7":["11.4","18.25","99.8","110.7","120.10"],"8":["67.1","110.3","120.16"],"9":["6.4","113.1"],"10":["5.6","86.9","147.3"],"13":["120.10"],"15":["73.3"],"16":["111.1","118.8"],"18":["13.5","53.7","55.1","86.8","102.1","104.5"],"19":["110.7"],"20":["54.10","135.2","136.3"],"21":["86.9"],"24":["86.8"],"25":["5.2","90.1"],"29":["54.9"],"30":["55.2","89.2","150.7"],"40":["48.24"],"50":["128.3","128.4","147.5","150.4","150.7","150.9"],"63":["152.9"],"71":["152.9","152.12"],"73":["152.12"],"80":["49.2"],"87":["153.5"],"99":["48.2","49.2","150.9"],"100":["48.24","128.4","131.1","133.5","143.2"],"111":["50.3"],"123":["98.6","104.4"],"127":["118.8"],"145":["120.10"],"180":["86.13"],"200":["63.6","131.1","147.5"],"201":["110.10"],"213":["106.6"],"223":["113.1"],"250":["134.1","150.7"],"299":["71.5"],"300":["129.1","132.0"],"308":["113.2"],"350":["134.2"],"372":["113.1"],"401":["110.11"],"404":["38.12"],"500":["98.4","133.4"],"501":["98.4"],"502":["98.4"],"600":["45.1","62.2"],"775":["113.1"],"800":["62.2"],"808":["113.1"],"854":["113.1"],"1234":["43.11"],"2000":["13.1"],"2018":["6.4"],"2600":["45.1"],"9000":["98.2"],"46539":["86.7"],"31250000":["54.2"],"sayhello":["5.1","5.2","8.13"],"console":["5.1","7.5","8.8","8.9","8.11","8.16","8.19","8.21","9.3","9.6","9.7","11.20","14.13","14.14","15.6","15.9","41.4","41.18","41.19","41.20","48.9","48.12","48.13","48.17","48.31","48.32","49.8","49.9","53.2","53.6","69.1","73.6","73.7","82.2","83.2","84.4","92.6","92.7","92.8","92.12","92.13","92.16","92.19","95.4","102.1","102.10","102.11","104.4","120.10","120.13","122.14","135.2"],"log":["5.1","5.5","8.8","8.9","8.11","8.19","9.7","9.8","11.12","11.20","12.2","12.4","14.10","14.13","14.14","15.6","15.9","36.2","41.4","41.17","41.18","41.19","41.20","48.9","48.12","48.13","48.14","48.17","48.23","48.32","49.9","53.2","53.6","63.9","69.1","73.6","73.7","84.4","86.1","92.6","92.8","92.10","92.14","95.4","102.1","102.10","102.11","120.10","120.13","122.14"],"你好":["5.1","5.2"],"子类的方法":["5.3"],"introduce":["5.3"],"this":["5.4","14.9","27.3","29.11","30.20","31.9","32.4","35.6","68.3","77.5","102.11"],"name":["5.4","8.23","13.1","41.13","43.17","92.9","92.17","116.2"],"定义了脚本语言的语法规范":["6.2"],"类型":["6.2"],"操作符":["6.2"],"对象和一系列的内置函数等内容":["6.2"],"的扩展语言":["6.3"],"在浏览器环境中的组成关系":["6.3"],"web":["6.3","118.0","120.15"],"用于遍历对象的键值对和值":["6.4"],"string":["6.4","32.14","103.2","104.2","104.3","106.1"],"padstart":["6.4","11.5"],"padend":["6.4","11.5"],"用于字符串填充":["6.4"],"async":["6.4"],"await":["6.4"],"语法":["6.4","10.10"],"更方便地处理异步操作":["6.4"],"getownpropertydescriptors":["6.4"],"返回对象属性的描述符":["6.4"],"es9":["6.4"],"es2018":["6.4"],"清空map":["7.2"],"初始化map":["7.2"],"initialmap":["7.2"],"key1":["7.2"],"value1":["7.2","92.5"],"key2":["7.2"],"value2":["7.2","92.5"],"遍历map":["7.2"],"函数将":["7.4"],"对象转回去":["7.4"],"merged":["7.6"],"es6":["8.1","13.3","91.2"],"引入了原生的模块化支持":["8.1"],"模块之间通过导入":["8.2"],"import":["8.2","38.10"],"测试和重构模块都更加方便":["8.4"],"我们可以将模块中的变量":["8.6"],"函数或类导出":["8.6"],"const":["8.7","8.14","8.18","10.10","30.4","30.20","32.10","32.11","41.6","63.3","68.7","72.8","79.1","88.3","88.10","95.3","97.3","102.2","106.4","106.5","110.10"],"hello":["8.9","9.12","37.16"],"输出":["8.13","8.19","12.2","12.4","49.9","72.3","72.4","89.2","90.1","90.2","92.11"],"person":["8.14","13.1"],"new":["8.14","8.18","28.1","37.13","88.4","89.2","89.3","90.0","101.3","102.1","102.7","102.10","112.3"],"from":["8.17","8.22","14.4","14.5","38.8"],"else":["8.23","30.14","43.15","73.5","98.3","138.3"],"module2":["8.23"],"模块化为前端开发带来了巨大的便利性和效率":["8.28"],"是":["8.28","32.15","34.7"],"开发的重要进步之一":["8.28"],"即":["9.1","108.0"],"使用":["9.5","33.5","150.1","154.11"],"删除不存在的成员":["9.5"],"什么都不会发生":["9.5"],"也不会报错":["9.5"],"entry":["9.6"],"of":["9.6"],"next":["9.8","14.12","38.8"],"value":["9.8","13.22","41.8","42.10","92.11"],"set":["9.9","49.11","54.12","69.6","142.2","147.1","149.2"],"h":["9.12","39.3"],"返回":["9.15"],"true":["9.15","14.1","41.29","49.3","63.4","140.2","141.7"],"false":["9.15","92.15","147.4"],"解构成数组":["9.15"],"过滤":["9.15"],"就是":["10.4"],"这种写法不能省略第二个参数":["10.5"],"如果结合函数参数的默认值":["10.5"],"就可以省略第二个参数":["10.5"],"这时":["10.5","10.6","52.11"],"就出现了双重默认值":["10.5"],"上面代码中":["10.6","128.4"],"有默认值的参数都不是尾参数":["10.6"],"无法只省略该参数":["10.6"],"而不省略它后面的参数":["10.6"],"除非显式输入":["10.6"],"如果传入":["10.6"],"将触发该参数等于默认值":["10.6"],"null":["10.6","13.21","30.2","68.6","95.10","95.14","110.8"],"则没有这个效果":["10.6"],"由于":["10.7"],"的实参为":["10.7"],"所以默认值为":["10.7"],"再因为":["10.7"],"是解构赋值":["10.7"],"内为":["10.7"],"所以解构赋值启用默认值":["10.7"],"所以真正的形参为":["10.7"],"剩余语法与展开语法是相反的":["10.9"],"给出了它的完美解决方案":["10.10"],"剩余参数":["10.10"],"那剩余参数是如何在函数传参中使用的呢":["10.10"],"下面我们来看看实例":["10.10"],"add":["10.10"],"x":["10.10","52.13","62.1","101.14","118.14","143.1","145.1","149.1","149.2"],"y":["10.10","117.1","149.1","149.2"],"z":["10.10"],"args":["10.10","68.5"],"伪数组":["10.11"],"剩余参数的名字可以自定义":["10.11"],"在函数传参的时候也可以是和解构一起使用":["10.12"],"而引入的":["10.13"],"如解构赋值":["10.14"],"模板字符串等":["10.14"],"a":["10.15","14.3","51.7","106.4"],"b":["10.15","14.6","43.15","121.22"],"undefined":["10.17","13.12","54.1","55.4"],"的场景":["10.18"],"如事件处理函数":["10.18"],"就势必要在原来最后一个参数后面添加一个逗号":["10.19"],"这对于版本管理系统来说":["10.19"],"就会显示添加逗号的那一行也发生了变动":["10.19"],"这看上去有点冗余":["10.19"],"因此新的语法允许定义和调用时":["10.19"],"尾部直接有一个逗号":["10.19"],"代码块可能用不到这个参数":["10.20"],"但是":["10.20","52.4"],"为了保证语法正确":["10.20"],"还是必须写":["10.20"],"需要知道字符串的特点是一旦创建了":["11.1"],"还可通过":["11.2"],"w":["11.4"],"e":["11.14","63.6"],"replace":["11.17"],"matches":["11.18"],"pos":["11.19"],"ond":["11.20"],"来包裹字符串":["12.1"],"下面是一个实际的例子":["13.1"],"let":["13.1","102.6","102.7","102.11","135.2"],"birth":["13.1"],"01":["13.1","113.4"],"张三":["13.1"],"等同于birth":["13.1"],"增强":["13.3"],"valuea":["13.4"],"valueb":["13.4"],"age":["13.5","54.9","54.10","82.3","83.3","103.2"],"等同于":["13.6"],"getprototypeof":["13.6"],"或":["13.6"],"call":["13.6"],"方法":["13.6","72.2","80.2","106.0","121.2"],"字符串直接展开":["13.13"],"因为":["13.15","42.9"],"不能展开":["13.15"],"不同之处只有两个":["13.20"],"一是":["13.20"],"不等于":["13.20"],"二是":["13.20"],"等于自身":["13.20"],"str":["13.21","101.1"],"s":["13.21"],"t":["13.21"],"r":["13.21"],"同名属性的替换":["13.21"],"后面的直接覆盖前面的":["13.21"],"黄色":["13.21"],"key":["13.22","30.17","35.4","35.5","42.10","42.12","46.4"],"下标":["14.3"],"array":["14.4","48.21","48.31","54.8"],"item":["14.8","18.4","18.15","18.16","18.30","42.12","48.28","48.29","110.10"],"值":["14.9","74.4"],"参数2":["14.15"],"可选":["14.15"],"搜索的起始索引":["14.15"],"默认为0":["14.15"],"infinity":["14.16"],"tip":["15.0","25.4","34.7","35.6","36.6","41.2","49.10","55.4","68.2"],"解构赋值是一种简洁而强大的语法":["15.0"],"它在处理数据时非常实用":["15.0"],"margin":["16.1","20.5"],"h1":["16.2","16.6","30.8","30.10","30.11"],"font":["16.4"],"weight":["16.4"],"因为没有意义":["16.5"],"交集选择器中":["16.5"],"不可能":["16.5"],"出现":["16.5"],"两个元素选择器":["16.5"],"h2":["16.6","41.7"],"h3":["16.6"],"blue":["16.7","35.3","48.7","48.8","129.1"],"green":["16.8","23.1","132.0","150.5"],"css":["16.9","17.2","17.9","18.1","18.4","18.15","18.26","29.24","75.2","117.2","118.3"],"选中div后紧紧相邻的兄弟p元素":["16.9"],"相邻兄弟选择器":["16.9"],"focus":["16.11"],"用于选择获取焦点的表单元素":["16.11"],"一般针对表单元素而言":["16.11"],"忽略其他非":["16.12"],"的元素":["16.12"],"html":["16.12","51.0","64.1","77.12","78.2","95.3","120.16","122.6"],"div":["16.12","30.4","30.19","30.22","31.3","34.5","34.6","37.4","41.15","76.2","78.1"],"p":["16.12","30.6","32.4","34.5","34.6","37.6","52.8"],"span":["16.12"],"结尾的":["16.13"],"clearfix":["16.14"],"必须要有content属性":["16.14"],"display":["16.14","17.2","18.10","18.11","18.12","18.13","18.14"],"block":["16.14"],"块级元素":["16.14"],"height":["16.14","20.2","136.4"],"不要看见该元素":["16.14"],"核心代码清除浮动":["16.14"],"visibility":["16.14"],"将子元素定义为弹性项目":["17.0"],"使它们能够在主轴和交叉轴上灵活布局":["17.0"],"容器":["17.1"],"其中的子元素就会成为":["17.1"],"container":["17.2","17.9","18.12","18.13","18.14"],"项目靠交叉轴末尾位置对齐":["17.3"],"项目在交叉轴上居中对齐":["17.3"],"baseline":["17.3"],"项目的基线对齐":["17.3"],"stretch":["17.3","17.9"],"项目会自动换行到下一行":["17.4"],"reverse":["17.4"],"弹性增长因子为1":["17.6"],"inner":["17.8"],"默认值":["17.9"],"多行项目被拉伸以填满交叉轴空间":["17.9"],"center":["17.10","20.1","143.1"],"实现水平导航栏布局":["17.10"],"响应式网格":["17.10"],"wrap":["17.10"],"和媒体查询创建响应式网格布局":["17.10"],"布局在":["18.1"],"容器内部的子元素即成为网格项":["18.2"],"1fr":["18.3","18.6"],"2fr":["18.3","18.6"],"定义三列":["18.3"],"第二列是第一列的两倍宽度":["18.3"],"以下是一些常用的":["18.5"],"area":["18.7"],"header":["18.8","118.12"],"10px":["18.9"],"template":["18.11","41.15","43.5"],"grid":["18.15"],"了解如何创建网格布局对于掌握":["18.17"],"50px":["18.18"],"定义两行":["18.18","18.19"],"第一行高度为":["18.18"],"第二行占据剩余空间":["18.18"],"100px":["18.19","21.0"],"每行高度为100px":["18.19"],"在上述示例中":["18.19","65.1","67.1","68.2","74.1","74.2","81.3"],"我们使用":["18.19"],"1200px":["18.20"],"可以用于创建各种复杂的网页布局":["18.21"],"nav":["18.22"],"navigation":["18.22"],"sidebar":["18.23","18.24"],"中两种常用的布局模型":["18.26"],"适用于单一方向的布局":["18.27"],"即只控制主轴或交叉轴的布局":["18.27"],"支持网格项在主轴上的换行":["18.28"],"对齐和排序":["18.28"],"适用于弹性布局需求":["18.28"],"我们可能会遇到一些常见问题":["18.29"],"nth":["18.30"],"child":["18.30"],"可以使用":["18.31","33.7","154.1"],"在使用":["18.32"],"实现一维和二维布局的组合效果":["18.33"],"使用媒体查询和响应式设计":["18.33"],"实现在不同设备和屏幕尺寸下的布局适配":["18.33"],"通配选择器":["19.0"],"skyblue":["20.1"],"text":["20.1","29.23","35.5","113.3","120.16","120.17"],"align":["20.1","143.1"],"width":["20.2"],"400px":["20.2"],"200px":["20.3"],"items":["20.7"],"垂直居中":["20.7"],"place":["20.8"],"content":["20.8","21.3"],"border":["21.0"],"overflow":["21.1","21.2"],"hidden":["21.1","21.2"],"orient":["21.2"],"vertical":["21.2"],"检索伸缩盒子对象的子元素的排列方式":["21.2"],"after":["21.3"],"absolute":["21.3"],"right":["21.3"],"corner":["22.0"],"滚动条上的滚动滑块":["22.0"],"size":["23.2","120.8"],"mp4":["24.0"],"您的浏览器不支持视频播放":["24.0"],"control":["24.0"],"属性供添加播放":["24.0"],"wav":["24.2"],"ogg":["24.3","24.10"],"在":["24.5","29.9","30.1","31.1","32.1","35.6","42.4","71.2","91.2"],"video":["24.5"],"和":["24.6","25.2","39.6","41.25","51.0","67.2","72.4","81.1","121.7"],"循环播放":["24.7"],"warning":["24.7"],"注意":["24.7","49.10","55.4","101.8","128.1"],"load":["24.8","77.11"],"type":["24.10","29.23","30.5","35.5","118.14","120.17"],"js":["24.11","41.5","53.2","63.3","108.0","117.5","120.9","121.21","129.1"],"var":["24.11","48.24","92.4"],"myvideo":["24.11"],"document":["24.11","95.3"],"getelementbyid":["24.11","95.3"],"function":["24.11","63.6","73.8","77.5","101.14","103.4","120.12","131.3"],"if":["24.11","30.13","63.6","84.5","101.12","101.14","110.10","122.11"],"paused":["24.11"],"它通过使用一系列标签和属性来描述网页的结构和内容":["25.0"],"包含了与网页相关的配置和信息":["25.1"],"如字符编码":["25.1"],"标题":["25.1"],"引入外部资源等":["25.1"],"用于创建超链接到其他网页或文档":["25.2"],"img":["25.2","44.7","117.3","117.4"],"图像标签":["25.2","27.2"],"用于插入图片到网页中":["25.2","27.2"],"ul":["25.2","35.4","42.12","77.12"],"li":["25.2","30.17","35.4","35.5","42.12","77.12"],"无序列表和列表项标签":["25.2","27.1"],"canvas":["25.3"],"绘图":["25.3"],"进一步提高网页开发技能":["25.4"],"创造出更加优秀的网页和网页应用程序":["25.4"],"总结":["25.4","32.15","34.7","35.6","93.4"],"我将在每个代码示例中添加特殊字符":["26.0"],"这是h4级别的标题":["26.1"],"h5":["26.1"],"com":["26.3","27.4","31.11","100.1","100.3","131.3"],"alt":["26.4"],"内联容器":["26.8"],"单元格1":["26.9"],"label":["26.11"],"for":["26.11","42.12","117.6"],"id":["26.13","33.14","37.4","37.12","38.9","42.12","76.2","77.12","95.3","100.4","118.2"],"contact":["26.14","33.10"],"联系方式":["26.14"],"标签可以分为两类":["27.0"],"用于创建无序列表":["27.1"],"ol":["27.1"],"br":["27.2"],"换行标签":["27.2"],"click":["27.4","41.12","42.3","42.8","43.16","95.3"],"here":["27.4","154.2"],"自定义标签的功能通常需要通过":["27.5"],"javascript":["27.5","29.23","37.13","67.2","75.5","82.5","83.5","88.6","93.4","105.1"],"来处理和操作":["27.5"],"官方网址":["29.0"],"通过对比前后两个状态的":["29.1"],"差异":["29.1"],"最小化页面重绘":["29.1"],"从而提高性能和效率":["29.1"],"独立的组件":["29.3"],"每个组件负责特定的功能":["29.3"],"从而提高了页面的渲染效率":["29.4"],"这种单向数据流的模式使得数据流动更加可控":["29.5"],"减少了数据的混乱和不一致":["29.5"],"redux":["29.6"],"用于管理应用程序的状态":["29.6"],"props":["29.8","30.20"],"属性":["29.8","51.4"],"并返回一个描述":["29.8"],"使得代码更易读和理解":["29.9"],"react":["29.9","32.6","36.6","122.6"],"中":["29.9","29.13","32.1","81.4"],"组件更加可预测和易于维护":["29.10"],"在子组件中":["29.10"],"可以通过":["29.11","34.7"],"发送网络请求":["29.12"],"清理资源等":["29.12"],"条件渲染使得我们可以根据不同的情况展示不同的":["29.14"],"实现列表展示的功能":["29.15"],"通过列表渲染":["29.15","35.1"],"如":["29.16","67.2","121.16","127.5","127.7"],"input":["29.16","30.5","35.5"],"通过状态提升":["29.17"],"通过":["29.18","33.3","33.6","43.6","76.4","129.0"],"尤其对于跨多层级的组件共享数据非常有用":["29.19"],"然而":["29.19"],"我们可以在函数组件中使用类组件的功能":["29.20"],"如状态管理":["29.20"],"生命周期方法等":["29.20"],"world":["29.21"],"主要封装了和":["29.22"],"操作相关的包":["29.22"],"比如":["29.22"],"把组件渲染到页面上":["29.22"],"这一行的":["29.23"],"是写":["29.23"],"babel":["29.23","110.6"],"而不是":["29.23"],"代码运行后":["29.23"],"页面上的":["29.23"],"index":["29.24","42.12","46.4","48.28","48.29","48.31","69.5","73.1","121.23"],"可以看到":["30.2"],"element":["30.4","30.5","30.7","30.12"],"learn":["30.6"],"john":["30.7","32.11","89.2","92.18","102.7"],"comment":["30.8"],"组件是":["30.9"],"中最基本的概念之一":["30.9"],"return":["30.10","30.11","30.19","30.22","31.3","31.4","31.8","31.10","34.5","34.6","37.16","69.2","73.8","101.12","122.11"],"render":["30.11","30.20","31.3","31.4","34.5","34.6","39.3"],"welcome":["30.12"],"please":["30.15"],"评论列表等":["30.16"],"onchange":["30.18","35.5"],"bind":["30.18"],"temperatureinput":["30.19"],"scale":["30.19","142.2","146.3"],"themedbutton":["30.21"],"theme":["30.21"],"getsnapshotbeforeupdate":["31.1"],"之后":["31.1"],"更新之前调用":["31.1"],"用于获取更新前的":["31.1"],"component":["31.5","38.3","110.8"],"then":["31.6","31.11"],"response":["31.6","31.11","97.4"],"json":["31.6","31.11","88.11","101.8","105.7","121.11","121.21","154.11"],"initialcount":["31.8"],"somestate":["31.9"],"data":["31.11","41.14","97.3","98.3","98.6","110.10","120.4"],"生命周期是组件在不同阶段经历的一系列方法调用":["31.13"],"通过这些方法":["31.13"],"我们可以在特定时间点执行代码":["31.13"],"控制组件的行为":["31.13"],"并进行必要的操作":["31.13"],"在组件创建阶段":["31.13"],"我们可以在":["31.13"],"constructor":["31.13","89.1"],"这有助于确保组件的数据流向更加可预测和可维护":["32.1"],"在上面的例子中":["32.3","33.11","33.14","34.3","34.4","35.2","36.2","36.3","36.4","36.5","39.4","39.6"],"组件会根据传递的":["32.6"],"使用组件并传递props":["32.7","32.8","32.9","32.11","32.14"],"reactdom":["32.7","32.8","32.9","32.14"],"apple":["32.10"],"banana":["32.10"],"orange":["32.10"],"即数据只能从父组件传递到子组件":["32.12"],"而不能从子组件传递到父组件或者兄弟组件之间传递":["32.12"],"这样的设计有助于维护组件的数据流向":["32.13"],"避免对":["32.13"],"对props进行验证":["32.14"],"isrequired":["32.14"],"中用于向组件传递数据的机制":["32.15"],"它允许组件接收外部传入的数据":["32.15"],"并根据数据的变化进行动态渲染和交互":["32.15"],"通过使用":["32.15","34.0","34.7"],"这会增加服务器负担并且造成较长的加载时间":["33.1"],"而在单页应用中":["33.1"],"整个应用只加载一次":["33.1"],"组件来定义路由":["33.3"],"path":["33.3","38.3","81.3"],"允许我们在一个页面组件中使用嵌套的":["33.4"],"route":["33.4"],"router":["33.5","44.4"],"paramname":["33.5"],"组件来创建路由链接":["33.6"],"push":["33.7","117.4"],"dom":["33.8","40.1","77.5"],"export":["33.11","33.13","33.14","35.2","36.2","36.5","110.9"],"default":["33.11","33.13","33.14","35.2","36.2","36.3","36.4","36.5","41.0","110.9"],"app":["33.12","118.4"],"user":["33.14","118.6","118.7","122.14"],"我们新增了一个名为":["33.14"],"的页面组件":["33.14"],"点击链接后":["33.15"],"会自动更新":["33.15"],"url":["33.15","118.2"],"并渲染对应的页面组件":["33.15"],"如果希望在某个事件触发后实现页面导航":["33.15"],"可以使用编程式导航":["33.15"],"match":["33.15"],"history":["33.15","58.0"],"并在数据发生变化时重新渲染组件":["34.0"],"值更新组件的显示内容":["34.1"],"是单向数据流的一部分":["34.1"],"我们在构造函数中初始化了一个名为":["34.3"],"的":["34.3","52.12","108.0"],"button":["34.4","37.7","43.16","95.3"],"onclick":["34.4","138.3"],"increment":["34.4"],"访问和显示":["34.7"],"的值":["34.7","39.6"],"并通过调用":["34.7"],"回调函数来更新":["34.7"],"组件用于存储和管理可变数据的一种机制":["34.7"],"我们可以创建交互性和动态性的组件":["34.7"],"列表渲染使我们能够根据数据数组来动态生成多个相似的元素":["35.0"],"方法来实现列表渲染":["35.1"],"我们通过":["35.2","72.2"],"方法遍历":["35.2"],"数组的每个元素":["35.2"],"style":["35.3","118.3"],"color":["35.3","145.3"],"red":["35.3","48.8"],"number":["35.4","42.2","104.4"],"方法中使用箭头函数可以确保正确地绑定":["35.6"],"上下文":["35.6"],"从而避免出现意外的错误":["35.6"],"的列表渲染是一种根据数据数组来动态生成多个相似的元素":["35.6"],"条件渲染使我们能够根据不同的状态或数据来展示不同的内容":["36.0"],"中的条件渲染是一种基本且常用的技术":["36.1"],"它使我们能够根据用户的交互或应用程序的状态来实现动态的用户界面":["36.1"],"in":["36.2","42.12","46.4","97.5"],"to":["36.2","38.6","43.14"],"continue":["36.2"],"我们使用三元表达式来根据":["36.3"],"状态的值来返回不同的":["36.3"],"元素":["36.3","77.5"],"如果":["36.3","36.4","36.5"],"我们使用逻辑与来根据":["36.4"],"状态的值来决":["36.4"],"定是否渲染欢迎消息":["36.4"],"为":["36.4"],"我们使用条件运算符来根据":["36.5"],"状态的值来决定是否渲染提示信息":["36.5"],"建议为每个元素提供唯一的":["36.6"],"以帮助":["36.6"],"正确地更新":["36.6"],"并以声明式的方式构建数据驱动的":["37.1"],"js脚本":["37.3"],"或者":["37.3"],"bash":["37.3","110.4"],"body":["37.4","51.3","77.12","110.10"],"message":["37.6","37.14","110.10"],"事件":["37.7"],"并在触发时执行相应的方法":["37.7"],"is":["37.10","92.5"],"vue":["37.13","42.10","122.6","152.3"],"如清除定时器":["37.18"],"解绑事件等":["37.18"],"destroyed":["37.18"],"销毁后":["37.18"],"在实例销毁之后调用":["37.18"],"组件已经解除绑定的所有数据监听器":["37.18"],"可以执行一些销毁后的清理工作":["37.18"],"activated":["37.18"],"激活":["37.18"],"keep":["37.18"],"之前":["38.1","78.3"],"install":["38.2","110.7","124.5","126.1"],"routes":["38.3"],"about":["38.5","154.6","154.9","154.10"],"children":["38.7","43.13","43.17"],"components":["38.10"],"在大型应用程序中":["39.0"],"组件之间的数据共享和通信可能变得复杂":["39.0"],"用于提交":["39.1"],"而不是直接变更状态":["39.1"],"可以包含任意异步操作":["39.1"],"然后再通过提交":["39.1"],"mutations":["39.2"],"来进行":["39.2"],"使得状态变更变得可追踪和可预测":["39.2"],"插件支持":["39.2"],"mount":["39.3"],"在组件中使用":["39.3"],"在组件中":["39.3","39.5","39.6"],"可以通过计算属性":["39.3"],"computed":["39.3"],"或者方法":["39.3"],"methods":["39.3","118.12"],"来访问和修改":["39.3"],"我们在":["39.4","39.6"],"中定义了":["39.4"],"我们通过调用":["39.5"],"来触发":["39.5"],"action":["39.5"],"当点击按钮后":["39.5"],"传入id":["39.6"],"中定义了三个":["39.6"],"我们可以通过":["39.6"],"来获取这些":["39.6"],"会被调用":["40.1"],"负责通知相关的":["40.1"],"更新视图":["40.1"],"这种方式实现了数据的响应式更新":["40.1"],"确保视图总是与数据保持同步":["40.1"],"虚拟":["40.1"],"如缓存":["40.2"],"getter":["40.2"],"的结果":["40.2"],"避免不必要的触发和更新":["40.2"],"还使用了静态分析":["40.2"],"以在编译时生成更高效的代码":["40.2"],"composition":["40.2"],"api":["40.2","127.6"],"函数":["41.0","65.2","118.5"],"也不用写export":["41.0"],"数据":["41.1"],"方法等等":["41.1"],"均要配置在":["41.1"],"按钮":["41.2","41.12"],"提示":["41.2"],"模板中使用的数据和方法":["41.2"],"都需要通过":["41.2"],"msg":["41.4","43.13","43.17","110.11"],"这样是可以被监听到的修改value":["41.5"],"zs":["41.6","102.1"],"changemsg":["41.6","43.12","43.13"],"实现":["41.7"],"debounce":["41.7"],"的示例":["41.7"],"控制台警告":["41.8"],"cannot":["41.8"],"返回一个原值的只读代理":["41.9"],"change2":["41.10"],"change":["41.12","42.4"],"参数三":["41.16"],"options配置项":["41.16"],"为一个对象":["41.16"],"immediate":["41.16"],"新的值":["41.17"],"newval":["41.18","41.19","41.20"],"oldval":["41.18","41.19","41.20"],"默认初始时就会执行第一次":["41.21"],"产生的副作用":["41.22"],"就是在触发监听之前会调用一个函数可以处理你的逻辑":["41.22"],"但是我们采用异步的方式创建了一个监听器":["41.23"],"这个时候监听器没有与当前组件绑定":["41.23"],"强制效果始终同步触发":["41.24"],"beforecreate":["41.25"],"改用updated":["41.27"],"beforeunmount":["41.27","41.28"],"在元素被移除前调用":["41.27"],"更新结束":["41.28"],"bar":["41.29"],"修饰符对象为":["41.29"],"内容":["41.30","78.2"],"innerheight":["41.31"],"addeventlistener":["41.31","77.5","95.3"],"resize":["41.31"],"removeeventlistener":["41.31","77.3"],"集中式状态管理容器":["42.1"],"实现任意组件通信":["42.1"],"ref":["42.1"],"父组件获取子组件实例":["42.1"],"dbclick":["42.3","42.4"],"vue3":["42.4","42.9"],"框架":["42.4"],"第一个参数为触发事件类型":["42.5"],"第二个":["42.5"],"三个":["42.5"],"n":["42.5"],"个参数即为传递给父组件的数据":["42.5"],"需要注意的是":["42.5","52.10"],"代码如下":["42.5"],"如果想在":["42.6"],"中使用全局事件总线功能":["42.6"],"可以使用插件":["42.6"],"mitt":["42.6"],"传递两个":["42.7"],"分别是":["42.7"],"pageno":["42.7"],"与":["42.7"],"pagesize":["42.7"],"以及绑定两个自定义事件":["42.7"],"handler":["42.8"],"子组件内部可以通过":["42.8"],"中组件内部的数据对外":["42.9"],"关闭的":["42.9"],"外部不能访问":["42.9"],"可以获取某一个组件的父组件实例":["42.9"],"与提供数据":["42.10"],"vuex":["42.11"],"但是核心概念没有":["42.11"],"组件内部遍历数组":["42.12"],"todos":["42.12"],"作用域插槽将数据回传给父组件":["42.12"],"row":["42.12"],"用法":["43.2"],"直接在其他":["43.2"],"子组件接受值":["43.6"],"来接受":["43.6"],"是无须引入的直接使用即可":["43.6"],"v":["43.8","135.1","138.4"],"简写":["43.9"],"这里的两个":["43.10"],"list":["43.12","43.13","123.0"],"默认渲染的页面":["43.13"],"插入至":["43.14"],"onchangemsg":["43.16"],"改变msg":["43.16"],"绑定多个v":["43.17"],"以上":["44.3"],"mode":["44.4"],"additional":["44.4"],"模块热更新":["44.5"],"rollup打包":["44.5"],"选择语言":["44.6"],"次提交":["45.1"],"重写虚拟dom的实现和tree":["45.2"],"文档碎片":["45.3"],"teleport":["45.3"],"瞬移组件的位置":["45.3"],"新增泛型支持":["46.1"],"需要在":["46.1"],"script":["46.1","110.8"],"标签上加上":["46.1"],"派发":["46.2"],"自定义":["46.3"],"现在有了":["46.3"],"数组中可以存放任意类型的数据":["48.0"],"例如字符串":["48.0"],"arr1":["48.1"],"zzz":["48.2"],"其他元素都是undefined":["48.2"],"需要留意的是哪些方法会对原数组产生影响":["48.5"],"哪些方法不会":["48.5"],"concat":["48.6","67.5","73.5","73.6"],"推入两项":["48.7"],"从数组开头推入两项":["48.8"],"slice":["48.11"],"concole":["48.15"],"直接使用sort":["48.24"],"方法排序":["48.24"],"arr":["48.24"],"foreach":["48.27"],"filter":["48.27"],"后的条件表达式进行求值判断":["49.1"],"如果结果为true":["49.1"],"则执行if后的语句":["49.1"],"如果为false则不执行":["49.1"],"语句只会控制紧随其后其后的那一行代码":["49.1"],"汽车一辆":["49.2"],"当成绩为":["49.2"],"时":["49.2"],"奖励一台iphone":["49.2"],"如果比较结果为":["49.3"],"则自当前":["49.3"],"处开始执行代码":["49.3"],"执行完毕":["49.5"],"继续判断":["49.5"],"如果为":["49.5"],"则再次执行循环体":["49.5"],"如果为false":["49.6"],"则循环终止":["49.6"],"如果为true":["49.6"],"则继续执行循环体":["49.6"],"以此类推":["49.6"],"它不能直接用于遍历普通的对象":["49.10"],"要遍历对象属性":["49.10"],"需要使用":["49.10"],"object":["49.10","52.12","54.6","72.3","72.6"],"entries":["49.10"],"typedarray":["49.11"],"等":["49.11","77.2","88.11"],"迭代对象的顺序不同":["49.11"],"循环的迭代顺序是不确定的":["49.11"],"因为对象的属性没有固定的顺序":["49.11"],"中的函数":["50.0"],"变量名":["50.2"],"fn1":["50.3"],"fn2":["50.3"],"cook":["50.6"],"aru":["50.6"],"形参是接受实参的":["50.6"],"酸辣土豆丝":["50.6"],"形参类似于一个变量":["50.6"],"是一个变量但是没有接受值":["50.7"],"结果就是undefined":["50.7"],"建议":["50.7"],"getresult":["50.8"],"res":["50.8"],"不仅可以退出循环":["50.9"],"立即执行":["50.12"],"可以与":["51.0"],"write":["51.1","120.4","120.7"],"代码引入到":["51.2"],"内联形式":["51.3"],"其中":["52.2"],"键名":["52.2"],"成员的名称":["52.2"],"字符串":["52.2"],"的属性":["52.3","52.13"],"就指向一个函数":["52.3"],"如果属性的值还是一个对象":["52.3"],"就形成了链式引用":["52.3"],"o1":["52.3"],"o2":["52.3"],"产生影响":["52.4"],"还是指向原来的那个对象":["52.4"],"这种引用只局限于对象":["52.4"],"如果两个变量指向同一个原始类型的值":["52.4"],"那么":["52.4"],"变量这时都是值的拷贝":["52.4"],"正确":["52.5"],"报错":["52.5"],"这种差异在":["52.5"],"eval":["52.5"],"语句":["52.5"],"作用是对字符串求值":["52.5"],"对象":["52.7","72.2"],"的数字键":["52.7"],"就定义好属性":["52.8"],"属性是不能删除的":["52.10"],"所以":["52.10"],"命令返回":["52.10"],"关于":["52.10"],"方法的介绍":["52.10"],"请看":["52.10"],"标准库":["52.10","52.12"],"对象一章":["52.10"],"另外":["52.10","95.8"],"运算符会返回":["52.11"],"因为这个属性是继承的":["52.11"],"可以使用对象的":["52.11"],"hasownproperty":["52.11","66.2"],"方法判断一下":["52.11"],"该属性不会被":["52.12"],"循环遍历到":["52.12"],"因为它默认是":["52.12"],"不可遍历":["52.12"],"关于对象属性的可遍历性":["52.12"],"参见":["52.12"],"章节中":["52.12"],"一章的介绍":["52.12"],"如果继承的属性是可遍历的":["52.12"],"那么就会被":["52.12"],"然后在":["52.13"],"区块内操作它":["52.13"],"这是因为":["52.13","74.4"],"区块没有改变作用域":["52.13"],"它的内部依然是当前作用域":["52.13"],"这造成了":["52.13"],"语句的一个很大的弊病":["52.13"],"就是绑定对象不明确":["52.13"],"单纯从上面的代码块":["52.13"],"递增和递减运算符":["53.1"],"比较运算符":["53.1"],"位小数":["53.2"],"但在进行计算时其精确度远远不如整数":["53.2"],"除等于":["53.3"],"a2":["53.6"],"不等号":["53.7"],"它会转换为布尔值然后运算":["53.9","53.10"],"但是最终会返回原值":["53.9","53.10"],"则直接返回第一个值":["53.9"],"则返回第一个":["53.10"],"则执行表达式":["53.12"],"来改变优先级即可":["53.13"],"125e7":["54.2"],"等于":["54.2"],"在数值类型中":["54.2"],"存在一个特殊数值":["54.2"],"nan":["54.2","54.6"],"意为":["54.2"],"这个变量被声明了":["54.3"],"只是值为":["54.3"],"它们的值就不能变了":["54.4"],"lang":["54.4"],"值是由":["54.5"],"值派生而来":["54.5"],"非零数值":["54.6"],"包括无穷值":["54.6"],"foo":["54.7"],"otherfoosymbol":["54.7"],"箭头函数":["54.11"],"专门用来将字符串转换为数值的两个方法":["54.15"],"parseint":["54.15"],"将一个字符串转换为一个整数":["54.15"],"解析时":["54.15"],"会自左向右读取一个字符串":["54.15"],"直到读取到字符串中所有的有效的整数":["54.15"],"也可以使用":["54.15"],"来对一个数字进行取整":["54.15"],"parsefloat":["54.15"],"将一个字符串转换为浮点数":["54.15"],"解析器首先要确认的就是这个值是基本类型值还是引用类型值":["54.17"],"的值为一个基本类型":["54.18"],"是存储在栈中":["54.18"],"将":["54.18","95.8","116.2","116.4","116.7","116.8","125.7"],"是一个引用类型":["54.19"],"在赋值操作过程汇总":["54.19"],"实际是将堆内存对象在栈内存的引用地址复制了一份给了":["54.19"],"两个对象对应不同的地址":["54.20"],"关键字声明的变量会自动提升到函数作用域顶部":["55.1"],"相当于":["55.1"],"referenceerror":["55.3"],"catch":["55.5"],"语句或":["55.5"],"在延迟定时器执行时":["55.6"],"他是异步的":["55.6"],"循环已经结束了":["55.6"],"最后的值始终都是":["55.6"],"才是期望的值":["55.6"],"syntaxerror":["55.7"],"声明的作用域也是块":["55.7"],"上面的代码就相当于":["55.8"],"childelement":["56.1"],"将其添加到文档中":["56.1"],"修改元素属性":["56.1"],"这是新创建的段落":["56.2"],"appendchild":["56.2"],"加载历史记录中的不同页面":["57.0","58.0"],"delta":["57.1"],"导航到相对于当前页面的偏移量为":["57.1"],"它提供了对浏览器历史记录的操作":["58.0"],"可以使用它向前或向后导航":["58.0"],"navigator":["58.0"],"它提供了关于浏览器的信息":["58.0"],"如浏览器的名称":["58.0"],"的各个部分":["59.0"],"如协议":["59.0"],"的查询字符串部分":["59.1"],"assign":["59.1"],"https":["59.2","125.1","131.3"],"www":["59.2","118.14","125.1"],"example":["59.2","131.3"],"用户代理字符串等":["60.0"],"浏览器的版本":["60.1"],"appversion":["60.2"],"获取操作系统平台":["60.2"],"分辨率等":["61.0"],"availheight":["61.1","61.2"],"屏幕的可用高度":["61.1"],"屏幕可用高度":["61.2"],"表示浏览器窗口或标签页":["62.0"],"它提供了操作浏览器窗口的方法和属性":["62.0"],"moveto":["62.1","131.1","133.3"],"resizeto":["62.2"],"xmlhttprequest":["63.1","118.11"],"对象来向服务器发异步请求":["63.1"],"从服务器获得数据":["63.1"],"send":["63.2","118.6"],"方法发送给服务器端":["63.2"],"布尔值":["63.4"],"表示是否异步执行操作":["63.4"],"默认为":["63.4"],"请求发送数据的时候":["63.5"],"需要注意如下":["63.5"],"将请求数据添加到":["63.5"],"open":["63.5"],"整个请求过程完毕":["63.6"],"status":["63.6","110.11"],"接收请求":["63.8"],"onreadystatechange":["63.8"],"readystate":["63.8"],"fail":["63.9","122.11"],"闭包可以捕获外部函数的变量和参数":["65.0"],"并将其保存在内部函数的词法环境中":["65.0"],"内部定义了":["65.1"],"函数返回了":["65.2"],"后者可以访问并修改":["65.2"],"柯里化是一种将多参数函数转化为一系列单参数函数的技术":["65.4"],"闭包可以用于实现函数柯里化":["65.4"],"使函数能够记住之前传递的参数":["65.4"],"并返回一个新的函数等待传递剩余的参数":["65.4"],"延迟执行函数":["65.4"],"可以使得函数更灵活":["65.5"],"更具可复用性":["65.5"],"合理使用闭包可以创建私有变量":["65.5"],"这些方法都会创建一个新对象":["66.1"],"originalobject":["66.2"],"函数接收一个参数":["67.1"],"并返回一个新的匿名函数":["67.1"],"新函数接收参数":["67.1"],"提供了一些工具库":["67.2"],"lodash":["67.2"],"ramda":["67.2"],"这是一种使用闭包和递归的柯里化函数实现方式":["67.4"],"函数接收一个要柯里化的函数":["67.4","67.6"],"返回一个新的柯里化函数":["67.4"],"shift":["67.5"],"返回一个新的箭头函数":["67.6"],"极大地浪费资源":["68.0"],"降低前端性能":["68.0"],"为了优化体验":["68.0"],"需要对这类事件进行调用次数的限制":["68.0"],"mousemove":["68.1"],"keyup":["68.1","68.4","77.2"],"函数接收一个要节流的函数":["68.2"],"当前时间":["68.3"],"remaining":["68.3"],"从上一次到现在":["68.3"],"还剩下多少多余时间":["68.3"],"context":["68.3","129.1","130.1"],"cleartimeout":["68.5"],"handlescroll":["68.7"],"处理滚动事件的逻辑":["68.7"],"创建函数":["68.7"],"throttlehandlescroll":["68.7"],"同时":["69.2"],"减少循环次数提升性能":["69.2"],"includes":["69.4"],"parse":["70.2"],"isarray":["70.3"],"是一种用于处理异步操作的对象":["71.0"],"它表示一个异步操作的最终完成":["71.0"],"或失败":["71.0"],"及其结果的值":["71.0"],"读取文件等":["71.1"],"当异步操作成功时":["71.1"],"调用":["71.1","71.5"],"方法中传递的函数会在异步操作成功时被调用":["71.2"],"并接收到成功的结果":["71.2"],"这样":["71.3"],"可以在第二个":["71.3"],"方法中继续处理":["71.3"],"方法会被调用":["71.4"],"传递一个包含所有":["71.4"],"实例结果的数组":["71.4"],"如果任意一个":["71.4"],"实例失败":["71.4"],"将调用新":["71.4"],"事件被触发":["71.5"],"函数判断响应的状态码":["71.5"],"如果在":["71.5"],"到":["71.5"],"的范围内":["71.5"],"则调用":["71.5"],"将响应文本作为成功的结果传递给":["71.5"],"否则":["71.5"],"将状态文本作为错误信息传递给":["71.5"],"它使得对象可以通过原型链":["72.1"],"prototype":["72.1","92.5"],"然后":["72.2"],"来定义":["72.2"],"当我们创建一个":["72.2"],"在这个例子中":["72.3","72.4","93.2"],"我们定义了两个构造函数":["72.4"],"create":["72.6"],"super":["72.8"],"buddy":["72.9"],"但也需要小心使用":["72.11"],"这种多重继承的能力是传统继承中不常见的":["72.12"],"使用构造函数和原型对象":["72.13"],"可以创建一个自定义的工具函数或对象":["72.15"],"这样可以降低内存使用":["72.16"],"在命名属性和方法时要小心":["72.17"],"方法提供了一种更灵活的方式来创建对象":["72.18"],"和数组本身":["73.1"],"prev":["73.8"],"cur":["73.8"],"方法在处理大量数据时可能不太高效":["73.9"],"因为它是顺序执行的":["73.9"],"每个元素依赖前一个元素的累积结果":["73.9"],"输出的是外部作用域的":["74.4"],"而不是全局作用域的值":["74.4"],"btn1":["75.1"],"我们可以依据节点之间的关系查找节点":["75.3"],"基础":["75.5"],"这使得开发者可以使用":["76.1"],"动态地修改网页的内容":["76.1"],"样式和结构":["76.1"],"以及响应用户的交互事件":["76.1"],"链接名":["76.2"],"class":["76.2","76.3"],"文本节点":["76.3"],"可以实现动态修改网页内容":["76.4"],"实时更新页面":["76.4"],"下面是一些常见的方法和技巧来处理":["77.0"],"是一个函数":["77.2"],"它会在事件触发时执行":["77.2"],"使用匿名函数来定义事件处理程序":["77.2"],"eventname":["77.3"],"监听鼠标是移入当前":["77.5"],"修改文本内容":["77.5"],"键盘谈起了":["77.6"],"用户输入文本事件":["77.6"],"blur":["77.7"],"事件也可以用于检测键盘输入":["77.8"],"并做出相应的响应":["77.8"],"keypress":["77.8"],"当用户按下键盘上的字符键时触发":["77.8"],"以下是一些常用的事件对象属性":["77.9"],"target":["77.9"],"触发事件的目标元素":["77.9"],"事件将从祖先元素开始":["77.10"],"向下传播到触发事件的元素":["77.10"],"domcontentloaded":["77.11"],"视图事件":["77.11"],"高效的事件处理方式":["77.12"],"mylist":["77.12"],"选项1":["77.12"],"设置元素的属性值":["78.0"],"是你想要创建的元素的标签名":["78.1"],"例如":["78.1","88.10"],"设置元素的":["78.2"],"作为它的兄弟元素":["78.3"],"从父元素中移除子元素":["78.3"],"removechild":["78.3"],"文档对象模型":["79.0"],"来操作元素的样式和类":["79.0"],"computedstyle":["79.1"],"window":["79.1"],"这将返回一个布尔值":["79.2"],"指示元素是否具有指定的类名":["79.2"],"上述方法可以用于修改元素的样式和类":["79.2"],"以实现动态的样式变化或元素状态的切换":["79.2"],"你可以根据需要进行组合和应用":["79.2"],"innerhtml":["80.0"],"获取或设置元素的":["80.0"],"tagname":["80.1"],"使用选择器获取元素":["80.1"],"setattribute":["80.2"],"自动发送回服务器":["81.0"],"每个":["81.1"],"由一个键值对组成":["81.1"],"gmt":["81.3"],"建议谨慎使用并根据实际需求控制数据量":["81.4","82.6","83.6"],"会在每次请求时自动发送到服务器":["81.4"],"不应将敏感信息存储在":["81.4"],"中的数据在浏览器关闭后仍然存在":["82.0"],"因此适用于需要长期保存的数据":["82.0"],"username":["82.1","83.1","118.2"],"因此":["82.6","83.6"],"存储大量数据可能会导致溢出或性能问题":["82.6","83.6"],"是基于域名的":["82.6"],"每个域名都有独立的":["82.6"],"不同域名之间的":["82.6"],"中的数据在用户关闭浏览器标签页或浏览器会话结束后会被清除":["83.0"],"因此适用于临时保存会话数据":["83.0"],"是基于域名和会话的":["83.6"],"每个域名和浏览器会话都有独立的":["83.6"],"不同域名或会话之间的":["83.6"],"setmilliseconds":["84.1"],"millisecond":["84.1"],"设置日期的毫秒数为指定的值":["84.1"],"setminutes":["84.1"],"minute":["84.1"],"设置日期的分钟数为指定的值":["84.1"],"setmonth":["84.1"],"month":["84.1"],"设置日期的月份为指定的值":["84.1"],"范围为":["84.1"],"setseconds":["84.1"],"datestring":["84.2"],"我们将日期对象设置为":["84.3"],"天后的日期":["84.3"],"获取时间戳":["84.4"],"日期处理":["85.0"],"正则表达式匹配等":["85.0"],"都可以依靠内置对象来完成":["85.0"],"数学对象":["85.1"],"regexp":["85.1"],"正则表达式对象":["85.1"],"error":["85.1","101.12","103.5"],"如对象的创建":["85.2"],"排序等":["85.3"],"这些方法可以帮助我们处理文本数据":["85.4"],"可以进行基本的数学计算":["85.5"],"两个值":["85.6"],"它提供了逻辑运算和条件判断的功能":["85.6"],"可以用于处理时间相关的任务":["85.7"],"promise":["85.9","97.4"],"map":["85.9"],"和其他全局对象不同":["86.0"],"它不是一个构造器":["86.0"],"之间的随机数":["86.4"],"包含":["86.4"],"次方":["86.10"],"pi":["86.12","135.2","147.4"],"negative":["87.1"],"表示负无穷大":["87.1"],"当一个负数超过了":["87.1"],"使用正则表达式来查找匹配的模式":["88.1"],"并进行替换操作":["88.1"],"当涉及到字符串模式匹配和替换时":["88.1"],"的正则表达式":["88.1"],"匹配括号内的任意字符":["88.5"],"来匹配字符串的开始和结束":["88.6"],"匹配邮箱":["88.7"],"groups":["88.9"],"只从上次匹配结束的位置开始匹配":["88.10"],"标志可以通过在正则表达式字面量或构造函数中使用单个字符的方式添加":["88.10"],"markdown":["88.11"],"bark":["89.1"],"构造函数是一个带有":["90.0"],"关键字调用的函数":["90.0"],"它的主要作用是初始化对象的属性和方法":["90.0"],"person2":["90.1","104.5"],"jane":["90.1"],"对象是数据和操作数据的方法的封装单元":["91.1"],"作为一种支持面向对象编程的语言":["91.2"],"提供了创建对象":["91.2"],"定义类":["91.2"],"实现继承和封装等功能":["91.2"],"sex":["92.2"],"男":["92.2"],"调用属性还有一种方法":["92.3"],"年龄":["92.4"],"性别":["92.4"],"bigbai":["92.4"],"属性的值":["92.5"],"判断两个值是否相同":["92.5"],"keys":["92.5"],"的原型是":["93.1"],"对象通过":["93.2"],"创建":["93.2"],"动态更新":["93.3"],"原型和原型链是实现继承和共享属性和方法的关键机制":["93.4"],"禁止删除变量":["94.0"],"delete":["94.0","98.5"],"和函数":["94.0"],"禁止使用八进制字面量":["94.0"],"012":["94.0"],"就会创建一个新的上下文对象":["95.1"],"他们之间是相互独立且独一无二的":["95.1"],"这个对象我们称为函数执行的":["95.2"],"事件绑定函数":["95.3"],"指向":["95.3"],"绑定事件的对象":["95.3"],"mybutton":["95.3"],"me":["95.3"],"apply":["95.5"],"想要将this指向哪里":["95.7"],"函数实参1":["95.7"],"函数实参2":["95.7"],"备注":["95.7"],"son":["95.8"],"通过这一步":["95.8"],"里面的":["95.8"],"修改为":["95.8"],"加上相应的参数":["95.8"],"让":["95.8"],"第一个参数中":["95.10"],"如果不需要改变":["95.10","95.14"],"则传":["95.10","95.14"],"先将":["95.11"],"不让填null":["95.12"],"maxvalue":["95.12"],"求数组":["95.12"],"函数的":["95.14"],"node":["97.1","97.5","108.0","121.13"],"使用cdn":["97.2"],"post":["97.3","110.12","118.12"],"reject":["97.4"],"添加响应拦截器":["97.4"],"也是http的实例":["97.5"],"http":["97.5"],"clientrequest":["97.5"],"token":["98.1"],"基础请求地址":["98.2"],"timeout":["98.2"],"qs":["98.3"],"stringify":["98.3"],"序列化":["98.3"],"比如表单数据":["98.3"],"服务器内部错误":["98.4"],"服务未实现":["98.4"],"网关错误":["98.4"],"put":["98.5"],"httpaction":["98.5"],"userid":["98.6"],"userlist":["98.6"],"封装":["98.7"],"指定文件添加暂存区":["99.5"],"提交指定文件":["99.6"],"往前一个版本":["99.7"],"版本号1":["99.7"],"版本号2":["99.7"],"graph":["99.8"],"查看涉及到指定文件的":["99.8"],"commit":["99.8"],"commitid":["99.10"],"基于当前分支创建分支并切换到新分支":["99.10"],"把":["99.14"],"staged":["99.15"],"unstage":["99.15"],"remove":["99.18"],"别名":["99.20"],"打开git":["100.2"],"配置后结果":["100.3"],"会生成":["100.4"],"20230222160826601":["100.5"],"hex":["101.2"],"0xf00d":["101.2"],"十六进制":["101.2"],"createdboolean":["101.3"],"元素类型":["101.4"],"length":["101.5","101.12","120.10"],"如果你配置了":["101.8"],"tsconfig":["101.8"],"开启了严格模式":["101.8"],"strict":["101.8"],"这样是没问题的":["101.9"],"因为存在死循环":["101.10"],"loop":["101.10"],"需求":["101.14"],"定义一个函数得到一个字符串或者数值数据的长度":["101.14"],"getlength":["101.14"],"语法糖":["102.0"],"它的绝大部分功能":["102.0"],"调用实例的方法":["102.1"],"wang":["102.2"],"也可以外部访问":["102.4"],"不能在外部访问":["102.5"],"为私有属性":["102.6"],"只能在类":["102.6"],"中访问":["102.6"],"可以在这里使用":["102.6"],"需注意":["102.8"],"如果两个函数都是static":["102.8"],"静态的是可以通过this互相调用":["102.8"],"extends":["102.9","104.7"],"c":["102.10","120.3","120.6","121.21","121.23"],"我的名字是":["102.11"],"年龄是":["102.11"],"info":["103.4"],"如果参数类型不同":["103.5"],"则参数类型应设置为":["103.5"],"any":["103.5","110.12"],"参数数量不同你可以将不同的参数设置为可选":["103.5"],"fn":["103.5"],"params":["103.5","118.2"],"如果不传类型":["104.3"],"那么typescript会类型推论":["104.3"],"abc":["104.4"],"的一个超集":["105.1"],"所以对于项目而言":["105.2"],"会使代码更加规范":["105.2"],"从而解决了大型项目代码的复杂性":["105.2"],"完全支持":["105.3"],"vue3已全面支持":["105.5"],"增加前期开发的成本":["105.6"],"毕竟你需要写更多的代码":["105.6"],"配置文件":["105.7"],"init":["105.7","125.2"],"ts":["105.10"],"obj":["106.3"],"a是必须要有的":["106.5"],"其他就不会校验了":["106.5"],"ok":["107.1"],"字面量模式":["107.1"],"空对象类型和大":["107.1"],"switch":["108.0","110.11"],"语句的":["108.0"],"fallthrough":["108.0"],"错误":["108.0"],"不允许":["108.0"],"case":["108.0","110.11"],"语句贯穿":["108.0"],"模块解析选项":["108.0"],"moduleresolution":["108.0"],"选择模块解析策略":["108.0"],"classic":["108.0"],"typescript":["108.0","110.2"],"pre":["108.0"],"分配给类型":["109.1"],"定义变量时没有赋值":["109.1"],"推断为any类型":["109.1"],"s2":["109.2"],"来统一包管理工具":["110.2"],"涉及到技术栈包含":["110.2"],"安装指令":["110.4","110.7"],"i":["110.4"],"g":["110.4"],"项目初始化命令":["110.4"],"overrides":["110.6"],"指定解析器":["110.6"],"解析器":["110.6"],"esprima":["110.6"],"默认解析器":["110.6"],"babel解析器":["110.6"],"parser":["110.6","110.7"],"ts解析器":["110.6"],"pnpm":["110.7","121.16"],"d":["110.7"],"non":["110.8"],"assertion":["110.8"],"namespace":["110.8"],"禁止使用自定义":["110.8"],"模块和命名空间":["110.8"],"semi":["110.8"],"vuejs":["110.8"],"org":["110.8","121.17"],"multi":["110.8"],"word":["110.8"],"names":["110.8"],"要求组件名称始终为":["110.8"],"链接的单词":["110.8"],"vite":["110.9"],"config":["110.9"],"文件配置如下":["110.9"],"defineconfig":["110.9"],"获取请求体携带过来的用户名与密码":["110.10"],"调用获取用户信息函数":["110.10"],"用于判断是否有此用户":["110.10"],"checkuser":["110.10"],"find":["110.10"],"没有用户返回失败信息":["110.10"],"code":["110.10"],"账号或者密码不正确":["110.10"],"如果有返回成功信息":["110.10"],"token过期":["110.11"],"break":["110.11"],"获取用户信息":["110.12","122.14"],"如果不存在":["111.0"],"则转给哪个文件执行":["111.0"],"nginx项目部署500的问题":["111.0"],"vue项目路由不是真实存在的":["111.0"],"conf":["111.1"],"从表中删除一个列":["112.1"],"以下是":["113.0"],"大整数类型":["113.1"],"036":["113.1"],"2250738585072014e":["113.2"],"用于存储较长文本数据的字符串类型":["113.3"],"00":["113.4"],"binary":["113.5"],"varbinary":["113.5"],"blob":["113.5"],"数据组织和存储":["114.0"],"数据库提供了结构化的数据存储方式":["114.0"],"使数据的组织和管理更加方便和高效":["114.0"],"数据共享和访问控制":["114.0"],"视图":["114.1"],"复制和高可用性选项等":["114.1"],"强大的社区支持":["114.1"],"mysql拥有庞大的用户社区和活跃的开发者社区":["114.1"],"提供了广泛的文档":["114.1"],"更新数据和删除数据等操作":["116.0"],"下面是":["116.0"],"是您的":["116.1"],"用户名":["116.1"],"然后输入密码进行连接":["116.1"],"替换为要插入数据的表的名称":["116.5"],"等替换为要检索的列名":["116.6"],"替换为要更新数据的表的名称":["116.7"],"应用":["117.2","119.1"],"加载外部资源或执行":["117.2"],"根据浏览器检查元素区":["117.3"],"rating":["117.4"],"num":["117.4"],"pic":["117.4"],"attr":["117.4"],"src":["117.4"],"p1461851991":["117.6"],"无间道":["117.6"],"無間道":["117.6"],"p2564556863":["117.6"],"疯狂动物城":["117.6"],"zootopia":["117.6"],"p2614500649":["117.6"],"控方证人":["117.6"],"witness":["117.6"],"prosecution":["117.6"],"开发框架":["118.0"],"是一个动态的参数":["118.2"],"ids":["118.2"],"是动态匹配到的":["118.2"],"别忘记调用":["118.5"],"get":["118.6","118.12","122.14"],"内置中间件":["118.8"],"自":["118.8"],"版本开始":["118.8"],"内置了":["118.8"],"个常用的中间件":["118.8"],"极大的提高了":["118.8"],"项目的开发效率和体验":["118.8"],"static":["118.8"],"配置中间件":["118.10"],"的接口":["118.11"],"在浏览器中有兼容性":["118.11"],"只有支持":["118.11"],"level2":["118.11"],"custom":["118.12"],"仅支持客户端发起":["118.12"],"head":["118.12"],"请求":["118.12"],"如果客户端希望通过":["118.12"],"只有三个值":["118.14"],"application":["118.14"],"请求进行预检":["118.15"],"以获知服务器是否允许该实际请求":["118.15"],"所以这一次的":["118.15"],"electron":["119.1"],"可以构建跨平台的桌面应用":["119.1"],"指的是":["119.2"],"的主线程只有一个":["119.2"],"为了确保主线程不被阻塞":["119.2"],"主线程是用于接收客户端请求":["119.2"],"程序运行效率较低":["119.3"],"不存在创建":["120.1"],"存在截断":["120.1"],"读写":["120.1"],"存在打开失败":["120.1"],"复制文件内容":["120.3"],"users":["120.3","120.6"],"笔记":["120.3"],"mp3":["120.3"],"将读取到的数据写入到可写流中":["120.4"],"简便方式":["120.4"],"success":["120.6"],"通过可写流写入文件的内容":["120.7"],"将一个字符串转换为":["120.8"],"alloc":["120.8"],"创建指定大小的":["120.8"],"获取文件所处的绝对路径":["120.9"],"readfile":["120.9"],"占用内存的大小":["120.10"],"一个汉字3字节":["120.10"],"字符串的长度":["120.10"],"8进制输出第一个元素":["120.10"],"用来处理路径的模块":["120.11"],"它提供了一系列的方法和属性":["120.11"],"dirname":["120.12"],"files":["120.12"],"txt":["120.12"],"utf8":["120.12"],"fext":["120.14"],"用来创建":["120.15"],"解决中文乱码的问题":["120.16"],"setheader":["120.16","120.17"],"charset":["120.16"],"utf":["120.16"],"只是向外部暴露一些接口":["121.2"],"这种模块级别的访问限制":["121.6"],"叫做模块作用域":["121.6"],"加载某个模块即加载该模块的":["121.8"],"扩展名加载":["121.11"],"入口不存在或无法解析":["121.13"],"则":["121.13"],"导致在基于内置模块进行项目开发时":["121.15"],"效率很低":["121.15"],"包是基于内置模块封装出来的":["121.15"],"yarn":["121.16","154.3"],"taobao":["121.17"],"切换源头":["121.17"],"description":["121.18"],"介绍包做的什么功能":["121.18"],"描述":["121.18","124.4"],"keywords":["121.18"],"关键字":["121.18"],"xxx":["121.18"],"xx":["121.18"],"还是第三方模块":["121.19"],"他们都会优先从缓存中加载":["121.19"],"扩展名进行加载":["121.21"],"如果以上两步都失败了":["121.23"],"测试是否正常工作":["122.2"],"query":["122.2"],"select":["122.2"],"优点":["122.5"],"前端耗时短":["122.5"],"浏览器只需直接渲染页面":["122.5"],"无需额外请求数据":["122.5"],"有利于":["122.5"],"页面在浏览器拼接完成":["122.6"],"因此爬虫无法爬取页面的有效信息":["122.6"],"可使用前后端分离":["122.7"],"eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9":["122.13"],"eyjpzci6mtcsinvzzxjuyw1lijoiqnj1y2uilcjwyxnzd29yzci6iiisim5py2tuyw1lijoiagvsbg8ilcjlbwfpbci6innjdxracxeuy29tiiwidxnlcl9wawmioiiilcjpyxqioje2nde4nju3mzesimv4cci6mty0mtkwmtczmx0":["122.13"],"bmqzaknszgd8izxrggyvlvwgl7egmtwitvjgd":["122.13"],"a5u5c":["122.13"],"使用方式":["122.13"],"客户端会把":["122.13"],"当":["122.14"],"中间件配置成功后":["122.14"],"即可在那些有权限的接口中":["122.14"],"来访问从":["122.14"],"字符串中解析出来的用户信息":["122.14"],"admin":["122.14"],"getinfo":["122.14"],"global":["123.0"],"移除全局依赖项":["123.0"],"列出安装的依赖项":["123.0"],"ls":["123.0"],"卸载和共享":["124.1"],"并查看版本":["124.2"],"shell":["124.2","126.1"],"文件的":["124.3"],"scripts":["124.3","154.11"],"部分定义的脚本":["124.3"],"publish":["124.3"],"将自己的包发布到":["124.3"],"仓库":["124.3","125.5"],"入口文件等":["124.4"],"在项目中":["124.4"],"你可以手动编辑":["124.4"],"命令安装所有的依赖项":["124.5"],"仓库中":["124.6"],"使其可供其他开发者使用":["124.6"],"在发布包之前":["124.6"],"按照以下步骤进行操作":["125.0"],"npm":["125.2"],"文件":["125.3"],"readme":["125.4"],"md":["125.4"],"并使其对其他人可用":["125.5"],"文件中的版本号":["125.6"],"是你要移除的包的名称":["126.2"],"更新依赖项":["126.2"],"要更新依赖项到最新版本":["126.2"],"upgrade":["126.2"],"允许控制绘图区域":["127.1"],"颜色":["127.1"],"线条":["127.1"],"轴上的位置以及宽度和高度等信息":["127.3"],"通过为图形或其他元素设置":["127.3"],"常见的":["127.4"],"绘图上下文时":["127.4"],"也可以绘制更高级的元素":["127.5"],"3d":["127.5"],"图形和曲线":["127.5"],"并使用":["127.6"],"来更新和显示数据":["127.6"],"语言或":["127.7"],"库":["127.7"],"jquery":["127.7"],"时存在差异":["127.8"],"因此需要在开发过程中进行跨浏览器的测试":["127.8"],"此外":["127.8"],"transform":["128.0"],"通过一个变换矩阵完成图像变换":["128.0"],"度的矩形":["128.1"],"方法必须在":["128.1"],"为水平翻转":["128.2"],"表示垂直翻转":["128.2"],"fillstyle":["128.3","129.1"],"fillrect":["128.4","129.1"],"原始图形是":["128.4"],"方法绘制的矩形":["128.5"],"左上角从":["128.5"],"平移到":["128.5"],"把图像源和目标图像":["129.0"],"使用异或操作对源图像与目标图像进行组合":["129.1"],"获取画笔":["130.1"],"2d":["130.1"],"设置或返回两条线相交时":["130.2"],"所创建的拐角类型":["130.2"],"linecap":["130.2"],"设置或返回线条的结束端点样式":["130.2"],"beginpath":["130.2"],"lineto":["131.1"],"方法定义一个辐射渐变":["131.2"],"需要指定两个圆":["131.2"],"r0":["131.2"],"r1":["131.2"],"方法接受六个参数":["131.2"],"是辐射起始的圆的圆心坐标":["131.2"],"是起始圆的半径":["131.2"],"pattern":["131.3"],"png":["131.3"],"onload":["131.3"],"rgba":["131.4"],"arcto":["133.3"],"方法主要用来绘制圆弧":["133.3"],"需要给出两个点的坐标":["133.3"],"当前点与第一个点形成一条直线":["133.3"],"第一个点与第二个点形成另一条直线":["133.3"],"然后画出与这两根直线相切的弧线":["133.3"],"第二种绘制图片的方式":["133.5"],"把图片缩放到600400":["133.5"],"top":["133.6"],"hanging":["133.6"],"middle":["133.6"],"ideographic":["133.6"],"bottom":["133.6"],"文本方向":["133.6"],"ltr":["133.6"],"scratchcard":["135.1"],"pagey":["135.2"],"math":["135.2"],"fill":["135.2","150.4","150.5","150.7","150.8"],"closepath":["135.2"],"random":["135.2"],"绘制分针":["136.3"],"stroke":["138.3","150.5"],"globalcompositeoperation":["138.3"],"source":["138.3"],"over":["138.3"],"linewidth":["138.3"],"nullbtn":["138.4"],"清空画布":["138.4"],"线宽":["138.4"],"alpha":["140.1"],"interactive":["140.2","141.7"],"给矩形添加点击事件":["140.2"],"图形和动画":["141.1"],"它提供了简单易用的":["141.1"],"进行降级渲染":["141.3"],"以确保在不支持":["141.3"],"它具有一致的接口设计和详细的文档":["141.4"],"滤镜":["141.5"],"filters":["141.5"],"它支持响应式设计":["141.6"],"resources":["141.7"],"texture":["141.7"],"允许交互":["141.7"],"endfill":["142.2","147.2","147.3","147.4","147.5"],"矩形缩放":["142.2"],"position":["142.2","147.1","147.2"],"位移":["142.2"],"pink":["143.1"],"设置文字位置":["143.1"],"screen":["143.1","149.1","149.2"],"jpg":["145.1"],"创建一个精灵":["145.1"],"sprite":["145.1","146.2","146.4"],"pointerover":["145.2"],"outerstrength":["145.3"],"强度":["145.3"],"innerstrength":["145.3"],"resolution":["146.1"],"devicepixelratio":["146.1"],"像素比":["146.1"],"设置缩放":["146.3"],"rotation":["146.4","149.1"],"创建容器":["149.0"],"设置位置":["149.1","149.2"],"旋转45度":["149.1"],"锚点":["149.2"],"anchor":["149.2"],"xml":["150.1"],"格式定义图形":["150.1"],"在不给":["150.1"],"y2":["150.3"],"ry":["150.6"],"opacity":["150.8"],"中表示":["151.0"],"物体形状的基本构建块":["151.0"],"提供了各种预定义的几何体":["151.0"],"如立方体":["151.0"],"球体":["151.0"],"圆柱体等":["151.0"],"也支持自定义几何体":["151.0"],"材质":["151.0"],"material":["151.0"],"材质定义了":["151.0"],"物体的外观和纹理":["151.0"],"提供了多种材质类型":["151.0"],"如基本材质":["151.0"],"meshbasicmaterial":["151.0"],"jsm":["152.6"],"controls":["152.6"],"camera":["152.7","152.8"],"renderer":["152.7"],"scene":["152.8"],"渲染下一帧的时候就会调用render函数":["152.8"],"单独设置某个轴的缩放":["153.1"],"官方网站":["154.0"],"blog":["154.1"],"也可以在":["154.2"],"vscode":["154.2"],"上使用":["154.2"],"按":["154.2"],"ctrl":["154.2"],"j":["154.2"],"about1":["154.6","154.9","154.10"],"功能":["154.7"],"特点":["154.7"],"details":["154.7"],"具体描述信息":["154.7"],"关于2":["154.9"],"about2":["154.9"],"text代表每一项的名字":["154.9"],"link":["154.10"],"package":["154.11"],"运行":["154.11"]},{"0":["11.8","14.13","17.6","20.6","23.2","68.3","73.8","86.13","104.4","109.2","120.10","131.3","142.2","146.4","153.3"],"1":["48.1","52.8","53.13","65.3","86.12","120.9","120.10"],"2":["10.13","11.7","11.11","16.12","18.4","48.1","57.2","120.7","143.1","145.1","154.7"],"3":["9.10","10.15","10.16","16.12","18.30","54.14","69.2","75.4","86.5","86.10","92.3","99.15","104.6","110.3","120.7","125.5","130.1","131.1"],"4":["9.3","9.5","10.16","16.5","16.12","16.14","18.4","18.16","49.11","50.8","68.7","69.2","76.3","86.5","86.6","86.7","86.11","94.0","99.1","99.21","136.3","149.1","149.2"],"5":["5.5","39.1","53.5","54.9","69.2","94.0","95.3","122.11","133.3","142.2"],"6":["10.6","17.10","48.32","58.0","86.8","94.0","122.14","146.3","151.0"],"7":["16.14","53.5","65.4","86.9"],"8":["48.32","73.3","99.8","120.10","120.17","149.1","149.2"],"9":["18.25"],"10":["6.4","48.32","86.3","103.3","120.10"],"11":["73.3"],"16":["86.11"],"18":["101.13","106.3"],"19":["86.8","113.4"],"20":["102.6","128.2"],"21":["92.4"],"24":["86.9"],"25":["48.24","133.3"],"26":["82.3","83.3"],"28":["48.21"],"30":["32.8","32.11"],"35":["87.2"],"45":["54.15"],"50":["131.2","142.2","150.6"],"54":["53.13"],"60":["49.2","150.9"],"68":["86.6"],"70":["150.9"],"79":["49.2"],"80":["118.2","118.6","118.7","120.17"],"88":["120.10"],"94":["48.2"],"100":["92.4","129.1","134.2","147.3"],"123":["52.3","52.7","104.7","106.6","107.1"],"150":["134.2","142.2"],"180":["86.12"],"200":["63.8","110.10","128.4","129.1","147.1","147.2"],"213":["106.5","109.2"],"300":["63.6","63.8","147.1","147.3","147.4"],"350":["134.1"],"400":["63.6","132.0","133.4","133.5","147.4","147.5"],"403":["110.11"],"404":["110.11"],"456":["54.15"],"500":["68.7","110.11","147.5"],"503":["98.4"],"504":["98.4"],"505":["98.4"],"560":["24.11"],"600":["16.4","147.2"],"807":["113.1"],"2019":["6.4"],"2038":["113.4"],"8080":["120.16"],"8601":["84.1"],"的概念":["5.0"],"允许我们以一种更面向对象的方式来创建和管理对象":["5.0"],"我的名字是":["5.1","13.1"],"并且我":["5.1"],"我的名字是john并且我30岁了":["5.2"],"console":["5.3","7.6","8.22","9.4","9.5","9.10","10.6","10.15","11.18","11.19","13.1","13.6","31.6","31.11","48.7","48.8","48.28","48.29","50.6","53.9","53.10","54.2","63.6","73.5","73.8","95.12","98.3","120.14","120.17","122.2","133.6","140.2"],"log":["5.3","7.5","7.6","8.16","8.21","8.22","9.3","9.4","9.5","9.6","9.10","10.6","10.15","11.18","11.19","13.1","13.6","31.6","31.11","48.7","48.8","48.31","49.8","50.6","54.2","63.6","73.5","82.2","83.2","92.7","92.12","92.13","92.16","92.19","95.12","98.3","104.4","120.14","122.2","133.6","135.2","140.2"],"我是一名":["5.3"],"我":["5.4"],"age":["5.4","13.21","41.13","82.4","83.4","92.20"],"tip":["5.6","12.5","27.5","43.10","43.16","50.7","67.2","71.4","74.4","90.2","95.11","133.3"],"总结":["5.6","27.5","36.6","49.10","67.2","90.2"],"es6":["5.6"],"中的类提供了更接近传统面向对象编程的语法":["5.6"],"使得创建和管理对象更加简洁和直观":["5.6"],"类的继承":["5.6"],"方法重写":["5.6"],"作为":["6.2"],"的一种实现":["6.2"],"是最广泛使用的一种":["6.2"],"其他脚本语言可以基于":["6.2"],"apis":["6.3","75.2","75.5"],"等":["6.3","54.12","85.9","151.0"],"环境中的组成关系":["6.3"],"finally":["6.4"],"用于在":["6.4"],"结束时执行回调":["6.4"],"rest":["6.4"],"spread":["6.4"],"属性":["6.4","10.17","18.5","32.3","32.4","35.2","79.2","81.1","121.8"],"提供了更便捷的对象和数组操作":["6.4"],"es10":["6.4"],"es2019":["6.4","10.20"],"flat":["6.4"],"使用迭代器遍历map的键":["7.2"],"keysiterator":["7.2"],"for":["7.2"],"of":["7.2"],"使用迭代器遍历map的值":["7.2"],"valuesiterator":["7.2"],"outarray":["7.4"],"解构传参":["7.6"],"使得":["8.1","76.4"],"可以更好地组织和管理代码":["8.1"],"和导出":["8.2"],"export":["8.2","35.3","35.4","35.5","41.31","110.8"],"机制进行交互":["8.2"],"以便其他模块可以使用它们":["8.6"],"name":["8.7","8.8","8.13","30.10","30.12","30.17","37.12","56.1","110.8"],"john":["8.7","30.12","32.7","32.14","82.1","83.1","92.9","92.10","92.17"],"hello":["8.8","8.12","8.13","29.23","30.7","30.10","30.11","30.20","31.5","120.3","128.2","133.6"],"my":["8.9","8.13"],"is":["8.9","27.3"],"输出":["8.11","8.12","8.16","8.17","8.18","8.21","9.6","69.1","72.7","72.9","82.2","83.2","89.1","89.3","93.1"],"alice":["8.14"],"bob":["8.18"],"object":["8.19"],"在日常开发中":["8.28"],"应该积极运用":["8.28"],"中的元素是唯一的":["9.1"],"array":["9.6","48.28","48.29","48.30"],"true":["9.7","32.9","36.3","36.4","36.5","41.4","41.16","54.5","54.9","55.7","69.6","92.11","93.1","101.8","104.3","110.9"],"对象中的按插入顺序排列的所有元素的值":["9.9"],"e":["9.12","140.2"],"l":["9.12"],"o":["9.12","11.12"],"注":["9.12"],"中":["9.12","41.1","97.1","122.13"],"解构传入":["9.14"],"传入":["9.15","80.1"],"中是否存在":["9.15"],"filter":["9.16"],"x":["9.16","13.6","52.4","103.4","128.4","153.1","153.2"],"has":["9.16"],"不会使用默认值":["10.4"],"没有第二个参数时":["10.5"],"函数参数的默认值就会生效":["10.5"],"然后才是解构赋值的默认值生效":["10.5"],"才会取到默认值":["10.5"],"注意":["10.5","52.7","95.11"],"函数参数的默认值生效以后":["10.5"],"参数解构赋值依然会进行":["10.5"],"f":["10.5"],"a":["10.5","27.3","37.16","48.24","53.13","120.1","138.3"],"b":["10.5","14.3","48.24","54.15","99.19"],"world":["10.5","128.2"],"foo":["10.6","10.7","86.14"],"注明":["10.7"],"这样做的好处是增加函数的健壮性":["10.7"],"某一个参数不得省略":["10.7"],"如果省略就抛出一个错误":["10.7"],"js":["10.7","10.12","41.2","53.9","53.10","97.1","97.2","121.13"],"function":["10.7","10.12","52.10","54.8","85.1","92.2","106.7","118.7"],"throwifmissing":["10.7"],"throw":["10.7","101.11"],"new":["10.7","63.3","72.6","72.8","89.1","95.8","101.11","102.2","102.6","102.11","138.3","146.2"],"error":["10.7","101.11","102.11","121.23"],"missing":["10.7"],"parameter":["10.7"],"mustbeprovided":["10.7"],"return":["10.7","31.5","31.6","31.9","39.3","41.2","41.31","101.14","106.7","120.12","122.2"],"上面代码的":["10.7"],"函数":["10.7","41.2","71.5","95.11","95.14"],"如果调用的时候没有参数":["10.7"],"就会调用默认值":["10.7"],"展开语法将数组展开为其中的各个元素":["10.9"],"而剩余语法则是将多个元素收集起来成为一个整体":["10.9"],"使用方式很简单在函数定义时使用":["10.10"],"紧接着跟一个收集的参数":["10.10"],"这个收集的参数就是我们所传入不定参数的集合":["10.10"],"也就是数组":["10.10"],"这样就很简单地摆脱了":["10.10"],"的束缚":["10.10"],"另外":["10.10"],"还可以指定一个默认的参数":["10.10"],"如下示例":["10.10"],"基础参数":["10.10"],"剩下的参数组成的数组":["10.10"],"剩余参数的位置":["10.11"],"剩余参数只能是最后一个参数":["10.11"],"之后不能再有其他参数":["10.11"],"fun":["10.12"],"c":["10.12","11.11","14.6","30.19","106.6"],"nan":["10.12","86.14","87.1","92.15"],"和":["10.12","13.4","32.3","33.11","43.15","49.6","68.0","74.3","77.8","127.3"],"都是":["10.12"],"undefined":["10.12","14.2","54.6"],"和展开语法相反":["10.13"],"结合使用":["10.14"],"使得代码更加现代化和易读":["10.14"],"在上面的例子中":["10.17","32.4","32.14","33.13","34.5","35.3","35.4","35.5","89.3"],"传统函数的":["10.17"],"方法使用了对象的":["10.17"],"因此":["10.17","52.13"],"指向了":["10.17"],"对象":["10.17","93.2"],"应使用传统函数而非箭头函数":["10.18"],"箭头函数在":["10.18"],"javascript":["10.18","33.1","75.1","127.5"],"代码中广泛使用":["10.18"],"做出了改变":["10.20"],"允许":["10.20"],"语句省略参数":["10.20"],"就不可变":["11.1"],"concat":["11.2"],"tolowercase":["11.5"],"touppercase":["11.5"],"foo000":["11.8"],"at":["11.19"],"cond":["11.20"],"并允许在字符串中插入变量":["12.1"],"表达式和多行文本":["12.1"],"模板字符串的引入简化了字符串拼接和多行文本的创建":["12.5"],"使得代码更加清晰易读":["12.5","15.0"],"在现代":["12.5"],"等同于hello":["13.1"],"this":["13.1","30.11","90.0","94.0"],"这种写法用于函数的返回值":["13.1"],"将会非常方便":["13.1"],"getpoint":["13.1"],"上面代码中":["13.4","133.3"],"得到的都是":["13.4"],"所以":["13.4"],"会把":["13.4"],"等价于":["13.5","52.8"],"null":["13.12","31.8","31.10","54.1","54.6","63.4","101.7"],"银色":["13.21"],"应用":["13.21"],"合并默认参数和用户参数":["13.21"],"loguser":["13.21"],"useroptions":["13.21"],"defaults":["13.21"],"username":["13.21"],"zhangsan":["13.21"],"不能转换为":["14.3"],"item":["14.9","48.30"],"自动跳过空位":["14.16"],"n":["14.17","53.5","54.6"],"无论是数组解构还是对象解构":["15.0"],"color":["16.2"],"ccc":["16.2","136.3"],"因为一个元素":["16.5"],"不可能即使":["16.5"],"又是":["16.5"],"span":["16.5","78.1"],"元素":["16.5","29.8","35.2"],"text":["16.6","16.9","21.1","30.5","37.14","143.2"],"align":["16.6"],"decoration":["16.9"],"underline":["16.9"],"选中div后所有的兄弟p元素":["16.9"],"通用兄弟选择器":["16.9"],"input":["16.11","27.2","41.7"],"textarea":["16.11","29.16"],"css":["16.12","17.3","17.4","18.31","18.33","51.0","75.1","80.1","110.9","118.8"],"啥都选不到":["16.12"],"ie6":["16.14"],"专有":["16.14"],"zoom":["16.14"],"父级元素添加双伪元素":["16.14"],"布局提供了一种直观而强大的方法":["17.0"],"项目":["17.1","154.11"],"可以通过":["17.1","71.5"],"主轴为水平方向":["17.2"],"或":["17.2","49.10","122.13"],"项目被拉伸以填满交叉轴空间":["17.3"],"container":["17.3","17.4"],"display":["17.3","17.9"],"项目逆向换行到上一行":["17.4"],"row":["17.5"],"水平排列":["17.5"],"200px":["17.7","18.11","20.2"],"项目的基准宽度为200像素":["17.7"],"wrap":["17.9"],"垂直居中":["17.10"],"设置":["17.10"],"实现垂直居中对齐":["17.10"],"规范中被称为":["18.1"],"layout":["18.1"],"items":["18.2"],"网格项可以跨越多个网格单元格":["18.2"],"100px":["18.3","18.6","18.8","18.11"],"auto":["18.3","18.8"],"网格项跨越第二列到第四列":["18.4","18.16"],"三列":["18.6"],"第二列是第一列的两倍宽度":["18.6"],"sidebar":["18.8"],"content":["18.8"],"20px":["18.9","18.10"],"行间距为":["18.9"],"列间距为":["18.10"],"定义两列":["18.11"],"center":["18.13","18.14","20.8"],"项目在列轴上居中对齐":["18.13","18.14"],"end":["18.15","120.16","120.17"],"项目在列轴上右对齐":["18.15"],"布局至关重要":["18.17"],"在上述示例中":["18.18","18.20","18.22","18.23","18.24","18.25","65.3","74.3","88.9"],"我们使用":["18.18","32.14","34.4"],"关键字和":["18.18"],"单位来设置网格轨道的大小":["18.18"],"函数来定义网格模板":["18.19"],"它可以简化重复的设置":["18.19"],"通过":["18.19","42.10","71.5","120.6","122.14"],"大于1200px时":["18.20"],"使用三列布局":["18.20"],"我们使用媒体查询来根据不同屏幕尺寸应用不同的网格布局":["18.20"],"当屏幕宽度大于":["18.20"],"我们创建了一个简单的网页布局":["18.22"],"footer":["18.23","18.24"],"我们创建了一个复杂的网页布局":["18.23"],"其中使用了":["18.23"],"我们创建了一个嵌套的网格布局":["18.24"],"它们分别适用于不同的布局需求":["18.26"],"并可以结合使用以实现复杂的布局":["18.26"],"布局适用于简单的水平或垂直布局":["18.27"],"如导航菜单":["18.27"],"共同点":["18.28"],"都支持灵活的响应式设计":["18.28"],"可以根据屏幕尺寸和设备动态调整布局":["18.28"],"以下是一些最佳实践和优化建议":["18.29"],"前缀或回退方案":["18.31"],"布局时":["18.32"],"建议合理控制网格项的数量和布局复杂度":["18.32"],"使用":["18.33","39.6","41.31","122.3"],"前缀和回退方案":["18.33"],"确保在不支持":["18.33"],"相同级别的选择器":["19.0"],"显示最后面的样式":["19.0"],"特殊规则":["19.1"],"行内样式":["19.1"],"权重大于":["19.1"],"所有选择器":["19.1"],"important":["19.1"],"的权重":["19.1"],"大于":["19.1"],"水平居中":["20.1"],"background":["20.2","20.3","21.3","30.21"],"skyblue":["20.3"],"right":["20.6"],"height":["20.7"],"100vh":["20.7"],"1px":["21.0"],"solid":["21.0"],"超出的内容溢出隐藏":["21.1"],"设置溢出隐藏":["21.2"],"ellipsis":["21.2"],"隐藏的文本以省略号显示":["21.2"],"word":["21.2"],"break":["21.2"],"0px":["21.3"],"bottom":["21.3"],"fff":["21.3"],"thumb":["22.0"],"border":["22.0"],"radius":["22.0"],"10px":["22.0","23.1"],"朝左的三角形":["23.1"],"polygon":["23.2"],"暂停和音量控件":["24.0"],"在":["24.0","32.3","33.14","41.2","110.8"],"与":["24.0","24.5"],"之间你需要插入浏览器不支持的":["24.0"],"元素的提示文本":["24.0"],"audio":["24.6"],"track":["24.6"],"ie":["24.7"],"下可以正常使用":["24.7"],"chrome":["24.7"],"重新加载":["24.8"],"您的浏览器不支持":["24.10"],"play":["24.11"],"else":["24.11","63.6","68.6","70.4","84.5","101.12","101.14","135.2"],"pause":["24.11"],"使得网页可以在浏览器中正确显示和呈现":["25.0"],"定义文档使用的字符编码":["25.1"],"通常使用":["25.1"],"以支持多语言字符集":["25.1"],"定义网页的标题":["25.1"],"显示在浏览器的标题栏或标签页上":["25.1"],"用于创建无序列表":["25.2"],"ol":["25.2"],"有序列表和列表项标签":["25.2","27.1"],"用于创建有序列表":["25.2","27.1"],"div":["25.2","30.20","41.1","43.13","43.17"],"容器标签":["25.2"],"地理定位":["25.3"],"本地存储等":["25.3"],"这些新特性使得开发者可以更轻松地构建功能丰富":["25.3"],"是网页开发的基础":["25.4"],"它通过一系列标签和元素来描述网页的结构和内容":["25.4"],"html5":["25.4"],"引入了许多新特性":["25.4"],"使得网页开发更加强大和灵活":["25.4"],"以确保它们不会被渲染":["26.0"],"请在复制代码时将特殊字符删除":["26.0"],"这是h5级别的标题":["26.1"],"点击这里跳转到示例网站":["26.3"],"示例图片":["26.4"],"列表项3":["26.5","26.6"],"标签":["26.8"],"单元格2":["26.9"],"复选框":["26.11"],"value":["26.13","41.6","109.2"],"版权所有":["26.14"],"mp3":["26.15"],"您的浏览器不支持音频播放":["26.15"],"块级标签和内联标签":["27.0"],"table":["27.1"],"tr":["27.1"],"th":["27.1"],"用于插入一个换行符":["27.2"],"输入标签":["27.2"],"用于创建各种输入字段":["27.2"],"paragraph":["27.3"],"不同的标签可以接受不同的属性":["27.4"],"它们有不同的用途和功能":["27.4"],"例如设置样式":["27.4"],"标签用于定义网页的结构和内容":["27.5"],"通过块级标签和内联标签可以构建丰富多样的网页布局和内容展示":["27.5"],"不是一个全能型框架":["29.1"],"而是一个仅关注于视图层的库":["29.1"],"它可以与其他库或框架":["29.1"],"如":["29.1","29.20","76.3","116.1"],"redux":["29.1"],"从而降低了代码的耦合度":["29.3"],"提高了代码的可读性和可维护性":["29.3"],"技术使得":["29.4"],"可以实现高效的页面更新":["29.4"],"减少了不必要的":["29.4"],"从而提高了应用程序的可维护性和稳定性":["29.5"],"axios":["29.6"],"用于发送网络请求等":["29.6"],"这些工具的存在使得我们可以更加专注于业务逻辑的实现":["29.6"],"ui":["29.8","29.14","37.1"],"外观的":["29.8"],"会被转换成对应的":["29.9"],"我们可以通过":["29.10","33.14","34.3"],"来访问传递过来的数据":["29.10"],"来访问和更新":["29.11"],"通过状态管理":["29.11"],"生命周期方法允许我们在组件不同阶段执行相应的逻辑":["29.12"],"从而更好地控制组件的行为和状态":["29.12"],"事件处理和原生":["29.13"],"dom":["29.13","29.23","42.5"],"事件处理非常相似":["29.13"],"实现动态和灵活的界面展示":["29.14"],"我们可以轻松地展示数据列表":["29.15"],"如商品列表":["29.15"],"select":["29.16"],"我们可以在多个组件之间共享数据和状态":["29.17"],"并保持数据的一致性和同步性":["29.17"],"我们可以将通用的逻辑封装成函数":["29.18"],"然后将该函数应用到多个组件中":["29.18"],"上下文的使用需要谨慎":["29.19"],"避免滥用":["29.19"],"从而使函数组件在功能上更接近类组件":["29.20"],"同时避免了类组件的一些问题":["29.20"],"babel":["29.22"],"min":["29.22","95.12"],"将":["29.22","35.4","76.2","122.13"],"jsx":["29.22"],"语法":["29.22","49.4"],"结构如下":["29.23"],"react":["29.23"],"代码解释":["29.23"],"render":["29.23","29.24","31.6","31.8","31.9","31.11","33.12","122.6"],"createroot":["29.24"],"document":["29.24","32.7","32.8","32.9","32.14","33.12","146.1"],"getelementbyid":["29.24","32.14"],"root":["29.24","32.14"],"中扮演着非常重要的角色":["30.1"],"它是":["30.1"],"代码被转换为了一个函数调用":["30.2"],"第一个参数是标签名":["30.2"],"第二个参数是属性对象":["30.2"],"在这个例子中为空":["30.2"],"第三个参数是标签内容":["30.2"],"这个过程使得":["30.2"],"syntax":["30.4","30.8"],"placeholder":["30.5","41.7"],"enter":["30.5"],"about":["30.6"],"p":["30.7","30.22","31.3","31.4","31.5","31.8","43.17","78.1"],"也是构建现代":["30.9"],"web":["30.9","75.2","75.5"],"props":["30.11","42.8"],"和三元表达式":["30.13"],"来控制组件的渲染逻辑":["30.13"],"please":["30.14"],"sign":["30.14","30.15"],"up":["30.14","30.15"],"提供了方便的方式来实现列表渲染":["30.16"],"id":["30.17"],"onchange":["30.19"],"mycomponent":["30.20"],"usecontext":["30.21"],"button":["30.21","30.22","31.3","33.15","34.5","34.6","35.5"],"style":["30.21","77.5","80.2","95.3","150.7"],"onclick":["30.22","33.15","34.5","34.6","35.5","141.7"],"生命周期对于优化性能":["31.0"],"处理副作用以及在开发过程中更好地掌握组件的行为至关重要":["31.0"],"快照":["31.1"],"componentdidupdate":["31.1"],"在组件更新之后调用":["31.1"],"使用组件并传递props":["31.4"],"reactdom":["31.4","32.10","32.11"],"处理数据":["31.6","31.11"],"使用getsnapshotbeforeupdate返回的快照进行处理":["31.10"],"if":["31.10","52.11","55.7","120.12","122.2","135.1"],"进行一些操作":["31.10"],"中初始化状态和绑定方法":["31.13"],"中进行副作用操作":["31.13"],"在组件更新阶段":["31.13"],"shouldcomponentupdate":["31.13"],"中判断是否需要重新渲染":["31.13"],"允许我们向组件传递信息":["32.0"],"使组件能够根据外部数据的变化进行渲染和展示不同的内容":["32.0"],"是从父组件向子组件传递数据的主要方式":["32.1"],"通过使用":["32.1","90.0"],"上设置了":["32.3"],"并通过父组件传递了对应的值":["32.3"],"如果没有传递":["32.4"],"使用解构赋值":["32.5"],"可以直接将":["32.5"],"的值类型进行相应的渲染":["32.6"],"这样的设计有助于保持组件之间的独立性和可预测性":["32.12"],"进行意外的修改":["32.13"],"对":["32.14"],"我们可以将数据从父组件传递到子组件":["32.15"],"实现组件之间的数据传递和通信":["32.15"],"是只读的":["32.15"],"组件无法修改接收到的":["32.15"],"这有助于确保组件的数据流向更加可预测和可维护":["32.15"],"同时":["32.15","127.5","127.7"],"我们可以使用":["32.15","36.6"],"之后的页面切换是在客户端通过":["33.1"],"控制的":["33.1"],"只更新页面的部分内容":["33.1"],"属性指定":["33.3"],"路径":["33.3"],"组件":["33.4","37.18"],"从而实现页面之间的嵌套导航":["33.4"],"的语法来定义路由参数":["33.5"],"参数值可以通过":["33.5"],"match":["33.5","33.14"],"to":["33.6"],"属性指定链接的目标":["33.6"],"方法将新的":["33.7"],"url":["33.7","33.11","63.5","118.8"],"添加到历史记录中":["33.7"],"add":["33.8","35.5","38.2"],"实现导航的基本步骤":["33.9"],"我们使用了":["33.11"],"组件来创建导航链接":["33.11"],"分别链接到":["33.11"],"页面":["33.11","43.2"],"然后使用":["33.11"],"指定":["33.11"],"路径和对应的页面组件":["33.11"],"我们新增了一个名为":["33.13"],"的页面组件":["33.13"],"并在":["33.13","33.14"],"组件中定义了一个嵌套路由":["33.13"],"当用户访问":["33.13"],"路径时":["33.13"],"组件会嵌套在":["33.13"],"组件中显示":["33.13"],"组件中定义了一个带有参数的路由":["33.14"],"表示这是一个路由参数":["33.14"],"params":["33.14","33.15"],"组件中获取传递的参数":["33.14"],"handlenavigate":["33.15"],"push":["33.15","54.10","69.3","69.4","69.6","70.4"],"h2":["33.15"],"profile":["33.15","38.6"],"go":["33.15","57.2"],"我们可以创建交互性和动态性的组件":["34.0"],"意味着数据流向是自上而下的":["34.1"],"通常":["34.1"],"是在组件的父组件中定义":["34.1"],"并通过":["34.1","35.4"],"并将其初始值设置为":["34.3"],"在组件的":["34.3"],"方法中":["34.3"],"我们定义了一个":["34.4"],"用于处理点击按钮时的事件":["34.4"],"在该方法中":["34.4"],"方法来更新":["34.4"],"increment":["34.5","34.6"],"我们在":["34.5"],"使用户界面能够随着用户操作或其他事件的发生而更新":["34.7"],"组件的一部分":["34.7"],"受到组件的生命周期和渲染过程的影响":["34.7"],"是单向数据流的一部分":["34.7"],"通常由父组件传递给子组件":["34.7"],"传递":["34.7"],"要正确地更新":["34.7"],"应始终使用":["34.7"],"方法":["34.7","52.12","72.4","95.5","118.12"],"并返回一个新的":["34.7"],"并将它们渲染到用户界面上":["35.0"],"我们可以轻松地生成多个元素":["35.1"],"并将它们动态地展示给用户":["35.1"],"并使用箭头函数生成一个新的":["35.2"],"我们为每个":["35.2"],"元素添加了":["35.2"],"用于帮助":["35.2"],"default":["35.3","35.4","35.5","41.31","110.11"],"我们使用条件语句判断数字的奇偶性":["35.3"],"并根据奇偶性为列表项设置不同的样式":["35.3"],"我们定义了一个名为":["35.4"],"的子组件":["35.4"],"数组传递给子组件":["35.4"],"并将它们渲染到用户界面上的技术":["35.6"],"我们可以使用数组的":["35.6"],"方法来实现列表渲染":["35.6"],"并根据条件来渲染不同样式的列表项":["35.6"],"通过将数据传递给子组件":["35.6"],"我们可以实现数据和渲染逻辑的分离":["35.6"],"使代码更加清晰和易于维护":["35.6"],"在使用列表渲染时":["35.6"],"我们应该遵循最佳实践":["35.6"],"从而实现动态和交互性的用户界面":["36.0"],"通过条件渲染":["36.1"],"我们可以根据不同的条件显示不同的组件":["36.1"],"或者在特定条件下渲染特定的内容":["36.1"],"我们通过":["36.2"],"状态来控制是否渲染欢迎消息":["36.2"],"如果用户已登录":["36.2"],"则渲染欢迎消息":["36.2"],"否则":["36.2","36.3","36.5"],"渲染提示信息":["36.2"],"为":["36.3","36.5","39.6"],"则返回":["36.3","36.4","36.5"],"返回":["36.3","36.4","36.5"],"的值":["36.5"],"的条件渲染是一种根据特定条件来决定是否渲染组件或组件的一部分的技术":["36.6"],"条件运算符等不同的方式来实现条件渲染":["36.6"],"使用npm安装vue":["37.3"],"message":["37.4"],"click":["37.7","140.2","141.7"],"handleclick":["37.7"],"hidden":["37.9"],"visible":["37.10"],"methods":["37.13"],"alert":["37.13","51.1","84.5"],"type":["37.14","77.9","110.8"],"i":["37.16","99.16"],"am":["37.16"],"alive":["37.18"],"在使用":["37.18","82.6","83.6"],"包裹的组件激活时调用":["37.18"],"deactivated":["37.18"],"停用":["37.18"],"确保您对":["38.1"],"使用yarn":["38.2"],"history":["38.3"],"userid":["38.6"],"child":["38.7"],"检查用户是否登录":["38.8"],"进行相关逻辑处理":["38.8"],"component":["38.9"],"lazyloadedcomponent":["38.10"],"vue":["38.10","41.1","41.9","41.21","41.22","110.2"],"页面等":["38.12"],"提供了一种可预测的方式来管理状态":["39.0"],"来改变状态":["39.1"],"modules":["39.1","42.11"],"模块":["39.1"],"当应用的状态较为复杂时":["39.1"],"可以使用":["39.1","39.3","49.1","127.5"],"将状态分割成多个子模块":["39.1"],"每个子模块有自己的":["39.1"],"支持插件":["39.2"],"可以方便地扩展和定制":["39.2"],"的状态":["39.3"],"中的":["39.3","39.5","65.1","129.0"],"通过计算属性获取状态":["39.3"],"count":["39.3"],"通过getters获取状态":["39.3"],"状态和两个":["39.4"],"在组件中":["39.4"],"我们通过调用":["39.4"],"会延迟":["39.5"],"秒钟":["39.5"],"然后通过":["39.5"],"mutation":["39.5","42.11"],"方法来修改":["39.5"],"状态":["39.5"],"返回所有的":["39.6"],"数组":["39.6"],"返回未完成的":["39.6"],"方法过滤出":["39.6"],"的":["39.6","71.5","101.5"],"项":["39.6"],"这是一个带参数的":["39.6"],"在组件中调用时需要传入一个":["39.6"],"virtual":["40.1"],"使用虚拟":["40.1"],"来管理视图的渲染和更新":["40.1"],"当数据变化时":["40.1"],"会比较前后两个虚拟":["40.1"],"允许开发者更灵活地组织组件逻辑":["40.2"],"以及更好地重用和组合代码":["40.2"],"的设计也与":["40.2"],"的响应式系统紧密相关":["40.2"],"使得组件的代码更易于理解和维护":["40.2"],"总之":["40.2"],"的响应式原理通过":["40.2"],"对象来实现数据的监听和依赖追踪":["40.2"],"甚至是自定义指令也可以在我们的":["41.0"],"中自动获得":["41.0"],"本篇内容基于":["41.0"],"template":["41.1","41.31","43.2"],"setup":["41.2","110.8"],"出去才可以被使用":["41.2"],"函数创建的响应式数据":["41.2"],"在模板中可以直接被使用":["41.2"],"const":["41.5","72.6","88.6","89.1","106.1"],"lisi":["41.6","102.6"],"app":["41.7","43.14","110.8","118.10","147.1","147.2","147.3","147.4"],"v":["41.7"],"model":["41.7","138.4"],"keyword":["41.7","124.3"],"be":["41.8"],"made":["41.8"],"test2":["41.10"],"state":["41.12"],"info":["41.15","110.10","123.0","124.3"],"deep":["41.16"],"是否立即调用一次":["41.16"],"旧的值":["41.17"],"immediate":["41.17"],"新的值":["41.18","41.19","41.20"],"从而可以收集需要监视的数据":["41.21"],"例如防抖":["41.22"],"所以即使组件销毁了":["41.23"],"监听器依然存在":["41.23"],"post":["41.24"],"组件更新后执行":["41.24"],"created":["41.25"],"这两个生命周期的":["41.25"],"unmounted":["41.27","41.28"],"指令被移除后调用":["41.27"],"卸载之前":["41.28"],"dir":["41.29"],"一个对象":["41.29"],"在注册指令时作为参数传递":["41.29"],"在以下指令中":["41.29"],"第三个":["41.29"],"当前元素的虚拟dom":["41.29"],"也就是vnode":["41.29"],"h3":["41.31"],"屏幕尺寸":["41.31"],"vc":["42.1"],"获取子组件的响应式数据以及方法":["42.1"],"slot":["42.1"],"插槽":["42.1"],"默认插槽":["42.1"],"子组件获取到":["42.2"],"change":["42.3"],"mouseenter":["42.3"],"mouseleave":["42.3"],"这类原生":["42.4"],"不管是在标签":["42.4"],"自定义标签上":["42.4"],"组件标签":["42.4"],"正常说组件标签书写":["42.5"],"应该为原生":["42.5"],"事件":["42.5","77.0"],"但是如果子组件内部通过":["42.5"],"实现":["42.6"],"官网地址":["42.6"],"https":["42.6"],"www":["42.6"],"实现父子数据同步":["42.7"],"方法获取组件属性与事件":["42.8"],"因此你也发现了":["42.8"],"它类似于":["42.8"],"可以接受父组件传递过来的属性与属性值":["42.8"],"需要注意如果":["42.8"],"因此可以使用父组件内部的数据与方法":["42.9"],"必须子组件内部拥有一个按钮点击时候获取父组件实例":["42.9"],"当然父组件的数据与方法需要通过":["42.9"],"方法对外暴露":["42.9"],"html":["42.9","51.7","80.0","118.8"],"后代组件可以通过":["42.10"],"方法获取数据":["42.10"],"父组件内部代码如下":["42.12"],"立即使用即可":["43.2"],"无需引入":["43.2"],"componenta":["43.5"],"菜单区域":["43.6"],"abcde":["43.8"],"插值表达式渲染的内容都是一样的":["43.10"],"父组件模板中的表达式只能访问父组件的作用域":["43.10"],"页面还没加载出来展示的页面":["43.13"],"children":["43.14"],"默认":["43.14","110.6"],"transition":["43.15"],"一起使用":["43.15","51.0"],"如果传递普通的值":["43.16"],"是不具有响应式的":["43.16"],"子组件":["43.17"],"version":["44.3","124.2"],"lint":["44.4"],"where":["44.4"],"do":["44.4"],"prefer":["44.4"],"placing":["44.4"],"eslint":["44.4"],"它使用":["44.5"],"rollup":["44.5"],"打包你的代码":["44.5"],"切换目录":["44.6"],"安装包":["44.6"],"运行项目":["44.6"],"次pr":["45.1"],"vue3支持vue2的大多数特性":["45.1"],"shaking":["45.2"],"suspense":["45.3"],"异步加载组件的loading界面":["45.3"],"其它api更新":["45.3"],"generic":["46.1"],"t":["46.1"],"ts":["46.2"],"写法":["46.2"],"vue3":["46.2"],"就可以随意定义":["46.3"],"数字":["48.0"],"布尔值等":["48.0"],"arr2":["48.1"],"空属性":["48.2"],"下面对数组常用的操作方法做一个归纳":["48.5"],"map":["48.27"],"index":["48.30","110.8","121.13"],"如果希望可以控制多行代码":["49.1"],"将语句扩起来":["49.1"],"最佳实践":["49.1"],"即使if后只有1行代码":["49.1"],"我们也应该编写代码块":["49.1"],"手机一台":["49.2"],"奖励一本参考书":["49.2"],"参考书一本":["49.2"],"其他时":["49.2"],"false":["49.3","53.12","98.2","104.3"],"则继续比较其他":["49.3"],"后的表达式":["49.3"],"直到找到":["49.3"],"为止":["49.3"],"如此重复":["49.5"],"知道条件表达式结果为":["49.5"],"的区别":["49.6"],"while语句是先判断再执行":["49.6"],"keys":["49.10"],"将对象转换为可迭代对象后再使用":["49.10"],"in":["49.10"],"循环的迭代顺序是确定的":["49.11"],"因为可迭代对象的值是按照一定顺序排列的":["49.11"],"迭代对象的原理不同":["49.11"],"就是封装了一段可被重复调用执行的代码块":["50.0"],"调用的方式":["50.2"],"函数调用必须写到函数体下面":["50.2"],"叫花鸡":["50.6"],"尽量让实参的个数和形参相匹配":["50.7"],"小结":["50.7"],"函数可以带参数也可以不带参数":["50.7"],"声明函数的时候":["50.7"],"函数名括号里面的是形参":["50.7"],"形参的默认值为":["50.7"],"返回的是一个数组":["50.8"],"我们的函数如果有return":["50.8"],"则返回的是":["50.8"],"如果函数么有":["50.8"],"则返回undefined":["50.8"],"fun1":["50.8"],"还能够返回":["50.9"],"语句中的值":["50.9"],"调用":["50.11"],"其实本质已经调用了":["50.12"],"多个立即执行函数之间用分号隔开":["50.12"],"用于创建动态网页和":["51.0"],"那么内部的":["51.4"],"代码没有作用":["51.4"],"键值":["52.2"],"成员的值":["52.2"],"键名与键值之间用冒号分隔":["52.2"],"第二个键值对是":["52.2"],"指向对象":["52.3"],"就可以链式引用":["52.3"],"对象的属性之间用逗号分隔":["52.3"],"最后一个属性后面可以加逗号":["52.3"],"trailing":["52.3"],"comma":["52.3"],"也可以不加":["52.3"],"m":["52.3"],"上面的代码中":["52.3","52.4"],"属性后面的那个逗号":["52.3"],"y":["52.4","62.1","125.2","143.1","145.1"],"当":["52.4"],"中反映得最明显":["52.5"],"加不加引号都可以":["52.7"],"因为会被自动转为字符串":["52.7"],"数值键名不能使用点运算符":["52.7"],"因为会被当成小数点":["52.7"],"只能使用方括号运算符":["52.7"],"命令只能删除对象本身的属性":["52.10"],"无法删除继承的属性":["52.10"],"关于继承参见":["52.10"],"面向对象编程":["52.10"],"章节":["52.10"],"tostring":["52.10","120.10"],"native":["52.10"],"code":["52.10"],"是否为对象自身的属性":["52.11"],"一般情况下":["52.12"],"都是只想遍历对象自身的属性":["52.12"],"所以使用":["52.12"],"的时候":["52.12"],"应该结合使用":["52.12"],"hasownproperty":["52.12"],"在循环内部判断一下":["52.12"],"某个属性是否为对象自身的属性":["52.12"],"person":["52.12"],"根本无法判断":["52.13"],"到底是全局变量":["52.13"],"还是对象":["52.13"],"的一个属性":["52.13"],"这非常不利于代码的除错和模块化":["52.13"],"编译器也无法对这段代码进行优化":["52.13"],"只能留到运行时判断":["52.13"],"这就拖慢了运行速度":["52.13"],"建议不要使用":["52.13"],"可以考虑用一个临时变量代替":["52.13"],"obj1":["52.13"],"逻辑运算符":["53.1"],"赋值运算符":["53.1"],"30000000000000004":["53.2"],"模等于":["53.3"],"result":["53.5","97.4"],"aaa":["53.7"],"abc":["53.7","88.3","88.4","88.6","88.10"],"全等":["53.7"],"要求值和数据类型都一致":["53.7"],"则返回第二个值":["53.9"],"则返回第二个":["53.10"],"symbol":["54.1","67.5"],"不是数值":["54.2"],"用于表示本来要返回数值的操作失败了":["54.2"],"而不是抛出错误":["54.2"],"java":["54.4"],"只要变量要保存对象":["54.5"],"任意对象":["54.6"],"函数声明和函数表达式两种方式":["54.11"],"利用":["54.14"],"拼接字符串的方法实现转换效果":["54.14"],"隐式转换":["54.14"],"直到读取到字符串中所有的有效的小数":["54.15"],"123px":["54.15"],"a123":["54.15"],"下面来举个例子":["54.17"],"的值赋给":["54.18"],"实际上他们共同指向了同一个堆内存对象":["54.19"],"所以更改":["54.19"],"会对":["54.19"],"复杂类型赋值":["54.20"],"是将保存对象的内存地址赋值给另一个变量":["54.20"],"反复多次使用":["55.1"],"声明同一个变量也没有问题":["55.1"],"两个关键字不能重复声明":["55.2"],"没有定义":["55.3"],"let":["55.3","63.8","133.6"],"不过":["55.4"],"声明还是在全局作用域中发生的":["55.4"],"变量会在整个页面生命周期内续存":["55.4"],"typeof":["55.5"],"操作符也不能解决":["55.5"],"会输出0":["55.6"],"setattribute":["56.1","56.2","138.3"],"修改元素的属性":["56.2"],"的页面":["57.1"],"版本":["58.0"],"用户代理字符串等":["58.0"],"它还可以用于检测浏览器的功能和特性":["58.0","60.0"],"screen":["58.0","145.1"],"它提供了关于用户屏幕的信息":["58.0"],"如屏幕的尺寸":["58.0"],"分辨率等":["58.0"],"可以使用它来调整页面在不同屏幕上的显示":["58.0","61.0"],"主机名":["59.0"],"路径和查询参数等":["59.0"],"加载一个新的":["59.1"],"com":["59.2","125.1"],"重新加载当前页面":["59.2"],"platform":["60.1"],"运行浏览器的操作系统平台":["60.1"],"pixeldepth":["61.1"],"获取屏幕的颜色深度":["61.2"],"屏幕颜色深度":["61.2"],"以及与窗口内容交互的功能":["62.0"],"将窗口移动到指定的位置":["62.1"],"将窗口移动到屏幕左上角":["62.2"],"moveto":["62.2"],"然后用":["63.1"],"来操作":["63.1"],"对象提供的":["63.2"],"onreadystatechange":["63.2"],"事件监听服务器端你的通信状态":["63.2"],"接受并处理服务端向客户端响应的数据结果":["63.2"],"xhr":["63.3"],"可选的用户名用于认证用途":["63.4"],"方法中的":["63.5"],"地址中":["63.5"],"发送请求数据中的":["63.5"],"服务端返回的结果":["63.6"],"status":["63.8","63.9"],"success":["63.8","101.5","122.11"],"请求失败后的回调函数":["63.9"],"示例":["64.1"],"使得这些变量在内部函数执行时仍然可用":["65.0"],"以下是闭包的一些关键概念和用法":["65.0"],"可以访问外部函数":["65.1"],"函数作用域内的":["65.2"],"变量":["65.2"],"每次调用":["65.2"],"函数返回了一个包含":["65.3"],"可以延迟执行函数":["65.4"],"在某些场景中":["65.4"],"可以将函数包裹在闭包中":["65.4"],"并在需要时再调用执行":["65.4"],"以实现延迟执行的效果":["65.4"],"封装代码和状态":["65.5"],"并提供模块化的解决方案":["65.5"],"在编写复杂的":["65.5"],"并将原始对象":["66.1"],"的属性复制到新对象中":["66.1"],"但是":["66.1"],"此方法使用递归函数":["66.2"],"来复制对象的所有属性":["66.2"],"递归函数首先检查属性是否是基本类型或":["66.2"],"如果是":["66.2"],"则直接返回该属性":["66.2"],"如果是引用类型":["66.2"],"则创建一个新的对象或数组":["66.2"],"并递归复制嵌套的属性":["66.2"],"并返回":["67.1"],"的结果":["67.1"],"通过调用":["67.1"],"我们获得一个新函数":["67.1"],"它将传递的参数与":["67.1"],"可以简化函数柯里化的实现":["67.2"],"这些库提供了一些函数来帮助创建和组合柯里化函数":["67.2"],"简化开发过程":["67.2"],"函数首先检查传入的参数个数是否达到了原始函数的要求":["67.4"],"如果达到了":["67.4","67.6"],"则直接调用原始函数":["67.4","67.6"],"这种方法与前面的闭包递归方式类似":["67.5"],"但引入了一个占位符的概念":["67.5"],"函数检查传入的参数个数是否达到了原始函数的要求":["67.6"],"否则返回一个新的箭头函数":["67.6"],"对此我们就可以采用":["68.0"],"throttle":["68.0"],"防抖":["68.0"],"keydown":["68.1","68.4"],"和延迟时间":["68.2"],"返回一个新的函数":["68.2"],"该函数在延迟时间内只能执行一次":["68.2"],"当函数被调用时":["68.2"],"arguments":["68.3"],"cleartimeout":["68.3"],"表单事件":["68.4"],"settimeout":["68.5"],"apply":["68.5","68.6"],"debouncehandlescroll":["68.7"],"将函数绑定到事件上":["68.7"],"indexof":["69.5"],"res4":["70.3"],"通过链式调用的方式":["71.0"],"使得异步操作的处理更加优雅和可读":["71.0"],"callback":["71.0"],"hell":["71.0"],"并将成功的结果":["71.1"],"传递给它":["71.1"],"当异步操作失败时":["71.1"],"方法中传递的函数会在异步操作失败时被调用":["71.2"],"成功的结果":["71.3"],"并返回另一个":["71.3"],"还有许多其他方法和特性":["71.4"],"例如":["71.4","118.8","118.11","124.4"],"race":["71.4"],"resolve":["71.4"],"当请求发生错误时":["71.5"],"函数调用":["71.5"],"将网络错误信息传递给":["71.5"],"使用封装的":["71.5"],"方法处理请求成功的响应":["71.5"],"chain":["72.1"],"访问其他对象的属性和方法":["72.1"],"原型链是一个对象关联到其他对象的链条":["72.1"],"并调用":["72.2"],"方法时":["72.2"],"会首先查找":["72.2"],"对象本身是否有":["72.2"],"对象的原型对象是":["72.3"],"它是所有":["72.3"],"构造函数有一个":["72.4"],"而":["72.4"],"构造函数继承了":["72.4"],"构造函数":["72.4"],"并在其原型上创建了一个新对象":["72.4"],"该对象的原型是":["72.4"],"buddy":["72.6","72.7","72.8","89.1"],"golden":["72.6","72.8"],"retriever":["72.6","72.8"],"以避免不必要的复杂性":["72.11"],"这种不同的方式可以导致不同的编程风格和理念":["72.13"],"而不是修改原型":["72.15"],"特别是当有大量对象实例时":["72.16"],"以避免不必要的覆盖":["72.17"],"并指定其原型":["72.18"],"它可以帮助你更清晰地定义对象之间的继承关系":["72.18"],"我们可以对数组中的每个元素进行自定义的累积运算":["73.0"],"最终得到一个累积结果":["73.0"],"是初始值":["73.1"],"在上面的示例中":["73.3"],"务必确保回调函数的正确性和无副作用":["73.9"],"以免产生意外的结果":["73.9"],"是一个全局变量":["74.1"],"在任何地方都可以访问":["74.1"],"是":["74.2"],"函数的局部变量":["74.2"],"在该函数内部和其嵌套函数中可访问":["74.2"],"内部可以访问它的父级作用域中的变量":["74.3"],"的词法作用域规则决定了函数在定义时就创建了自己的作用域":["74.4"],"作用域是":["74.4"],"中重要的概念之一":["74.4"],"了解作用域的工作原理和规则对于正确编写和组织":["74.4"],"在任意节点前插入":["75.1"],"ul":["75.1"],"li":["75.1"],"树的结构是层次化的":["76.1"],"由多个节点组成":["76.1"],"每个节点都有其特定的属性和方法":["76.1"],"可以用于获取或修改节点的信息":["76.1"],"添加":["76.1"],"如下图所示":["76.2"],"文档以树状结构直观的表现出来":["76.2"],"标签的文字内容":["76.3"],"title":["76.3"],"标签中的文字":["76.3"],"处理用户输入和交互等操作":["76.4"],"成为了":["76.4"],"鼠标拖拽":["77.1"],"网页中的一张图片":["77.1"],"event":["77.2"],"事件处理程序的逻辑代码":["77.2"],"也可以使用箭头函数来定义事件处理程序":["77.2"],"eventhandler":["77.3"],"innertext":["77.5"],"鼠标移入了":["77.5"],"修改光标的风格":["77.5"],"cursor":["77.5"],"move":["77.5"],"监听鼠标是移出当前":["77.5"],"事件只在按下字符键时才触发":["77.8"],"不会在按下非字符键":["77.8"],"事件类型":["77.9"],"preventdefault":["77.9"],"阻止事件的默认行为":["77.9"],"resize":["77.11"],"scroll":["77.11"],"触摸事件":["77.11"],"touchstart":["77.11"],"选项2":["77.12"],"选项3":["77.12"],"getattribute":["78.0"],"获取元素的属性值":["78.0"],"innerhtml":["78.2"],"childelement":["78.3"],"以下是一些常用的方法和技巧":["79.0"],"propertyvalue":["79.1"],"getpropertyvalue":["79.1"],"propertyname":["79.1"],"以满足具体的交互需求":["79.2"],"需要注意的是":["79.2"],"类名的操作只会修改元素的类列表":["79.2"],"而不会直接修改元素的":["79.2"],"class":["79.2","91.2"],"如果需要直接修改":["79.2"],"内容":["80.0"],"textcontent":["80.0","95.3","135.2"],"queryselector":["80.1"],"选择器":["80.1"],"attributename":["80.2"],"attributevalue":["80.2"],"修改元素的样式":["80.2"],"以下是":["81.0","82.0","83.0"],"使用等号分隔":["81.1"],"通过设置":["81.1"],"可以指定":["81.1"],"的过期时间":["81.1"],"返回一个字符串":["81.2"],"包含当前域名下的所有":["81.2"],"我们将":["81.3"],"的过期时间设置为过去的时间":["81.3"],"以免遭受安全风险":["81.4"],"是一种在客户端浏览器上存储数据的常用机制":["81.4"],"适用于在用户计算机中存储有关网站的信息":["81.4"],"它提供了简单的设置":["81.4"],"获取和删除操作":["81.4"],"可用于实现用户身份验证":["81.4"],"数据是相互隔离的":["82.6","83.6"],"时":["82.6","83.6","93.2"],"需要注意浏览器对于隐私和安全方面的限制":["82.6","83.6"],"例如隐私模式下的":["82.6","83.6"],"访问可能被限制":["82.6","83.6"],"second":["84.1"],"设置日期的秒数为指定的值":["84.1"],"settime":["84.1"],"time":["84.1"],"设置日期为指定的时间戳":["84.1"],"todatestring":["84.1"],"将日期对象转换为可读的字符串":["84.1"],"只返回日期部分":["84.1"],"toisostring":["84.1"],"将日期对象转换为":["84.1"],"iso":["84.1"],"格式的字符串":["84.1"],"tojson":["84.1"],"返回日期对象的":["84.1"],"year":["84.2"],"monthindex":["84.2"],"day":["84.2"],"hours":["84.2"],"还有一种获取时间戳的方法":["84.4"],"今天是2100年1月14日之前":["84.5"],"开发者可以利用这些内置对象来编写更高效":["85.0"],"功能更强大的":["85.0"],"异常对象":["85.1"],"函数构造器":["85.1"],"属性的设置和获取等":["85.2"],"它是构建其他对象的基石":["85.2"],"的灵活性使得它在处理列表和集合数据时非常便利":["85.3"],"进行字符串操作和处理":["85.4"],"还可以用于日期和时间处理":["85.5"],"用于控制流程和决策":["85.6"],"如计算时间差":["85.7"],"添加或减去日期等":["85.7"],"可以用于复杂的数值计算和处理":["85.8"],"set":["85.9","147.2","147.3","147.4","147.5"],"它们提供了更特定的功能和方法":["85.9"],"的所有方法和属性都是静态的":["86.0"],"不包含":["86.4"],"表示非数值":["87.1"],"regular":["88.1"],"expression":["88.1"],"提供了强大的工具":["88.1"],"正则表达式是一种描述字符串模式的表达式":["88.1"],"它可以用来检查":["88.1"],"pattern":["88.3","88.6","88.10"],"标记子表达式的开始和结束位置":["88.5"],"并捕获匹配的子字符串":["88.5"],"hi":["88.8"],"正则表达式":["88.9"],"gi":["88.10"],"pattern2":["88.10"],"正则表达式是":["88.11"],"中强大的工具之一":["88.11"],"它提供了灵活和高效的字符串处理能力":["88.11"],"woof":["89.1"],"mydog":["89.1"],"labrador":["89.1"],"在构造函数内部":["90.0"],"使用类的好处是它更加直观":["90.2"],"能够更清晰地表达对象的结构和行为":["90.2"],"此外":["90.2","127.6"],"方法在原型上定义":["90.2"],"因此它们在实例之间共享":["90.2"],"不会造成内存浪费":["90.2"],"它们通过相互之间的交互来完成特定的任务":["91.1"],"之后":["91.2"],"引入了":["91.2"],"关键字":["91.2"],"使得定义类和创建对象更加简洁和直观":["91.2"],"sayhi":["92.2"],"调用对象的方法":["92.3"],"大白":["92.4"],"男":["92.4"],"smallbai":["92.4"],"小白":["92.4"],"返回一个给定对象自身可枚举属性的名称数组":["92.5"],"seal":["92.5"],"封闭一个对象":["92.5"],"防止添加新属性和删除现有属性":["92.5"],"values":["92.5"],"writable":["92.11"],"enumerable":["92.11"],"其原型指向":["93.2"],"当我们调用":["93.2"],"由于":["93.2"],"原型上的属性和方法是动态的":["93.3"],"可以在运行时进行修改和添加":["93.3"],"它们使得":["93.4"],"具有强大的面向对象特性":["93.4"],"在严格模式下被视为无效的":["94.0"],"禁止对只读属性赋值":["94.0"],"禁止使用":["94.0"],"with":["94.0"],"语句":["94.0"],"当函数执行完毕":["95.1"],"它所产生的执行期上下文会被销毁":["95.1"],"上下文对象":["95.2"],"在这里":["95.3"],"this指向绑定事件的按钮元素":["95.3"],"也就是button对象":["95.3"],"clicked":["95.3"],"修改按钮文本内容为":["95.3"],"backgroundcolor":["95.3"],"green":["95.3","131.4"],"将按钮背景颜色设置为绿色":["95.3"],"输出调用foo":["95.4"],"bind":["95.5"],"第一个参数中":["95.7"],"如果不需要改变":["95.7"],"自动拥有":["95.8"],"里的属性":["95.8"],"最终实现继承":["95.8"],"son1":["95.8"],"张三":["95.8"],"json":["95.8","98.3","113.5","117.4","118.8"],"stringify":["95.8"],"到这里可以看出":["95.10"],"方法的作用是相同的":["95.10"],"唯一的区别在于":["95.10"],"然后执行":["95.11"],"中元素的最大值":["95.12"],"minvalue":["95.12"],"其他参数":["95.14"],"函数的实参":["95.14"],"解释":["95.14"],"它不会调用":["95.14"],"但会返回":["95.14"],"res":["97.3","102.11"],"对响应数据做点什么":["97.4"],"在设置请求时发生了一些事情":["97.5"],"触发了一个错误":["97.5"],"可以简化服务器返回的数据":["98.1"],"处理":["98.1"],"http":["98.1"],"请求超时设置":["98.2"],"withcredentials":["98.2"],"默认类型":["98.3"],"服务不可用":["98.4"],"服务暂时无法访问":["98.4"],"请稍后再试":["98.4"],"一次封装终身受益":["98.7"],"美团后端连连点赞":["98.7"],"查看全局配置":["99.1"],"list":["99.1","100.3"],"file1":["99.5"],"记录":["99.8"],"filename":["99.8"],"查看指定文件每一行修改对应的":["99.8"],"checkout":["99.10"],"到":["99.14","113.4"],"工作区和暂存区所有文件恢复成和":["99.15"],"hard":["99.15"],"rebase":["99.16"],"修改别名":["99.18"],"远程仓库分支名":["99.19"],"分支名":["99.20"],"delete":["99.21","112.2","118.12","122.3"],"强制推送":["99.21"],"downloads":["100.1"],"bash命令窗口":["100.2"],"文件":["100.4","110.8","118.8"],"这个文件一般在c盘的":["100.4"],"20230222161109182":["100.5"],"ddd":["101.1"],"binary":["101.2"],"0b1010":["101.2"],"二进制":["101.2"],"这样会报错":["101.3"],"应为事实上":["101.3"],"数字是没有length":["101.5"],"元组类型还可以支持自定义名称和变为可选的":["101.5"],"异构枚举":["101.6"],"可以同时包含数字和字符串":["101.6"],"那么":["101.8"],"会报错":["101.8"],"或者这样的":["101.9"],"es5都可以做到":["102.0"],"新的class写法只是让对象原型的写法更加清晰":["102.0"],"如果不写默认就是public":["102.4"],"ls":["102.6"],"super":["102.9"],"d":["102.10","121.21","121.22"],"zs":["102.11","106.2"],"无法创建抽象类的实例":["102.11"],"res1":["102.11"],"string":["103.4","110.8"],"args":["103.4"],"void":["103.5"],"params2":["103.5"],"默认t为boolean类型":["104.3"],"length":["104.4"],"而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程":["105.1"],"其次":["105.2"],"浏览器是不识别ts的":["105.2"],"所以在编译的时候":["105.2"],"可以直接转换":["105.3"],"有类型支持":["105.3"],"typescript":["105.5"],"但是便于后期的维护":["105.6"],"严格模式":["105.7"],"在tsconfig":["105.7"],"json中":["105.7"],"strict":["105.7"],"直接进行ts":["105.10"],"的抽象":["106.0"],"描述":["106.0"],"一样":["107.1"],"也是表示原始类型和非原始类型的集合":["107.1"],"a1":["107.1"],"a2":["107.1"],"a3":["107.1"],"baseurl":["108.0"],"用于解析非相对模块名称的基目录":["108.0"],"paths":["108.0"],"模块名到基于":["108.0"],"的路径映射的列表":["108.0"],"rootdirs":["108.0"],"根文件夹列表":["108.0"],"其组合内容表示项目运行时的结构内容":["108.0"],"typeroots":["108.0"],"包含类型声明的文件列表":["108.0"],"types":["108.0"],"需要包含的类型声明文件名列表":["108.0"],"allowsyntheticdefaultimports":["108.0"],"允许从没有设置默认导出的模块中默认导入":["108.0"],"source":["108.0"],"options":["108.0"],"sourceroot":["108.0"],"指定调试器应该找到":["108.0"],"文件而不是源文件的位置":["108.0"],"maproot":["108.0"],"指定调试器应该找到映射文件而不是生成文件的位置":["108.0"],"inlinesourcemap":["108.0"],"n2":["109.1"],"any类型":["109.1"],"定义值的别名":["109.2"],"boolean":["109.2"],"router":["110.2","111.0"],"pinia":["110.2"],"element":["110.2"],"plus":["110.2"],"create":["110.4"],"进入到项目根目录":["110.4"],"install":["110.4"],"指定解析器选项":["110.6"],"parseroptions":["110.6"],"ecmaversion":["110.6"],"latest":["110.6"],"校验ecma最新版本":["110.6"],"sourcetype":["110.6"],"设置为":["110.6"],"script":["110.6"],"或者":["110.6"],"uses":["110.8"],"防止":["110.8"],"src":["110.8","138.3"],"文件夹目录下创建一个":["110.8"],"用于注册":["110.8"],"components":["110.8"],"文件夹内部全部全局组件":["110.8"],"import":["110.8"],"svgicon":["110.8"],"from":["110.8"],"preprocessoroptions":["110.9"],"javascriptenabled":["110.9"],"additionaldata":["110.9"],"获取用户信息":["110.10"],"get":["110.10","110.12"],"request":["110.10"],"获取请求头携带token":["110.10"],"headers":["110.10"],"查看用户信息是否包含有次token用户":["110.10"],"无权访问":["110.11"],"请求地址错误":["110.11"],"服务器出现问题":["110.11"],"requserinfo":["110.12"],"退出登录":["110.12"],"要加上这段代码":["111.0"],"rewrite":["111.0"],"start":["111.1"],"命令":["112.0"],"删除一个表":["112.1"],"tables":["112.1"],"列出数据库中的所有表":["112.1"],"describe":["112.1"],"更新表中的数据":["112.2"],"更改用户的密码":["112.3"],"drop":["112.3"],"删除一个用户":["112.3"],"show":["112.3","135.1"],"中常用的数据类型":["113.0"],"utc":["113.4"],"类型等":["113.5"],"在设计表时":["113.5"],"数据库允许多个用户同时访问和共享数据":["114.0"],"同时提供了对数据的安全访问控制":["114.0"],"数据一致性和完整性":["114.0"],"数据库通过实施数据完整性约束和事务支持来保证数据的一致性和完整性":["114.0"],"教程和支持资源":["114.1"],"mysql提供了多种访问方式":["114.1"],"包括命令行客户端":["114.1"],"图形化客户端工具":["114.1","116.1"],"如mysql":["114.1"],"的基本使用步骤":["116.0"],"打开图形化客户端工具":["116.1"],"替换为您要使用的数据库的名称":["116.3"],"替换为您希望创建的表的名称":["116.4"],"等替换为表的列名":["116.5"],"替换为要检索数据的表的名称":["116.6"],"等替换为要更新的列名和相应的值":["116.7"],"替换为要删除数据的表的名称":["116.8"],"spa":["117.2"],"单页应用程序":["117.2"],"常见的":["117.2"],"要爬取的内容":["117.3"],"将数据写入文件中":["117.4"],"writefile":["117.4","120.3"],"files":["117.4","120.9"],"p1505392928":["117.6"],"大话西游之大圣娶亲":["117.6"],"西遊記大結局之仙履奇緣":["117.6"],"p2455050536":["117.6"],"熔炉":["117.6"],"도가니":["117.6"],"p1363250216":["117.6"],"教父":["117.6"],"godfather":["117.6"],"是用于快速创建服务器的第三方模块":["118.0"],"参数":["118.2"],"默认是一个空对象":["118.2"],"listen":["118.2","118.4","118.6","118.7","120.16","120.17"],"login":["118.3"],"通过带有":["118.3"],"前缀的地址访问":["118.3"],"目录下的文件":["118.3"],"添加访问前缀":["118.4"],"use":["118.4","118.10"],"api":["118.4","119.1","141.1"],"函数后别写代码":["118.5"],"多个中间件共享":["118.5"],"page":["118.6"],"快速托管静态资源的内置中间件":["118.8"],"图片":["118.8"],"样式等":["118.8"],"无兼容性":["118.8"],"解析":["118.8","122.14"],"格式的请求体数据":["118.8"],"有兼容性":["118.8"],"仅在":["118.8"],"版本中可用":["118.8"],"urlencoded":["118.8","118.14"],"的浏览器":["118.11"],"才能正常访问开启了":["118.11"],"的服务端接口":["118.11"],"put":["118.12"],"等方式请求服务器的资源":["118.12"],"alow":["118.12"],"来指明实际请求所允许使用的":["118.12"],"form":["118.14"],"multipart":["118.14"],"请求称为":["118.15"],"restify":["119.1"],"但不会处理具体的任务":["119.2"],"的背后还有一个线程池":["119.2"],"线程池会处理长时间运行的任务":["119.2"],"比如":["119.2"],"每秒的请求数维持在一个较低的水平":["119.3"],"追加":["120.1"],"ax":["120.1"],"存在失败":["120.1"],"将data写入到文件中":["120.3"],"lilichao":["120.4"],"desktop":["120.4"],"写入的内容":["120.6"],"w":["120.6"],"allounsafe":["120.8"],"可能包含敏感数据":["120.8"],"分配内存时不会清除内存残留的数据":["120.8"],"txt":["120.9"],"utf8":["120.9"],"创建一个10个字节的buffer":["120.10"],"buf2":["120.10"],"alloc":["120.10"],"通过索引":["120.10"],"来操作buf中的元素":["120.10"],"用来满足用户对路径的处理需求":["120.11"],"err":["120.12","122.2"],"datastr":["120.12"],"namewithoutext":["120.13"],"服务器的模块":["120.15"],"向客户端响应内容":["120.16"],"charset":["120.17"],"utf":["120.17"],"与外部其它模块通信":["121.2"],"模块化规范是对代码进行模块化拆分和组合时需要遵守的规则":["121.2"],"防止全局变量污染":["121.6"],"指向同一个对象":["121.7"],"最终共享的结果":["121.7"],"以":["121.7"],"将会试图加载目录下的":["121.13"],"提供了更高级":["121.15"],"更方便的":["121.15"],"极大提高了开发效率":["121.15"],"下载安装速度是比":["121.16"],"xxxx":["121.18"],"license":["121.18"],"isc":["121.18"],"开源协议":["121.18"],"发布":["121.18"],"publish":["121.18"],"从而提高模块的加载效率":["121.19"],"会在终端打印错误消息":["121.23"],"报告模块的缺失":["121.23"],"results":["122.2"],"删除数据":["122.3"],"语句会真正删除数据":["122.3"],"保险起见":["122.3"],"seo":["122.5"],"服务器响应的是完整的":["122.5"],"页面内容":["122.5"],"有利于爬虫爬取信息":["122.5"],"缺点":["122.5"],"占用服务器资源":["122.5"],"等框架的":["122.6"],"ssr":["122.6"],"server":["122.6"],"side":["122.6"],"为同时兼顾首页渲染速度和前后端分离开发效率":["122.7"],"可采用首屏服务器端渲染":["122.7"],"清空":["122.11"],"是目前最流行的跨域认证解决方案":["122.12"],"存储在":["122.13"],"localstorage":["122.13"],"sessionstorage":["122.13"],"此后客户端与服务端通信需要携带":["122.13"],"进行身份认证":["122.13"],"存在":["122.13"],"获取信息成功":["122.14"],"data":["122.14"],"捕获解析":["122.14"],"失败后产生的错误":["122.14"],"当使用":["122.14"],"如果客户端发送过来的":["122.14"],"字符串过期或不合法":["122.14"],"会产生一个解析失败的错误":["122.14"],"影响项目的正常运行":["122.14"],"的错误中间件":["122.14"],"捕获这个错误并进行相关的处理":["122.14"],"显示依赖项树":["123.0"],"tree":["123.0"],"查看包信息":["123.0"],"搜索包":["123.0","124.3"],"包":["124.1"],"它提供了一个庞大的软件生态系统":["124.1"],"使开发者能够快速构建复杂的应用程序":["124.1"],"如果输出显示了":["124.2"],"使其可供他人使用":["124.3"],"search":["124.3"],"并添加或修改相关配置":["124.4"],"将会根据":["124.5"],"请确保遵循":["124.6"],"的发布准则和最佳实践":["124.6"],"npmjs":["125.1"],"实现你的功能逻辑":["125.3"],"这是你的包的说明文档":["125.4"],"提供关于包的介绍":["125.4"],"确保发布成功后":["125.5"],"你可以在":["125.5"],"执行以下命令发布新版本的包":["125.6"],"shell":["125.6"],"npm":["125.6","154.1"],"替换为你的包的名称":["125.7"],"g":["126.1"],"以上任一方法都将安装":["126.1"],"这将检查所有依赖项":["126.2"],"并将它们更新到最新可用版本":["126.2"],"运行脚本命令":["126.2"],"如果在":["126.2"],"文件的":["126.2"],"scripts":["126.2"],"部分定义了一些自定义脚本命令":["126.2"],"你可以使用以下命令运行它们":["126.2"],"文本":["127.1"],"图像等多种元素":["127.1"],"坐标值":["127.3"],"可以在":["127.3"],"渲染上下文":["127.4"],"它提供了许多":["127.4"],"来绘制图形":["127.4"],"还可以与其他":["127.6"],"greensock":["127.7"],"等库或框架":["127.7"],"来进行高级别的动画控制":["127.7"],"在处理大量的图像和其他复杂的数据时":["127.8"],"settransform":["128.0"],"方法之前调用":["128.1"],"否则是不起作用的":["128.1"],"旋转中心点始终是画布左上角的原点":["128.1"],"如果要更改中心点":["128.1"],"font":["128.2"],"16px":["128.2"],"serif":["128.2"],"filltext":["128.2"],"red":["128.3"],"的矩形":["128.4"],"结果缩放成":["128.4"],"并且左上角从":["128.4"],"方法取消了这个变换":["128.5"],"已绘制的图形不受影响":["128.5"],"将画布恢复到默认状态":["128.5"],"变换矩形":["128.5"],"globalcompositeoperation":["129.0","129.1"],"操作":["129.0"],"绘制图形":["130.1"],"新建一条路径":["130.2"],"生成之后":["130.2"],"图形绘制命令被指向到路径上生成路径":["130.2"],"生成路径的第一步":["130.2"],"叫做":["130.2"],"是辐射终止的圆的圆心坐标":["131.2"],"是终止圆的半径":["131.2"],"该方法的返回值也是一个":["131.2"],"fillstyle":["131.3","131.4"],"fillrect":["131.3"],"fill":["133.2"],"填充颜色":["133.2"],"清除模式":["133.2"],"lineto":["133.3"],"提示":["133.3"],"有":["133.3"],"个参数":["133.3"],"前两个参数是第一个点的坐标":["133.3"],"第三个参数和第四个参数是第二个点的坐标":["133.3"],"第三种绘制图片的方式":["133.5"],"裁剪图片":["133.5"],"img参数后面四个参数分别为原图片上面要裁剪的起点位置和终点位置":["133.5"],"最后四个参数分别为画布的位置和要渲染的矩形宽高":["133.5"],"rtl":["133.6"],"预测量文本宽度":["133.6"],"一等奖":["135.2"],"绘制时针":["136.3"],"urldata":["138.3"],"todataurl":["138.3"],"img":["138.3","154.4"],"image":["138.3"],"body":["138.3","146.1"],"appendchild":["138.3","146.1"],"downloada":["138.3"],"createelement":["138.3"],"download":["138.3"],"签名":["138.3"],"linewidth":["138.4"],"canvas":["138.4"],"pointerleave":["140.1"],"on":["140.2","141.7"],"和强大的渲染能力":["141.1"],"的设备上也能正常运行":["141.3"],"方便开发者查阅和学习":["141.4"],"事件处理等":["141.5"],"开发者可以通过组合这些功能来创建复杂的交互式图形界面和游戏":["141.5"],"使开发者能够创建适应不同屏幕大小和分辨率的应用":["141.6"],"点击事件处理函数":["141.7"],"将精灵添加到场景":["141.7"],"stage":["141.7","147.1"],"addchild":["141.7","149.1","149.2"],"相对于左上角":["142.2"],"rotation":["142.2","149.2"],"旋转":["142.2"],"pivot":["142.2"],"设置文字锚点":["143.1"],"anchor":["143.1"],"endfill":["143.2"],"mask":["143.2"],"使用图形作为精灵的遮罩":["143.2"],"设置精灵的锚点":["145.1"],"pointerout":["145.2"],"0xff0000":["145.3"],"quality":["145.3"],"将轮廓滤镜添加到精灵上":["145.3"],"将应用画布添加到dom中":["146.1"],"设置透明度":["146.3","149.1","149.2"],"alpha":["146.3","149.1","149.2"],"01":["146.4"],"position":["147.3","147.4","147.5"],"对多个资源分组":["149.0"],"设置容器属性即可应用到容器内的精灵":["149.0"],"math":["149.1","149.2"],"pi":["149.1","149.2"],"设置缩放":["149.1","149.2"],"scale":["149.1","149.2"],"将精灵添加到舞台":["149.1","149.2"],"创建精灵2":["149.1"],"旋转45度":["149.2"],"设置宽高时":["150.1"],"它的默认宽度是":["150.1"],"300px":["150.1"],"默认高度是":["150.1"],"stroke":["150.3","150.7","150.8"],"000000":["150.3"],"pink":["150.4"],"none":["150.5","150.7"],"cyan":["150.8"],"光滑材质":["151.0"],"meshphongmaterial":["151.0"],"和标准材质":["151.0"],"meshstandardmaterial":["151.0"],"光源":["151.0"],"light":["151.0"],"光源用于照亮场景中的":["151.0"],"物体":["151.0"],"支持不同类型的光源":["151.0"],"如环境光":["151.0"],"ambientlight":["151.0"],"点光源":["151.0"],"pointlight":["151.0"],"平行光":["151.0"],"directionallight":["151.0"],"完整代码":["152.3"],"domelement":["152.7"],"requestanimationframe":["152.8"],"line":["152.9","152.12","153.5"],"numbers":["152.9","152.12","153.5"],"中文网":["154.0"],"yarn":["154.1"],"打开终端":["154.2"],"点击":["154.2"],"符号右边的下三角":["154.2"],"输入以下命令":["154.2"],"mkdir":["154.2"],"run":["154.3"],"dev":["154.3"],"build":["154.4"],"md":["154.6"],"about2":["154.6"],"️":["154.7"],"link是连接的位置":["154.9"],"其他":["154.9"],"这种是没有下拉菜单的版本":["154.9"],"vitepress":["154.9"],"的根目录是从":["154.9"],"开始算的":["154.9"],"关于2":["154.10"],"or":["154.11"],"打开":["154.11"],"点击分支":["154.11"],"可以看到会多个一个名":["154.11"]},{"0":["11.18","14.9","62.2","118.2","118.4","118.6","118.7","120.16","120.17","133.2","133.6","140.1","143.1","145.1"],"1":["14.13","18.16","48.12","48.13","104.4","106.7","118.2","118.4","118.6","118.7","120.16","120.17"],"2":["48.7","48.8","53.13","88.7","106.7","120.10","133.6"],"3":["18.16","31.1","46.2","53.13","120.10","145.1","154.7"],"4":["9.7","9.10","11.12","14.17","50.6","99.15","120.7"],"5":["10.15","44.6","118.8","118.11","131.1","133.6","135.2","140.1","143.1"],"6":["5.5","14.17","99.7"],"7":["17.10","53.2","102.11","151.0"],"8":["10.15","151.0"],"10":["13.1","31.4","55.1"],"12":["10.16"],"13":["86.9"],"14":["113.4"],"15":["131.1","136.3"],"18":["55.3","106.2","113.1"],"20":["104.5","107.1"],"21":["86.8"],"25":["82.1","83.1"],"30":["55.1","103.3"],"50":["48.2"],"60":["73.8"],"80":["118.4"],"100":["23.2","48.2","53.2","102.2","130.1","131.4","136.3"],"123":["103.5","106.5","109.1"],"127":["118.2","118.4","118.6","118.7","120.16","120.17"],"150":["129.1"],"180":["101.13"],"200":["130.1"],"222":["50.3"],"250":["129.1"],"255":["120.10"],"300":["130.1","133.5","133.6"],"320":["24.11"],"400":["131.3","133.2"],"401":["122.14"],"446":["113.1"],"456":["103.5"],"500":["122.14","132.0"],"551":["113.1"],"600":["133.2","133.5","138.4"],"615":["113.1"],"666":["50.8"],"709":["113.1"],"744":["113.1"],"750":["138.4"],"849":["86.7"],"1234":["101.14"],"2023":["26.14"],"8080":["118.3"],"101010":["87.2"],"岁了":["5.1","5.4"],"我的名字是alice并且我25岁了":["5.2"],"专业的学生":["5.3"],"静态方法以及":["5.6"],"等特性让":["5.6"],"javascript":["5.6","6.4","117.2"],"开发者能够更好地组织和复用代码":["5.6"],"标准进行实现":["6.2"],"以保持互操作性和一致性":["6.2"],"fs":["6.3"],"net":["6.3"],"flatmap":["6.4"],"用于数组的扁平化和映射":["6.4"],"trimstart":["6.4"],"trimend":["6.4"],"用于去除字符串两端的空白字符":["6.4"],"fromentries":["6.4"],"用于将键值对列表转换为对象":["6.4"],"从":["6.4"],"开始":["6.4"],"标准每年都会发布一个新版本":["6.4"],"每个版本都会引入一些新的特性和改进":["6.4"],"以使":["6.4"],"语言变得更加强大":["6.4"],"现代和易用":["6.4"],"使用迭代器遍历map的键值对":["7.2"],"entriesiterator":["7.2"],"false":["7.5","9.7","13.8","13.17","14.15","41.4","48.29","49.5","92.20","105.7","118.8"],"新地址":["7.5"],"以及实现代码的重用和分割":["8.1"],"模块化的好处如下":["8.2"],"john":["8.11","8.12","82.2","83.2"],"is":["8.13","8.14"],"my":["8.14"],"输出":["8.22","10.15","69.2","72.6","72.8"],"age":["8.23","54.3","82.1","83.1","107.1"],"模块化特性":["8.28"],"以提升代码质量和开发效率":["8.28"],"tostring":["9.12","84.1","101.12","101.14","120.8"],"方法是不能将":["9.12"],"转换成":["9.12"],"唯一值":["9.14"],"相当于去重":["9.14"],"存在返回":["9.15"],"不存在返回":["9.15"],"被过滤掉":["9.15"],"hello":["10.5","31.6","31.9","31.10","31.11","106.4","154.2"],"上面示例中":["10.5"],"调用时没有参数":["10.5"],"所以参数默认值":["10.5"],"生效":["10.5"],"然后再对这个默认值进行解构赋值":["10.5"],"从而触发参数变量":["10.5"],"的默认值生效":["10.5"],"参数对应":["10.6"],"结果触发了默认值":["10.6"],"参数等于":["10.6"],"就没有触发默认值":["10.6"],"从而抛出一个错误":["10.7"],"从上面代码还可以看到":["10.7"],"参数":["10.7"],"的默认值等于":["10.7"],"函数的运行结果":["10.7"],"注意函数名":["10.7"],"之后有一对圆括号":["10.7"],"这表明参数的默认值不是在定义时执行":["10.7"],"而是在运行时执行":["10.7"],"如果参数已经赋值":["10.7"],"默认值中的函数就不会运行":["10.7"],"另外":["10.7"],"可以将参数默认值设为":["10.7"],"表明这个参数是可以省略的":["10.7"],"optional":["10.7"],"上面的代码中给函数第一个参数":["10.10"],"声明一个变量":["10.10"],"剩余的参数会被":["10.10"],"收集成一个数组":["10.10"],"这就是剩余参数":["10.10"],"引入剩余参数就是为了能替代函数内部的":["10.10"],"由于":["10.10"],"对象不具备数组的方法":["10.10"],"所以很多时候在使用之前要先转换成一个数组":["10.10"],"而剩余参数本来就是一个数组":["10.10"],"避免了这多余的一步":["10.10"],"使用起来既优雅又自然":["10.10"],"否则会报错":["10.11"],"多余的参数不会被获取到":["10.12"],"上面的代码中":["10.12"],"会去解构传入参数":["10.12"],"加上有剩余语法的作用":["10.12"],"对应的值从数组中的项解构出来":["10.12"],"在函数内部直接使用解构出来的参数即可":["10.12"],"剩余语法看起来和展开语法完全相同":["10.12"],"不同点在于":["10.12"],"剩余参数用于解构数组和对象":["10.12"],"剩余参数是将多个单个元素聚集起来形成一个单独的个体的过程":["10.13"],"输出了正确的结果":["10.17"],"而箭头函数中的":["10.17"],"方法继承了外层代码块的":["10.17"],"在浏览器环境中":["10.17"],"这里指向":["10.17"],"window":["10.17","68.7"],"因此输出了":["10.17"],"特别是在简单的回调函数和数组方法中":["10.18"],"能够减少代码量并提高代码的可读性":["10.18"],"这样的规定也使得":["10.19"],"函数参数与数组和对象的尾逗号规则":["10.19"],"保持一致了":["10.19"],"worl":["11.4"],"qux":["11.13"],"o":["11.14"],"开发中":["12.5"],"模板字符串广泛用于生成":["12.5"],"html":["12.5","51.4","63.2"],"标记":["12.5"],"日志信息":["12.5"],"网络请求等多种场景":["12.5"],"覆盖掉":["13.4"],"而":["13.4","18.18","49.10","66.2"],"最后只有一个":["13.4"],"属性":["13.4","32.14","108.0"],"指向原型对象":["13.6"],"但是绑定的":["13.6"],"却还是当前对象":["13.6"],"因此输出的就是":["13.6"],"true":["13.12","41.17","48.1","92.14","101.10","109.2"],"sex":["13.21"],"male":["13.21","101.13"],"options":["13.21"],"alex":["13.21"],"entires":["13.22"],"并不能保证顺序一定是你看到的样子":["13.22"],"这一点和":["13.22"],"in":["13.22","55.6"],"是一样的":["13.22","150.1"],"如果对遍历顺序有要求那么不能用":["13.22"],"以及这种方法":["13.22"],"而要用其他方法":["13.22"],"都可以显著提高代码的可读性和可维护性":["15.0"],"使用默认值":["15.4","15.10"],"用的最多的交集选择器":["16.5"],"元素选择器配合类名选择器":["16.5"],"例如":["16.5"],"center":["16.6","18.15"],"color":["16.9","16.12","42.12"],"red":["16.9","16.12","42.12","129.1"],"选到2号p标签":["16.12"],"blue":["16.12","23.1"],"属性且属性值含有":["16.13"],"table":["16.14"],"转换为块级元素并一行显示":["16.14"],"能够轻松地实现复杂的网页布局和响应式设计":["17.0"],"属性控制它们的布局行为":["17.1"],"主轴为垂直方向":["17.2"],"主轴居中对齐":["17.3"],"交叉轴顶部对齐":["17.3"],"允许项目换行":["17.4"],"允许换行":["17.5"],"不缩小":["17.6"],"嵌套的flex容器":["17.8"],"多行之间平均分布":["17.9"],"平均分布多行元素":["17.10"],"属性在多行中平均分布元素":["17.10"],"或":["18.1","89.3","108.0","112.1"],"也可以占据一个单元格":["18.2"],"我们可以通过指定网格项的位置来控制它们在网格中的布局":["18.2"],"定义两行":["18.3"],"第一行高度为":["18.3","18.6"],"第二行高度自适应":["18.3","18.6"],"网格项跨越第一行到第三行":["18.4","18.16"],"auto":["18.6","18.25","20.3","20.6"],"两行":["18.6"],"footer":["18.8"],"50px":["18.8","18.11"],"列间距为":["18.9"],"10px":["18.10"],"行间距为":["18.10"],"自动创建的额外列宽度为":["18.11"],"自动创建的额外项目按照列进行放置":["18.12"],"end":["18.13","120.7"],"项目在行轴上底部对齐":["18.13"],"space":["18.14"],"between":["18.14"],"项目在行轴上均匀分布":["18.14"],"项目在行轴上居中对齐":["18.15"],"关键字表示网格轨道的大小将根据其内容自动调整":["18.18"],"表示网格轨道的大小将占据剩余可用空间":["18.18"],"我们定义了三列":["18.19"],"每列宽度为":["18.19"],"时":["18.20","34.7","36.4","49.5","65.2"],"其中使用了":["18.22"],"布局将标题":["18.22"],"导航栏和内容区域分为三个网格项":["18.22"],"通过设置网格容器的列模板为":["18.22"],"1fr":["18.22","18.25"],"使得三个网格项平均占据网格容器的宽度":["18.22"],"布局将网页划分为多个网格项":["18.23"],"通过设置网格项的网格位置和跨度":["18.23"],"我们可以实现复杂的布局结构":["18.23"],"如标题横跨三列":["18.23"],"导航栏":["18.23"],"内容区域和侧边栏位于第二行":["18.23"],"页脚位于第三行":["18.23"],"img":["18.23","18.25","41.25","100.3","154.7","154.10"],"其中":["18.24"],"我们首先创建了一个主要的网格容器":["18.24"],"将页面划分为两列":["18.24"],"标题横跨两列":["18.24"],"然后":["18.24","133.3"],"我们在网格项中嵌套另一个网格容器":["18.24"],"用于进一步划分内容区域":["18.24"],"这样":["18.24","35.5","72.4"],"我们可以在同一个网格项中实现更复杂的布局":["18.24"],"我们使用":["18.25","33.11","35.4"],"repeat":["18.25"],"fill":["18.25","133.4","133.6"],"minmax":["18.25"],"200px":["18.25"],"来定义网格容器的列模板":["18.25"],"这将使网格容器动态调整列数":["18.25"],"以填充可用空间":["18.25"],"并保持每列最小宽度为":["18.25"],"最大宽度为可用空间的一份之一":["18.25"],"列表等":["18.27"],"都可以结合媒体查询实现不同屏幕尺寸下的适配":["18.28"],"都支持对齐和排序网格项":["18.28"],"将第三个网格项置于第一个位置":["18.30"],"以优化网页性能":["18.32"],"布局的旧版浏览器中正常显示":["18.33"],"权重最高":["19.1"],"在vscode中":["19.1"],"鼠标悬浮在样式上":["19.1"],"会弹出来显示选择器":["19.1"],"垂直居中":["20.1"],"设置行高和高度一样":["20.1"],"skyblue":["20.2"],"100px":["20.5"],"bottom":["20.6"],"为了让容器撑满视口高度":["20.7"],"000":["21.0","136.3"],"ellipsis":["21.1"],"以省略号显示隐藏的内容":["21.1"],"all":["21.2"],"强制打断单词换行":["21.2"],"tip":["21.2","39.5","39.6","49.9","107.1"],"多行溢出隐藏只能内核是":["21.2"],"的浏览器":["21.2"],"padding":["21.3"],"left":["21.3"],"4px":["21.3"],"d6d6d6":["22.0"],"右下角拖动块":["22.0"],"resizer":["22.0"],"元素允许使用多个":["24.0"],"元素":["24.0","24.10","29.9"],"元素可以链接不同的音频文件":["24.0"],"浏览器将使用第一个支持的音频文件":["24.0"],"标签中使用":["24.5"],"定义在媒体播放器文本轨迹":["24.6"],"edge":["24.7"],"只有在静音下可以使用":["24.7"],"网页的主体部分":["25.1"],"包含网页的实际内容":["25.1"],"如文本":["25.1"],"图像":["25.1"],"链接等":["25.1"],"用于组合多个元素为一个整体":["25.2"],"方便样式和布局控制":["25.2"],"span":["25.2","42.12"],"内联容器标签":["25.2"],"类似于":["25.2"],"但是它用于内联元素的包裹":["25.2"],"交互性强的现代网页应用程序":["25.3"],"通过学习":["25.4"],"你可以创建各种各样的网页":["25.4"],"并为用户提供丰富的在线体验":["25.4"],"这是h6级别的标题":["26.1"],"提交":["26.13"],"copy":["26.14"],"公司名":["26.14"],"td":["27.1"],"表格标签":["27.1"],"用于创建表格":["27.1"],"如文本框":["27.2"],"单选按钮":["27.2"],"复选框等":["27.2"],"链接目标":["27.4"],"控制元素行为等":["27.4"],"在实际开发中":["27.5"],"合理使用标签和属性可以提高网页的可读性":["27.5"],"可访问性和用户体验":["27.5"],"router":["29.1"],"等":["29.1","29.16","71.4","77.8","78.1"],"结合使用":["29.1"],"来构建更复杂的应用":["29.1"],"操作":["29.4","76.1","119.2"],"提高了页面的性能和响应速度":["29.4"],"而无需重复造轮子":["29.6"],"通过组合多个组件":["29.8"],"我们可以构建复杂的用户界面":["29.8"],"从而渲染到页面上":["29.9"],"并根据数据进行相应的渲染和逻辑处理":["29.10"],"我们可以实现用户界面的交互和动态变化":["29.11"],"但语法上更加简洁和易读":["29.13"],"评论列表等":["29.15"],"从而实现组件的复用":["29.18"],"以免影响代码的可维护性和可读性":["29.19"],"this":["29.20","44.4","68.5"],"指向和生命周期混乱等":["29.20"],"解析为":["29.22"],"纯":["29.22"],"语法代码":["29.22"],"的中文含义是":["29.23"],"渲染":["29.23"],"方法的语法如下":["29.23"],"reactdom":["29.23"],"要渲染的虚拟dom对象":["29.23"],"容器":["29.23"],"container":["29.23"],"要渲染到页面上的哪个位置":["29.23"],"strictmode":["29.24"],"元素的创建和组合的基础":["30.1"],"是构建复杂用户界面的核心":["30.1"],"可以根据":["30.2"],"的描述来创建相应的":["30.2"],"customelement":["30.4"],"mycomponent":["30.4"],"your":["30.5"],"name":["30.5","30.11","41.5","52.12","107.1","122.14"],"应用程序的核心":["30.9"],"f":["30.19","102.10"],"mycomponentwithlogger":["30.20"],"click":["30.21","42.9","43.17","138.3"],"me":["30.21","37.7"],"increment":["30.22","31.3","39.3"],"组件销毁阶段":["31.1"],"componentwillunmount":["31.1"],"在组件即将销毁时调用":["31.1"],"用于清理副作用操作":["31.1"],"如取消订阅":["31.1"],"清除定时器等":["31.1"],"onclick":["31.3"],"document":["31.4","32.10","32.11","62.1"],"getelementbyid":["31.4","32.7","32.8","32.9","32.10","32.11","33.12"],"root":["31.4","32.7","32.8","32.9","32.10","32.11","33.12"],"p":["31.6","31.9","31.10","31.11","41.7","78.2"],"return":["31.11","69.3","69.4","69.6","98.3","102.8","102.9","122.14"],"componentdidupdate":["31.13"],"在组件销毁阶段":["31.13"],"中进行清理操作":["31.13"],"可以将数据传递给子组件":["32.1"],"并根据数据的变化更新子组件的显示内容":["32.1"],"实现动态渲染和交互":["32.1"],"中":["32.3","90.2"],"可以通过":["32.3"],"来访问传递的":["32.3"],"将使用默认值":["32.4"],"中的属性解构出来":["32.5"],"使代码更加简洁易读":["32.5"],"从而使组件行为更加可预测和稳定":["32.13"],"属性进行了验证":["32.14"],"要求它必须是字符串类型":["32.14"],"并且是必需的":["32.14"],"如果传递的":["32.14"],"属性不是字符串或者没有传递":["32.14"],"将会在控制台输出警告信息":["32.14"],"对":["32.15"],"进行验证":["32.15"],"增加代码的健壮性和可维护性":["32.15"],"组件开发中非常重要和常用的一部分":["32.15"],"从而实现快速":["33.1"],"流畅的导航体验":["33.1"],"component":["33.3"],"属性指定对应的页面组件":["33.3"],"params":["33.5"],"属性在页面组件中获取":["33.5"],"url":["33.6"],"从而实现页面切换":["33.7"],"在":["33.11","33.15"],"组件中":["33.11"],"属性来指定":["33.11"],"路径":["33.11"],"使用":["33.11","95.3","131.3"],"属性来指定对应的页面组件":["33.11"],"属性用于确保只有在路径完":["33.11"],"全匹配时才渲染对应的组件":["33.11"],"h2":["33.13","33.14"],"sub":["33.13"],"page":["33.13"],"profile":["33.14"],"组件中定义了一个按钮":["33.15"],"当用户点击按钮时":["33.15","35.5"],"会触发":["33.15"],"函数":["33.15"],"通过":["33.15","110.8"],"方法实现页面导航":["33.15"],"编程式导航允许在事件触发后进行页面切换":["33.15"],"从而实现更灵活的导航控制":["33.15"],"使用户界面能够随着用户操作或其他事件的发生而更新":["34.0"],"props":["34.1"],"传递给子组件":["34.1"],"这样的设计有助于保持组件之间的独立性和可预测性":["34.1"],"来访问":["34.3"],"的值":["34.3"],"每次点击按钮时":["34.4"],"的值都会增加":["34.4"],"并触发组件的重新渲染":["34.4"],"中使用了一个回调函数":["34.5"],"该回调函数在":["34.5"],"更新后被调用":["34.5"],"用于打印最新的":["34.5"],"在上面的例子中":["34.6"],"我们展示了错误的方式直接修改":["34.6"],"这样做会导致":["34.6"],"无法正确地追踪":["34.6"],"并可能导致组件的显示内容不正确":["34.6"],"值":["34.7"],"在多个组件中共享":["34.7"],"正确地使用":["34.7"],"将有助于保持组件之间的独立性和可预测性":["34.7"],"并增加":["34.7"],"应用程序的交互性和可维护性":["34.7"],"而无需手动编写大量的重复代码":["35.1"],"正确地更新":["35.2"],"dom":["35.2","63.1"],"最后":["35.2"],"我们将生成的":["35.2"],"元素放置在":["35.2"],"元素中":["35.2"],"从而实现了一个包含数字的列表":["35.2"],"如果数字是偶数":["35.3"],"我们将列表项的颜色设为红色":["35.3"],"如果数字是奇数":["35.3"],"我们将列表项的颜色设为蓝色":["35.3"],"通过这种方式":["35.3","35.4"],"我们可以根据条件来渲染不同样式的列表项":["35.3"],"从而提供更丰富的用户界面":["35.3"],"在子组件中":["35.4"],"方法遍历":["35.4"],"数组":["35.4"],"并渲染对应的列表项":["35.4"],"我们可以将数据和渲染逻辑分离":["35.4"],"使代码更加清晰和易于维护":["35.4"],"我们添加了一个输入框和一个按钮":["35.5"],"用于输入新的列表项和添加新的列表项":["35.5"],"通过监听输入框的变化事件":["35.5"],"我们可以获取用户输入的新数字":["35.5"],"并保存在组件的状态中":["35.5"],"我们将新数字添加到":["35.5"],"数组中":["35.5"],"并通过更新组件状态来触发重新渲染":["35.5"],"新的列表项就会动态地显示在用户界面上":["35.5"],"如为列表项添加唯一的":["35.6"],"包裹多个元素等":["35.6"],"以确保代码的可读性和性能":["35.6"],"列表渲染使我们能够更高效地展示大量数据":["35.6"],"并为用户提供更好的用户体验":["35.6"],"从而提供更加个性化和灵活的用户体验":["36.1"],"根据":["36.2"],"状态的不同":["36.2"],"组件会根据条件渲染不同的内容":["36.2"],"通过使用三元表达式":["36.3"],"我们可以在一行代码中实现条件渲染":["36.3"],"使代码更加简洁和易读":["36.3","36.5"],"由于逻辑与是短路逻辑":["36.4"],"当":["36.4","39.6"],"不会继续执行后面的代码":["36.4"],"因此不会渲染任何内容":["36.4"],"条件运算符简化了条件渲染的写法":["36.5"],"在实现条件渲染时":["36.6"],"我们应该遵循最佳实践":["36.6"],"保持代码简洁":["36.6"],"可读性高":["36.6"],"并提高代码的复用性和可维护性":["36.6"],"条件渲染使我们能够根据用户的交互或应用程序的状态来实现动态和交互性的用户界面":["36.6"],"从而提供更好的用户体验":["36.6"],"install":["37.3","110.8"],"clicked":["37.13","141.7"],"包裹的组件停用时调用":["37.18"],"errorcaptured":["37.18"],"错误捕获":["37.18"],"在子孙组件抛出错误时被调用":["37.18"],"用于处理错误":["37.18"],"有一定的了解":["38.1"],"export":["38.3","110.11"],"default":["38.3","98.4","110.8"],"并且使得状态的变化变得可追踪":["39.0"],"和":["39.1","65.3","88.9","95.3"],"这样可以更好地组织和管理状态":["39.1"],"使代码结构更清晰":["39.1"],"的功能":["39.2"],"doublecount":["39.3"],"通过方法修改状态":["39.3"],"commit":["39.3"],"通过actions进行异步操作":["39.3"],"async":["39.3"],"fetchdata":["39.3"],"await":["39.3"],"dispatch":["39.3"],"来分别触发":["39.4"],"从而修改":["39.4"],"状态":["39.4"],"通过使用":["39.5","39.6","71.4"],"我们可以在异步操作中进行数据请求":["39.5"],"api":["39.5"],"调用等":["39.5"],"并在操作完成后通过调用":["39.5"],"来修改状态":["39.5"],"保持了状态的变更流程的一致性和可追踪性":["39.5"],"返回对应":["39.6"],"我们可以在组件中直接获取和使用派生状态":["39.6"],"而无需重复编写数据处理逻辑":["39.6"],"这样使得组件的代码更加简洁":["39.6"],"可维护性更高":["39.6"],"并且":["39.6"],"能够保持响应式":["39.6"],"发生变化时":["39.6"],"也会相应地更新":["39.6"],"树":["40.1"],"找到需要更新的部分":["40.1"],"并将更新应用到实际的":["40.1"],"上":["40.1"],"从而避免直接操作":["40.1"],"提高了性能和效率":["40.1"],"这使得系统更加灵活和高效":["40.2"],"还引入了一系列性能优化策略":["40.2"],"以及":["40.2"],"来改进开发体验":["40.2"],"使得开发者能够更方便地构建响应式的用户界面":["40.2"],"并提高了整体性能":["40.2"],"这些改进使得":["40.2"],"成为一个更强大和现代化的前端框架":["40.2"],"语法糖下进行":["41.0"],"message":["41.1","97.5","110.11","120.12","122.2"],"中需要通过":["41.2"],"的形式才能使用":["41.2"],"函数可以接收原始数据类型与引用数据类型":["41.2"],"函数只能接收引用数据类型":["41.2"],"lisi":["41.5"],"搜索关键字":["41.7"],"是否开启深度监听":["41.16"],"deep":["41.17"],"旧的值":["41.18","41.19","41.20"],"vue":["41.24"],"卸载完成":["41.28"],"第四个":["41.29"],"prevnode":["41.29"],"上一个虚拟节点":["41.29"],"钩子中可用":["41.29"],"div":["41.31"],"宽度":["41.31"],"高度":["41.31"],"具名插槽":["42.1"],"作用域插槽":["42.1"],"实现父子组件通信":["42.1"],"数据就可以在模板中使用了":["42.2"],"但是切记":["42.2"],"是只读的":["42.2"],"只能读取":["42.2"],"不能修改":["42.2"],"自定义事件可以实现子组件给父组件传递数据":["42.3"],"都是原生":["42.4"],"vue2中却不是这样的":["42.4"],"在vue2中组件标签需要通过native修饰符才能变为原生dom事件":["42.4"],"定义就变为自定义事件了":["42.5"],"let":["42.5"],"npmjs":["42.6"],"com":["42.6"],"package":["42.6","154.6"],"msg1":["42.7"],"defineprops":["42.8"],"接受了某一个属性":["42.8"],"方法返回的对象身上就没有相应属性与属性值":["42.8"],"button":["42.9","43.17"],"handler":["42.9"],"点击我获取父组件实例":["42.9"],"获取存储的数值":["42.10"],"使用方式参照官网":["42.11"],"父组件决定子组件的结构与外观":["42.12"],"style":["42.12"],"done":["42.12"],"green":["42.12","131.2"],"title":["42.12"],"或者":["43.2"],"非ts":["43.6"],"子组件模板中的表达式只能访问子组件的作用域":["43.10"],"loading":["43.13"],"下":["43.14"],"需要通过ref":["43.16"],"reactive":["43.16"],"添加响应式":["43.16"],"onchangemsg":["43.17"],"改变msg":["43.17"],"etc":["44.4","119.1"],"save":["44.4"],"as":["44.4"],"future":["44.4"],"projects":["44.4"],"并且它是预配置的":["44.5"],"并且支持大部分rollup插件":["44.5"],"项目的目录结构":["44.6"],"更好的支持typescript":["45.1"],"全局api的修改":["45.3"],"将原来的全局api转移到应用对象":["45.3"],"模板语法变化":["45.3"],"改进":["46.2"],"了":["46.3"],"abc":["48.1","103.4"],"undefined":["48.2","92.18","94.0","101.7"],"只有一个元素的数组":["48.14","48.17"],"log":["48.28","48.29","52.11","53.9","53.10","55.7","73.8","92.4","101.14","102.8","118.4","120.17"],"执行某些操作":["48.30"],"这样结构会更加的清晰":["49.1"],"如果":["49.1"],"后的添加表达式不是布尔值":["49.1"],"会转换为布尔值然后再运算":["49.1"],"什么奖励也没有":["49.2"],"啥也没有":["49.2"],"注意":["49.2","49.9","71.5","128.2","128.4"],"语句中只会有一个代码块被执行":["49.2"],"一旦有执行的代码块":["49.2"],"下边的条件都不会在继续判断了":["49.2"],"所以一定要注意":["49.2"],"条件的编写顺序":["49.2"],"如果所有的比较都是":["49.3"],"则执行":["49.3"],"后的语句":["49.3"],"循环结束":["49.5"],"while语句是先执行再判断":["49.6"],"实质的区别":["49.6"],"while语句可以确保循环至少执行一次":["49.6"],"不应该用它来遍历数组":["49.9"],"因为它还会遍历从对象原型继承的可枚举属性":["49.9"],"用于遍历对象属性":["49.10"],"用于遍历可迭代集合":["49.10"],"如数组":["49.10"],"循环遍历对象时":["49.11"],"会遍历对象的原型链":["49.11"],"并且会包含从原型链继承的属性":["49.11"],"循环遍历的对象是可迭代对象":["49.11"],"它们的值是可枚举的":["49.11"],"通过此代码块可以实现大量代码的重复使用":["50.0"],"大肘子":["50.6"],"函数的参数可以有":["50.6"],"也可以没有个数不限":["50.6"],"调用函数的时候":["50.7"],"函数名括号里面的是实参":["50.7"],"多个参数中间用逗号分隔":["50.7"],"形参的个数可以和实参个数不匹配":["50.7"],"但是结果不可预计":["50.7"],"我们尽量要匹配":["50.7"],"返回":["50.8","52.10"],"fun2":["50.8"],"函数返回的结果是":["50.8"],"同时还可以结束当前的函数体内的代码":["50.9"],"应用程序":["51.0"],"有两种方式":["51.2"],"是键名":["52.2"],"是键值":["52.2"],"两个键值对之间用逗号分隔":["52.2"],"有没有都可以":["52.3"],"属性可以动态创建":["52.3"],"不必在对象声明时就指定":["52.3"],"直接对":["52.3"],"对象的":["52.3"],"属性赋值":["52.3"],"结果就在运行时创建了":["52.3"],"的值发生变化后":["52.4"],"的值并不变":["52.4"],"这就表示":["52.4"],"并不是指向同一个内存地址":["52.4"],"上面代码中":["52.5","131.1","131.3"],"如果没有圆括号":["52.5"],"将其理解为一个代码块":["52.5"],"加上圆括号以后":["52.5"],"就理解成一个对象":["52.5"],"报错":["52.7","54.3","104.3","106.6","121.11","121.22"],"上面代码的第一个表达式":["52.7"],"对数值键名":["52.7"],"使用点运算符":["52.7"],"结果报错":["52.7"],"第二个表达式使用方括号运算符":["52.7"],"结果就是正确的":["52.7"],"是对象":["52.10"],"继承的属性":["52.10"],"虽然":["52.10"],"但该属性并没有被删除":["52.10"],"依然存在":["52.10"],"这个例子还说明":["52.10"],"即使":["52.10","65.1"],"该属性依然可能读取到值":["52.10"],"console":["52.11","55.7","92.4","101.14","102.8","118.4"],"老张":["52.12"],"key":["52.12","110.8"],"if":["52.12","117.4","122.14"],"obj2":["52.13"],"obj3":["52.13"],"可以写成":["52.13"],"temp":["52.13"],"07":["53.2","113.4"],"000000000000001":["53.2"],"没有声明过这个变量":["54.3"],"script":["54.4","126.2"],"先销毁再创建":["54.4"],"而当时又没有那个对象可保存":["54.5"],"就可用":["54.5"],"来填充该变量":["54.5"],"a":["54.6","87.1","101.5"],"不存在":["54.6"],"虽然两个变量的值相等":["54.18"],"但是两个变量保存了两个不同的内存地址":["54.18"],"产生影响":["54.19"],"也就是两个变量指向堆内存中同一个对象":["54.20"],"所以不要重复声明同一个变量":["55.4"],"避免":["55.4"],"syntaxerror":["55.4"],"每次迭代循环声明一个新的迭代变量":["55.6"],"每个":["55.6"],"引用的都是不同的变量实例":["55.6"],"这种风格也适用于":["55.6"],"of":["55.6","117.6"],"value":["56.1","77.6","80.2","138.3"],"设置元素的属性":["56.1"],"class":["56.2"],"highlight":["56.2"],"这只是":["58.0"],"中的一些常见对象":["58.0"],"还有其他对象和方法可用于处理浏览器窗口和与浏览器交互的其他方面":["58.0"],"请注意":["58.0"],"在不同的浏览器中可能会有一些差异":["58.0"],"因此在编写跨浏览器的代码时需要注意兼容性":["58.0"],"reload":["59.1","59.2"],"重新加载当前页面":["59.1"],"platform":["60.2"],"屏幕的颜色深度":["61.1"],"pixeldepth":["61.2"],"位":["61.2"],"当前窗口加载的文档对象":["62.1"],"而更新页面":["63.1"],"将处理结果更新到":["63.2"],"页面中":["63.2"],"可选的密码用于认证用途":["63.4"],"方法中参数设置为":["63.5"],"错误信息":["63.6"],"post":["63.6"],"http":["63.6","98.4","118.2","118.4","118.6","118.7","122.13"],"xxxx":["63.6"],"responsetext":["63.8"],"responsexml":["63.8"],"fail":["63.8"],"已经执行完毕":["65.1"],"都会增加":["65.2"],"的值并打印":["65.2"],"的对象":["65.3","95.4"],"变量被隐藏在闭包内部":["65.3"],"只能通过返回对象的方法来访问和修改":["65.3"],"事件处理":["65.4"],"闭包可以用于处理事件回调函数":["65.4"],"通过闭包":["65.4"],"可以在事件处理函数内部访问外部函数的数据和状态":["65.4"],"从而更方便地处理事件相关的逻辑":["65.4"],"应用程序时":["65.5"],"了解闭包的概念和使用方法是非常有益的":["65.5"],"如果原始对象的属性是引用类型":["66.1"],"如对象或数组":["66.1"],"新对象和原始对象的该属性仍然引用同一个对象":["66.1"],"深拷贝可能会涉及到循环引用的问题":["66.2"],"即对象内部存在相互引用的属性":["66.2"],"在实现深拷贝时":["66.2"],"需要处理循环引用的情况":["66.2"],"以避免无限递归和栈溢出":["66.2"],"综上所述":["66.2"],"浅拷贝和深拷贝是":["66.2"],"中常用的对象复制技术":["66.2"],"浅拷贝只复制对象的引用":["66.2"],"深拷贝创建一个独立的副本":["66.2"],"相加":["67.1","73.3"],"同样":["67.1"],"相乘":["67.1"],"函数柯里化是一种将多参数的函数转化为一系列接受单个参数的函数的技术":["67.2"],"它提供了灵活和可复用的函数调用方式":["67.2"],"有助于参数复用":["67.2"],"函数组合和高阶函数的创建":["67.2"],"否则":["67.4"],"返回一个新的函数":["67.4"],"该函数将之前的参数与新的参数连接起来":["67.4","67.6"],"并再次调用":["67.4","67.6"],"在柯里化函数中":["67.5"],"我们可以使用":["67.5"],"来表示一个占位符":["67.5"],"用于在函数调用过程中填充参数位置":["67.5"],"debounce":["68.0"],"的方式来减少调用频率":["68.0"],"else":["68.3","120.6"],"settimeout":["68.3"],"addeventlistener":["68.7"],"scroll":["68.7"],"infinity":["70.1"],"的问题":["71.0"],"使异步代码更易于理解和维护":["71.0"],"以下是":["71.0"],"的基本概念和用法":["71.0"],"并将错误信息":["71.1"],"并接收到错误信息":["71.2"],"如果任意一个操作失败":["71.3"],"将调用最后的":["71.3"],"方法":["71.3","93.2","95.8"],"reject":["71.4","98.3","98.4","110.11"],"它们提供了更多的灵活性和功能":["71.4"],"可以更好地处理异步操作":["71.4"],"避免回调地狱":["71.4"],"并使代码更清晰和可维护":["71.4","74.4"],"方法处理请求失败的错误":["71.5"],"上述示例中假设请求的数据为":["71.5"],"格式":["71.5"],"并设置请求头的":["71.5"],"为":["71.5"],"根据具体的需求":["71.5"],"可以调整请求的数据和请求头":["71.5"],"通过封装":["71.5"],"请求为":["71.5"],"可以更优雅地处理异步请求":["71.5"],"并使用":["71.5"],"的链式调用":["71.5"],"错误处理和其他特性来组织和处理请求的结果":["71.5"],"使得属性和方法可以被共享和继承":["72.1"],"它会沿着原型链找到":["72.2"],"上的":["72.2"],"对象的基本原型":["72.3"],"对象就可以访问":["72.4"],"的":["72.4"],"可选参数":["73.1"],"方法从数组的第一个元素开始累加":["73.3"],"初始值为":["73.3"],"提供了":["73.3"],"initialvalue":["73.3"],"然后依次将每个元素与":["73.3"],"得到最终的累积结果":["73.3"],"方法是一个非常强大和灵活的数组方法":["73.9"],"通过合理使用它":["73.9"],"可以简化对数组的复杂计算和操作":["73.9"],"是一个全局函数":["74.1"],"也可以在任何地方调用":["74.1"],"在该函数内部可访问":["74.2"],"如果在":["74.3"],"中找不到变量":["74.3"],"引擎会向上查找并找到全局作用域中的":["74.3"],"代码至关重要":["74.4"],"作用域确定了变量和函数的可见性和访问范围":["74.4"],"可以帮助避免命名冲突和错误":["74.4"],"中级":["75.4"],"删除或移动节点等操作":["76.1"],"以下是一些常用的":["76.1"],"我们称之为文档树或":["76.2"],"文档树直观的体现了标签与标签之间的关系":["76.2"],"根节点":["76.3"],"特指":["76.3"],"web":["76.4"],"开发中不可或缺的一部分":["76.4"],"鼠标移出了":["77.5"],"失去焦点触发":["77.7"],"如":["77.8"],"shift":["77.8"],"ctrl":["77.8"],"时触发":["77.8"],"例如阻止表单提交或超链接跳转":["77.9"],"stoppropagation":["77.9"],"停止事件的传播":["77.9"],"touchend":["77.11"],"touchmove":["77.11"],"选项4":["77.12"],"选项5":["77.12"],"这将从":["78.3"],"中移除":["78.3"],"这将返回元素的计算样式对象":["79.1"],"你可以使用":["79.1"],"方法来获取指定属性的值":["79.1"],"可以使用":["79.2"],"setattribute":["79.2"],"获取或设置元素的文本内容":["80.0"],"property":["80.2"],"的基本用法和一些常见操作":["81.0","82.0","83.0"],"属性用于指定":["81.1"],"的可访问路径":["81.1"],"默认为当前页面的路径":["81.1"],"浏览器会将其视为已过期并删除该":["81.3"],"网站首选项等功能":["81.4"],"在实际应用中":["81.4","82.6","83.6"],"需要根据具体需求合理使用":["81.4"],"来增强用户体验和数据交互":["81.4"],"提供了一种简单而强大的在浏览器中进行本地持久化存储的方式":["82.6"],"它可用于保存用户的首选项":["82.6"],"配置信息":["82.6"],"用户身份验证信息等":["82.6"],"可以根据具体需求合理使用":["82.6","83.6"],"来增强用户体验和数据持久性":["82.6"],"提供了一种简单而强大的在浏览器中进行会话级别的本地存储的方式":["83.6"],"它适用于临时保存会话相关的数据":["83.6"],"如用户登录信息":["83.6"],"临时配置等":["83.6"],"来增强用户体验和会话管理":["83.6"],"json":["84.1","154.6"],"tolocaledatestring":["84.1"],"将日期对象转换为本地日期格式的字符串":["84.1"],"tolocalestring":["84.1"],"将日期对象转换为本地日期和时间格式的字符串":["84.1"],"tolocaletimestring":["84.1"],"将日期对象转换为本地时间格式的字符串":["84.1"],"将日期对象转换为字符串":["84.1"],"totimestring":["84.1"],"将日期对象的时间部分转换为字符串":["84.1"],"toutcstring":["84.1"],"时间格式的字符串":["84.1"],"minutes":["84.2"],"seconds":["84.2"],"milliseconds":["84.2"],"setdate":["84.3"],"getdate":["84.3"],"今天是2100年1月14日之后":["84.5"],"程序":["85.0"],"内置对象最大的优点就是帮助我们快速开发":["85.0"],"arguments":["85.1"],"函数参数集合":["85.1"],"用于处理不同的任务和需求":["85.9"],"直接使用并传入对应的参数":["86.0"],"not":["87.1"],"当进行非法的数学运算时":["87.1"],"0101111011011001":["87.2"],"这些是":["87.2"],"对象的一些常用属性和方法":["87.2"],"通过使用这些属性和方法":["87.2"],"可以在":["87.2"],"中更方便地处理数字和数值相关的操作":["87.2"],"搜索和替换字符串":["88.1"],"下面是关于":["88.1"],"正则表达式的详细介绍":["88.1"],"gi":["88.6"],"z":["88.7","150.9"],"并将":["88.9"],"捕获到两个分组中":["88.9"],"使用编号或名称可以访问捕获的子串":["88.9"],"捕获分组可用于从字符串中提取特定部分的信息":["88.9"],"进行更精确的匹配和处理":["88.9"],"new":["88.10"],"regexp":["88.10"],"通过学习和掌握正则表达式的语法和方法":["88.11"],"可以提高字符串处理的效率和精确度":["88.11"],"从而更好地应对各种字符串操作的需求":["88.11"],"函数根据传入的参数不同":["89.3"],"对象":["89.3","101.3","118.5"],"展现了不同的行为":["89.3"],"这就是多态的体现":["89.3"],"可以引用将要创建的对象":["90.0"],"构造函数的优点是它可以直接在构造函数中定义对象的属性和方法":["90.1"],"但每次创建对象实例时":["90.1"],"都会重新创建一次方法":["90.1"],"这可能会导致内存浪费":["90.1"],"尤其是当实例数量较多时":["90.1"],"无论是构造函数还是类":["90.2"],"它们都可以用于创建对象":["90.2"],"在现代的":["90.2"],"类更为普遍":["90.2"],"因为它提供了更清晰":["90.2"],"直观和易于维护的代码结构":["90.2"],"通过面向对象编程":["91.2"],"开发者可以更好地组织和管理代码":["91.2"],"提高代码的可维护性和可重用性":["91.2"],"并使得复杂的程序更易于理解和扩展":["91.2"],"alert":["92.2","141.7"],"大家好啊":["92.2"],"方法名":["92.3"],"千万别忘记添加小括号":["92.3"],"返回一个给定对象自身可枚举属性值的数组":["92.5"],"hasownproperty":["92.5"],"判断一个属性是否是对象自身的属性":["92.5"],"非继承的属性":["92.5"],"configurable":["92.11"],"对象本身没有":["93.2"],"会在原型链上查找并在":["93.2"],"对象上找到该方法":["93.2"],"并允许我们创建灵活和高效的代码结构":["93.4"],"在全局上下文中为":["94.0"],"而不是默认指向全局对象":["94.0"],"启用严格模式的代码在遵循更严格的语法规则后":["94.0"],"更容易发现潜在的错误":["94.0"],"并且在某些情况下可能会有更好的性能":["94.0"],"建议在新的项目中使用严格模式":["94.0"],"并逐步更新现有的代码以适应严格模式":["94.0"],"call":["95.3"],"apply":["95.3"],"指向指定的那个对象":["95.3"],"foo":["95.3"],"obj":["95.3"],"此处是obj":["95.4"],"则传":["95.7"],"null":["95.7"],"上方代码中":["95.8"],"继承了":["95.8"],"里面传入的":["95.10"],"实参":["95.10"],"必须是数组":["95.10"],"或者伪数组":["95.10"],"里面传实参时":["95.11"],"需要以数组的形式":["95.11"],"即便是传一个实参":["95.11"],"也需要传数组":["95.11"],"中元素的最小值":["95.12"],"由指定":["95.14"],"和指定实参的":["95.14"],"原函数拷贝":["95.14"],"可以看出":["95.14"],"方法是有返回值的":["95.14"],"对响应错误做点什么":["97.4"],"config":["97.5"],"网络错误":["98.1"],"跨域请求是否需要携带":["98.2"],"cookie":["98.2"],"请求配置":["98.3"],"error":["98.3","102.7","122.14"],"promise":["98.3","98.4","110.11"],"版本不受支持":["98.4"],"异常问题":["98.4"],"请联系管理员":["98.4"],"headers":["98.5"],"signheader":["98.5"],"查看局部配置":["99.1"],"file2":["99.5"],"filename":["99.6"],"比较两个分支指定文件的差异":["99.7"],"分支1":["99.7"],"分支2":["99.7"],"记录和作者":["99.8"],"blame":["99.8"],"b":["99.10","103.4","120.4"],"工作区和暂存区所有文件恢复成和指定版本一样":["99.15"],"版本号":["99.15"],"head":["99.16"],"rename":["99.18"],"旧名":["99.18"],"新名":["99.18"],"force":["99.21","121.18","123.0"],"ssh目录下":["100.4"],"octal":["101.2"],"0o744":["101.2"],"八进制s":["101.2"],"返回的是一个":["101.3"],"y":["101.5","142.2"],"boolean":["101.5"],"no":["101.6"],"yes":["101.6"],"不能":["101.8"],"赋予":["101.8"],"while":["101.10"],"aaa":["101.11"],"abcd":["101.14"],"更像面向对象编程的语法而已":["102.0"],"我叫zs":["102.1"],"我18了":["102.1"],"可以调用从父中继承得到的方法":["102.2"],"受保护":["102.6"],"及其子类中访问":["102.6"],"peter":["102.7"],"sayyyy":["102.8"],"aa":["102.8","104.2"],"可以使用this调用":["102.8"],"e":["102.10","121.21","121.22"],"我的名字是zs":["102.11"],"年龄是7":["102.11"],"zs":["103.2","106.3","107.1"],"c":["103.4","106.5"],"bb":["104.2"],"因为只有一个参数t":["104.3"],"tofixed":["104.4"],"张麻子":["104.5"],"number没有length属性":["104.7"],"ts文件会先编译为js文件":["105.2"],"有强大的代码类型提示":["105.3"],"true为开启严格模式":["105.7"],"false为关闭":["105.7"],"启动文件名":["105.10"],"zhangsan":["106.1"],"字面量模式虽然可以赋值任意类型":["107.1"],"但是赋完值之后":["107.1"],"这个对象类型是没有办法去做一个修改的":["107.1"],"如果给它增加一个age属性":["107.1"],"它是没有办法去做增加的":["107.1"],"无法对这个变量的进行任何赋值的一个操作":["107.1"],"生成单个":["108.0"],"soucemaps":["108.0"],"而不是将":["108.0"],"sourcemaps":["108.0"],"生成不同的文件":["108.0"],"inlinesources":["108.0"],"将代码与":["108.0"],"生成到一个文件中":["108.0"],"要求同时设置了":["108.0"],"其他选项":["108.0"],"experimentaldecorators":["108.0"],"启用装饰器":["108.0"],"emitdecoratormetadata":["108.0"],"为装饰器提供元数据的支持":["108.0"],"变量s的值":["109.2"],"只能是上面value定义的值":["109.2"],"axios":["110.2","110.10"],"echarts":["110.2"],"等技术栈":["110.2"],"安装全部依赖":["110.4"],"安装完依赖运行程序":["110.4"],"run":["110.4","126.2"],"代码在ecmascript模块中":["110.6"],"eslint支持使用第三方插件":["110.6"],"在使用插件之前":["110.6"],"您必须使用npm安装它":["110.6"],"该eslint":["110.6"],"前缀可以从插件名称被省略":["110.6"],"plugins":["110.6"],"eslint规则":["110.6"],"rules":["110.6"],"object":["110.8"],"keys":["110.8"],"foreach":["110.8"],"在入口文件引入":["110.8"],"use":["110.8"],"方法安装自定义插件":["110.8"],"gloablcomponent":["110.8"],"less":["110.9"],"后面的":["110.9"],"不要忘记":["110.9"],"不然会报错":["110.9"],"配置完毕你会发现":["110.9"],"提供这些全局变量可以在组件样式中使用了":["110.9"],"没有返回失败的信息":["110.10"],"获取用户信息失败":["110.10"],"安装":["110.10"],"最后通过":["110.10"],"测试接口":["110.10"],"无网络":["110.11"],"type":["110.11"],"reqlogout":["110.12"],"last":["111.0"],"运行nginx":["111.1"],"desc":["112.1"],"显示表的结构":["112.1"],"从表中删除数据":["112.2"],"grants":["112.3"],"for":["112.3"],"显示用户的权限":["112.3"],"073":["113.1"],"03":["113.4"],"根据数据的特性和需求":["113.5"],"选择适当的数据类型是非常重要的":["113.5"],"数据查询和分析":["114.0"],"数据库提供了强大的查询语言和工具":["114.0"],"使用户能够轻松地执行复杂的数据查询和分析操作":["114.0"],"workbench":["114.1","116.1"],"以及各种编程语言的mysql连接器":["114.1"],"无论是小型应用程序还是大型企业级系统":["114.1"],"mysql都是一个可靠和优秀的选择":["114.1"],"输入服务器名称":["116.1"],"用户名和密码进行连接":["116.1"],"替换为您希望创建的数据库的名称":["116.2"],"等替换为表的列名和相应的数据类型":["116.4"],"等替换为要插入的值":["116.5"],"替换为检索条件":["116.6"],"替换为更新条件":["116.7"],"替换为删除条件":["116.8"],"stringify":["117.4"],"err":["117.4","120.9","122.14"],"throw":["117.4"],"arr":["117.4"],"文件保存成功":["117.4"],"p616779645":["117.6"],"触不可及":["117.6"],"intouchables":["117.6"],"p1454261925":["117.6"],"当幸福来敲门":["117.6"],"pursuit":["117.6"],"happyness":["117.6"],"p2614359276":["117.6"],"龙猫":["117.6"],"となりのトトロ":["117.6"],"p2540924496":["117.6"],"server":["118.2","118.7"],"running":["118.2","118.7","120.16","120.17"],"at":["118.2","118.7","120.16","120.17"],"logo":["118.3"],"png":["118.3"],"encoded":["118.8"],"extended":["118.8"],"第三方中间件":["118.8"],"ie10":["118.11"],"chrome4":["118.11"],"firefox3":["118.11"],"text":["118.14"],"plain":["118.14"],"服务器成功响应预检请求后":["118.15"],"才会发送真正的请求":["118.15"],"并且携带真实数据":["118.15"],"接口项目":["119.1"],"读写和操作数据库":["119.1"],"创建实用的命令行工具辅助前端开发":["119.1"],"网络操作":["119.2"],"线程池里的任务是通过队列和事件循环的机制来执行":["119.2"],"追加和读取":["120.1"],"jpg":["120.3"],"文件写入成功":["120.3"],"pipe":["120.4"],"可以将可读流中的内容":["120.4"],"直接输出到可写流中":["120.4"],"写入成功":["120.6"],"关闭流":["120.7"],"buf":["120.8"],"将":["120.8"],"数据转为字符串":["120.8"],"function":["120.9"],"data":["120.9"],"0xaa":["120.10"],"buf3":["120.10"],"allocunsafe":["120.10"],"如使用何种语法格式引用模块和向外暴露成员":["121.2"],"指向的对象为准":["121.7"],"若失败则报错":["121.13"],"可以从npm":["121.15"],"官网中搜索自己所需要的包":["121.15"],"要快的":["121.16"],"检查镜像源是否下载成功":["121.17"],"删除":["121.18"],"unpublish":["121.18"],"加载失败":["121.21"],"终端报错":["121.21"],"cannot":["121.23"],"find":["121.23"],"module":["121.23"],"xxx":["121.23"],"使用标记删除的形式":["122.3"],"模拟删除的动作":["122.3"],"即在表中设置状态字段":["122.3"],"标记当前的数据是否被删除":["122.3"],"status":["122.3"],"服务器需要完成页面内容的拼接":["122.5"],"若请求比较多":["122.5"],"会对服务器造成一定访问压力":["122.5"],"不利于前后端分离":["122.5"],"开发效率低":["122.5"],"技术能解决":["122.6"],"问题":["122.6"],"其他页面前后端分离的开发模式":["122.7"],"logout":["122.11"],"清空当前客户端的session信息":["122.11"],"destroy":["122.11"],"请求头":["122.13"],"authorization":["122.13"],"字段中":["122.13"],"加上":["122.13"],"bearer":["122.13"],"前缀":["122.13"],"next":["122.14"],"unauthorizederror":["122.14"],"invalid":["122.14"],"unknown":["122.14"],"search":["123.0"],"keyword":["123.0"],"清除缓存并重装依赖项":["123.0"],"并使用其他人已经创建的模块":["124.1"],"的版本号":["124.2"],"则说明已成功安装":["124.2"],"获取有关指定包的信息":["124.3"],"这只是一小部分常用的":["124.3"],"提供了更多的命令和选项":["124.3"],"可以根据需要进行学习和使用":["124.3"],"你可以添加依赖项":["124.4"],"配置脚本":["124.4"],"指定项目的许可证等":["124.4"],"文件中的配置自动下载和安装所需的包":["124.5"],"并确保提供清晰的文档":["124.6"],"合适的版本管理和高质量的代码":["124.6"],"并注册一个账号":["125.1"],"使用方法和示例代码":["125.4"],"上搜索你的包":["125.5"],"并查看它的页面":["125.5"],"publish":["125.6"],"到你的计算机上":["126.1"],"是你要运行的脚本命令的名称":["126.2"],"可以让开发人员创造出各种视觉效果":["127.1"],"上放置和移动元素":["127.3"],"文本":["127.4"],"图片等元素":["127.4"],"来动态地生成绘图元素":["127.5"],"从而实现更加复杂和丰富的视觉效果":["127.5"],"和库集成":["127.6"],"以创造更加丰富和定制化的用户体验":["127.6"],"的动画效果在各种设备与浏览器上都表现良好":["127.7"],"是非常适合移动设备和桌面浏览器上创建动态效果的途径":["127.7"],"的渲染速度可能会变慢":["127.8"],"取消前面的图像变换":["128.0"],"需要使用":["128.1"],"translate":["128.1"],"方法移动画布":["128.1"],"上面代码会显示一个水平倒转的":["128.2"],"高度放大":["128.2"],"倍的":["128.2"],"负向缩放本质是坐标翻转":["128.2"],"所针对的坐标轴就是画布左上角原点的坐标轴":["128.2"],"移动到":["128.4"],"多个":["128.4"],"方法具有叠加效果":["128.4"],"所以第二个矩形的左上角回到":["128.5"],"可以得到不同的效果":["129.0"],"fillrect":["130.1","131.4"],"closepath":["130.2"],"闭合路径之后图形绘制命令又重新指向到上下文中":["130.2"],"不是必需的":["130.2"],"stroke":["131.1","134.1","134.2"],"线条的宽度为":["131.1"],"线条的末端和交点都改成圆角":["131.1"],"并且设置为虚线":["131.1"],"white":["131.2"],"生成辐射样式以后":["131.2"],"用这个样式填充一个矩形":["131.2"],"图像加载成功以后":["131.3"],"生成图像样式":["131.3"],"然后使用这个样式填充指定区域":["131.3"],"第五个参数是半径":["133.3"],"与":["133.3"],"形成一条直线":["133.3"],"形成第二条直线":["133.3"],"弧线就是与这两根直线相切的部分":["133.3"],"arc":["133.6"],"math":["133.6"],"pi":["133.6"],"二等奖":["135.2"],"三等奖":["135.2"],"requestanimationframe":["136.3"],"href":["138.3"],"改变颜色":["138.3"],"onchange":["138.3"],"strokestyle":["138.3"],"destination":["138.3"],"out":["138.3"],"clearrect":["138.3"],"width":["138.4"],"height":["138.4"],"使开发者能够轻松构建高性能的图形界面和游戏":["141.1"],"锚点":["142.2"],"如旋转":["142.2"],"位移的基点":["142.2"],"x":["142.2"],"也是从左上角开始计算":["142.2"],"将矩形添加到舞台":["142.2"],"stage":["142.2","143.1","143.2","145.1","146.3","147.2","147.3","147.4","147.5","149.1","149.2"],"addchild":["142.2","143.1","143.2","145.1","146.3","147.1","147.2","147.3","147.4","147.5"],"set":["143.1","145.1"],"将文字添加到舞台":["143.1"],"anchor":["145.1"],"将精灵添加到舞台":["145.1","146.3"],"sprite":["145.3"],"view":["146.1"],"any":["146.1"],"app":["147.5"],"sprite2":["149.1","149.2"],"创建精灵2":["149.2"],"150px":["150.1"],"这点和":["150.1"],"canvas":["150.1"],"000000":["150.7"],"动画":["151.0"],"animation":["151.0"],"提供了强大的动画支持":["151.0"],"可以实现各种复杂的动画效果":["151.0"],"您可以通过修改场景中的属性或使用插值器来创建动画序列":["151.0"],"交互":["151.0"],"interaction":["151.0"],"可以与用户交互":["151.0"],"通过鼠标":["151.0"],"键盘和触摸事件来控制和操纵":["151.0"],"完整代码":["152.9","152.12","153.5"],"xzy":["153.3"],"pnpm":["154.1"],"echo":["154.2"],"比如你在":["154.9"],"下创建一个":["154.9"],"notes":["154.9"],"文件夹":["154.9"],"那么它的路径就是":["154.9"],"about2":["154.10"],"的分支":["154.11"],"这个分支存放着就是打包好的代码":["154.11"],"settings":["154.11"],"会有一个地址":["154.11"],"这个地址就是部署之后的地址了":["154.11"],"这个项目是实时更新的不需要你重新部署操作":["154.11"],"你要做的就是更新你的":["154.11"],"分支即可":["154.11"]}]'},e={"0.0":{t:"# 关于作者\r",p:`qq:2357490894
微信: !img
`,l:"about/index.html",a:"关于作者"},"1.0":{t:"# 算法\r",p:"\r",l:"algorithms/demo1.html",a:"算法"},"1.1":{t:"123",p:"",l:"algorithms/demo1.html#_123",a:"_123"},"2.0":{t:"# demo2",p:"",l:"algorithms/demo2.html",a:"demo2"},"3.0":{t:"# demo3",p:"",l:"algorithms/demo3.html",a:"demo3"},"4.0":{t:"# 该内容正在努力建设中 ......",p:"",l:"algorithms/index.html",a:"该内容正在努力建设中"},"5.0":{t:"# ES6 class\r",p:`在 ECMAScript 2015（ES6）中，引入了类（Class）的概念，允许我们以一种更面向对象的方式来创建和管理对象。
`,l:"ECMAScript/es6/class.html",a:"es6-class"},"5.1":{t:"创建类\r",p:`使用class关键字可以定义一个类，类名通常首字母大写。
class Person {
  // 构造函数，用于创建对象时进行初始化
  constructor(name, age) {
    th ...`,l:"ECMAScript/es6/class.html#创建类",a:"创建类"},"5.2":{t:"创建对象\r",p:`通过类创建对象时，需要使用new关键字。
const person1 = new Person('John', 30)
const person2 = new Person('Alice', 25)
 ...`,l:"ECMAScript/es6/class.html#创建对象",a:"创建对象"},"5.3":{t:"类的继承\r",p:`ES6 的类支持继承，可以使用extends关键字来继承另一个类的属性和方法。
class Student extends Person {
  constructor(name, age, majo ...`,l:"ECMAScript/es6/class.html#类的继承",a:"类的继承"},"5.4":{t:"方法重写\r",p:`子类可以重写继承自父类的方法。
class Student extends Person {
  // ...

  // 重写父类的方法
  sayHello() {
    console.log ...`,l:"ECMAScript/es6/class.html#方法重写",a:"方法重写"},"5.5":{t:"静态方法\r",p:`使用static关键字定义静态方法，静态方法属于类本身，而不是类的实例。
class MathUtils {
  static add(a, b) {
    return a + b
  }

   ...`,l:"ECMAScript/es6/class.html#静态方法",a:"静态方法"},"5.6":{t:"Getter 和 Setter\r",p:`使用get和set关键字定义属性的读取器和设置器。
class Circle {
  constructor(radius) {
    this._radius = radius
  }

  // ...`,l:"ECMAScript/es6/class.html#getter-和-setter",a:"getter-和-setter"},"6.0":{t:"# ECMAScript 的介绍\r",p:"\r",l:"ECMAScript/es6/index.html",a:"ecmascript-的介绍"},"6.1":{t:"ES6 入门教程\r",p:`阮一峰ECMAScript 6 入门
`,l:"ECMAScript/es6/index.html#es6-入门教程",a:"es6-入门教程"},"6.2":{t:"ECMAScript 简介\r",p:`
ECMAScript（简称 ES）是一种由 ECMA 国际（European Computer Manufacturers Association）制定和维护的脚本语言标准。它是 JavaScrip ...`,l:"ECMAScript/es6/index.html#ecmascript-简介",a:"ecmascript-简介"},"6.3":{t:"ECMAScript 与 JavaScript 的关系？\r",p:`
ECMAScript 简称 ES。ES 是一个脚本语言。注意，是 ES 也是脚本语言。
ES 通常可以看作是 JavaScript 的标准化规范。
ES 只提供了最基本的语法。如：怎样定义变量和函数 ...`,l:"ECMAScript/es6/index.html#ecmascript-与-javascript-的关系",a:"ecmascript-与-javascript-的关系"},"6.4":{t:"ECMAScript 版本发布记录\r",p:`以下是每个 ECMAScript 版本的主要内容概述：


ECMAScript 1 (ES1) - 1997:

第一个 ECMAScript 版本，定义了基本的语法和数据类型，包括变量、操作符、函 ...`,l:"ECMAScript/es6/index.html#ecmascript-版本发布记录",a:"ecmascript-版本发布记录"},"7.0":{t:"# Map 数据结构\r",p:"\r",l:"ECMAScript/es6/Map数据结构.html",a:"map-数据结构"},"7.1":{t:"简述\r",p:`Map 是 ES6 中一种强大的数据结构，它是一种用于存储键值对的集合。
`,l:"ECMAScript/es6/Map数据结构.html#简述",a:"简述"},"7.2":{t:"方法\r",p:`在 ES6 中，Map 数据结构提供了以下常用的方法：

set(key, value): 向 Map 中添加键值对，如果键已存在，则更新对应的值。
get(key): 获取指定键对应的值，如果键不存 ...`,l:"ECMAScript/es6/Map数据结构.html#方法",a:"方法"},"7.3":{t:"对象操作\r",p:"\r",l:"ECMAScript/es6/Map数据结构.html#对象操作",a:"对象操作"},"7.4":{t:"转换\r",p:`var kvArray = [
  ['key1', 'value1'],
  ['key2', 'value2']
]
// 可以将 二维 键值对数组转换 Map 对象

var myMap = n ...`,l:"ECMAScript/es6/Map数据结构.html#转换",a:"转换"},"7.5":{t:"克隆\r",p:`var myMap1 = new Map([
  ['key1', 'value1'],
  ['key2', 'value2']
])
var myMap2 = new Map(myMap1)
/* ...`,l:"ECMAScript/es6/Map数据结构.html#克隆",a:"克隆"},"7.6":{t:"合并\r",p:`var first = new Map([
  [1, 'one'],
  [2, 'two'],
  [3, 'three']
])
var second = new Map([
  [1, 'un ...`,l:"ECMAScript/es6/Map数据结构.html#合并",a:"合并"},"8.0":{t:"# ES6 模块化\r",p:"\r",l:"ECMAScript/es6/module.html",a:"es6-模块化"},"8.1":{t:"引言\r",p:"随着前端技术的不断发展，JavaScript 作为一种脚本语言，其应用范围也越来越广泛。然而，在处理复杂的项目和大规模的代码库时，传统的 JavaScript 代码组织方式会变得不够优雅和高效。为了解 ...",l:"ECMAScript/es6/module.html#引言",a:"引言"},"8.2":{t:"模块化的意义\r",p:`在传统的 JavaScript 代码中，所有的变量、函数和类等都在全局作用域下定义，这样容易导致命名冲突和代码复杂度的增加。尤其在大型项目中，代码量庞大、文件众多，这些问题会变得更为明显。
模块化的意 ...`,l:"ECMAScript/es6/module.html#模块化的意义",a:"模块化的意义"},"8.3":{t:"避免命名冲突\r",p:`在模块中定义的变量、函数和类等都只在当前模块的作用域内有效，不会污染全局命名空间，从而避免了命名冲突的问题。
`,l:"ECMAScript/es6/module.html#避免命名冲突",a:"避免命名冲突"},"8.4":{t:"更好的代码组织和维护\r",p:`模块化将代码分割成多个小块，每个模块都有自己的职责，使得代码的组织和维护变得更加清晰和简单。开发者可以更容易地理解每个模块的功能，并且修改、测试和重构模块都更加方便。
`,l:"ECMAScript/es6/module.html#更好的代码组织和维护",a:"更好的代码组织和维护"},"8.5":{t:"代码重用\r",p:`模块化使得代码可以被多个模块共享和复用，提高了代码的可重用性。当多个模块需要相同的功能时，只需要导入相应的模块，而不需要重复编写代码。
`,l:"ECMAScript/es6/module.html#代码重用",a:"代码重用"},"8.6":{t:"导出模块\r",p:`在 ES6 中，通过使用export关键字，我们可以将模块中的变量、函数或类导出，以便其他模块可以使用它们。
`,l:"ECMAScript/es6/module.html#导出模块",a:"导出模块"},"8.7":{t:"导出变量\r",p:`使用export关键字导出一个变量。
// module1.js
export const name = 'John'

`,l:"ECMAScript/es6/module.html#导出变量",a:"导出变量"},"8.8":{t:"导出函数\r",p:`使用export关键字导出一个函数。
// module1.js
export function sayHello() {
  console.log(\`Hello, \${name}!\`)
}

`,l:"ECMAScript/es6/module.html#导出函数",a:"导出函数"},"8.9":{t:"导出类\r",p:`使用export关键字导出一个类。
// module1.js
export class Person {
  constructor(name) {
    this.name = name
  } ...`,l:"ECMAScript/es6/module.html#导出类",a:"导出类"},"8.10":{t:"导入模块\r",p:`通过使用import关键字，我们可以将其他模块中的变量、函数或类导入到当前模块中。
`,l:"ECMAScript/es6/module.html#导入模块",a:"导入模块"},"8.11":{t:"导入单个变量\r",p:`使用import关键字导入其他模块中的单个变量。
// main.js
import { name } from './module1.js'

console.log(name) // 输出：Joh ...`,l:"ECMAScript/es6/module.html#导入单个变量",a:"导入单个变量"},"8.12":{t:"导入函数\r",p:`使用import关键字导入其他模块中的函数。
// main.js
import { sayHello } from './module1.js'

sayHello() // 输出：Hello, J ...`,l:"ECMAScript/es6/module.html#导入函数",a:"导入函数"},"8.13":{t:"导入类\r",p:`使用import关键字导入其他模块中的类。
// main.js
import { Person } from './module1.js'

const person = new Person('A ...`,l:"ECMAScript/es6/module.html#导入类",a:"导入类"},"8.14":{t:"导入全部内容\r",p:`使用as来导入整个模块的内容，并将其绑定到一个变量上。
// main.js
import as module1 from './module1.js'

console.log(module1.na ...`,l:"ECMAScript/es6/module.html#导入全部内容",a:"导入全部内容"},"8.15":{t:"默认导出\r",p:`除了命名导出，一个模块还可以有一个默认导出，用于导出模块中的主要功能或对象。
`,l:"ECMAScript/es6/module.html#默认导出",a:"默认导出"},"8.16":{t:"默认导出变量\r",p:`// module2.js
const age = 30
export default age

// main.js
import myAge from './module2.js'
console ...`,l:"ECMAScript/es6/module.html#默认导出变量",a:"默认导出变量"},"8.17":{t:"默认导出函数\r",p:`// module2.js
export default function sayHello() {
  console.log('Hello, default export!')
}

// mai ...`,l:"ECMAScript/es6/module.html#默认导出函数",a:"默认导出函数"},"8.18":{t:"默认导出类\r",p:`// module2.js
export default class Person {
  constructor(name) {
    this.name = name
  }

  sayHel ...`,l:"ECMAScript/es6/module.html#默认导出类",a:"默认导出类"},"8.19":{t:"同时使用命名导出和默认导出\r",p:`一个模块可以同时有命名导出和默认导出。
// module3.js
export const name = 'Alice'

export default class {
  // ...
}

// ...`,l:"ECMAScript/es6/module.html#同时使用命名导出和默认导出",a:"同时使用命名导出和默认导出"},"8.20":{t:"重命名导入和导出\r",p:`使用as关键字可以在导入和导出时重命名变量名，避免命名冲突或提高代码可读性。
`,l:"ECMAScript/es6/module.html#重命名导入和导出",a:"重命名导入和导出"},"8.21":{t:"重命名导入\r",p:`// module4.js
export const myName = 'Tom'

// main.js
import { myName as name } from './module4.js'
 ...`,l:"ECMAScript/es6/module.html#重命名导入",a:"重命名导入"},"8.22":{t:"重命名导出\r",p:`// module4.js
const myAge = 25
export { myAge as age }

// main.js
import { age } from './module4.js ...`,l:"ECMAScript/es6/module.html#重命名导出",a:"重命名导出"},"8.23":{t:"动态导入\r",p:`除了静态导入外，ES6 还引入了动态导入，可以在代码运行时根据条件来导入模块。这样可以优化代码加载，提高页面的响应速度。
const condition = true

if (condition)  ...`,l:"ECMAScript/es6/module.html#动态导入",a:"动态导入"},"8.24":{t:"注意事项\r",p:`在使用 ES6 模块化时，需要注意以下几点：
`,l:"ECMAScript/es6/module.html#注意事项",a:"注意事项"},"8.25":{t:"文件扩展名\r",p:`模块文件必须以.js为后缀。
`,l:"ECMAScript/es6/module.html#文件扩展名",a:"文件扩展名"},"8.26":{t:"模块的类型\r",p:`在浏览器环境中，需要在\`


`,l:"ECMAScript/es6/module.html#模块的类型",a:"模块的类型"},"8.27":{t:"严格模式\r",p:`模块中的代码在严格模式下运行，无需显式指定&quot;use strict&quot;。
`,l:"ECMAScript/es6/module.html#严格模式",a:"严格模式"},"8.28":{t:"导入和导出位置\r",p:`导入和导出语句只能位于模块的顶层，不能嵌套在其他块中。
::: tip 总结
ES6 模块化是一种优雅、灵活的 JavaScript 代码组织与交互方式，它允许开发者将代码分割成多个模块，每个模块都有 ...`,l:"ECMAScript/es6/module.html#导入和导出位置",a:"导入和导出位置"},"9.0":{t:"# Set 数据结构\r",p:"\r",l:"ECMAScript/es6/Set数据结构.html",a:"set-数据结构"},"9.1":{t:"简述\r",p:`Set对象是值的集合，你可以按照插入的顺序迭代它的元素。Set 中的元素只会出现一次，即 Set 中的元素是唯一的。
`,l:"ECMAScript/es6/Set数据结构.html#简述",a:"简述"},"9.2":{t:"实例的方法与属性\r",p:"\r",l:"ECMAScript/es6/Set数据结构.html#实例的方法与属性",a:"实例的方法与属性"},"9.3":{t:"add(value) 方法\r",p:`在 Set 对象尾部添加一个元素。返回该 Set 对象。
const s = new Set()
s.add(0)
// 可以连写
s.add(1).add(2).add(2).add(3)
cons ...`,l:"ECMAScript/es6/Set数据结构.html#add-value-方法",a:"add-value-方法"},"9.4":{t:"clear() 方法\r",p:`移除 Set 对象内的所有元素。
const s = new Set()
s.add(0)
s.add(1).add(2).add(2).add(3)
s.clear()
console.log(s) ...`,l:"ECMAScript/es6/Set数据结构.html#clear-方法",a:"clear-方法"},"9.5":{t:"delete(value) 方法\r",p:`移除值为 value 的元素，并返回一个布尔值来表示是否移除成功。Set.prototype.has(value) 会在此之后返回 false。
const s = new Set()
s.add(0 ...`,l:"ECMAScript/es6/Set数据结构.html#delete-value-方法",a:"delete-value-方法"},"9.6":{t:"entries() 方法\r",p:`返回一个新的迭代器对象，该对象包含 Set 对象中的按插入顺序排列的所有元素的值的 [value, value] 数组。为了使这个方法和 Map 对象保持相似，每个值的键和值相等。
const set ...`,l:"ECMAScript/es6/Set数据结构.html#entries-方法",a:"entries-方法"},"9.7":{t:"has(value) 方法\r",p:`返回一个布尔值，表示该值在 Set 中存在与否。
const s = new Set()
s.add(0)
s.add(1).add(2).add(2).add(3)
console.log(s.ha ...`,l:"ECMAScript/es6/Set数据结构.html#has-value-方法",a:"has-value-方法"},"9.8":{t:"values() 方法\r",p:`返回一个新的迭代器对象，该对象包含 Set 对象中的按插入顺序排列的所有元素的值。
const set1 = new Set()
set1.add(42)
set1.add('forty two')
 ...`,l:"ECMAScript/es6/Set数据结构.html#values-方法",a:"values-方法"},"9.9":{t:"keys() 方法\r",p:`与 values() 方法相同，返回一个新的迭代器对象，该对象包含 Set 对象中的按插入顺序排列的所有元素的值。
`,l:"ECMAScript/es6/Set数据结构.html#keys-方法",a:"keys-方法"},"9.10":{t:"size 属性\r",p:`返回 Set 对象中的值的个数
const s = new Set()
s.add(0)
s.add(1).add(2).add(2).add(3)

console.log(s.size) // 4 ...`,l:"ECMAScript/es6/Set数据结构.html#size-属性",a:"size-属性"},"9.11":{t:"使用 Set 实现的一些方法\r",p:"\r",l:"ECMAScript/es6/Set数据结构.html#使用-set-实现的一些方法",a:"使用-set-实现的一些方法"},"9.12":{t:"转换\r",p:`// Array 转 Set
var mySet = new Set(['value1', 'value2', 'value3']) // {&quot;value1&quot;, &quot;val ...`,l:"ECMAScript/es6/Set数据结构.html#转换",a:"转换"},"9.13":{t:"去重\r",p:`var mySet = new Set([1, 2, 2, 1, 3, 4, 4])
;[...mySet] // [1, 2, 3, 4]

`,l:"ECMAScript/es6/Set数据结构.html#去重",a:"去重"},"9.14":{t:"并集\r",p:`var a = new Set([1, 2, 3])
var b = new Set([4, 3, 2])
var union = new Set([...a, ...b]) // {1, 2, 3, ...`,l:"ECMAScript/es6/Set数据结构.html#并集",a:"并集"},"9.15":{t:"交集\r",p:`var a = new Set([1, 2, 3])
var b = new Set([4, 3, 2])

var intersect = new Set([...a].filter((x) =&g ...`,l:"ECMAScript/es6/Set数据结构.html#交集",a:"交集"},"9.16":{t:"差集\r",p:`var a = new Set([1, 2, 3])
var b = new Set([4, 3, 2])
var difference = new Set([...a].filter((x) =&g ...`,l:"ECMAScript/es6/Set数据结构.html#差集",a:"差集"},"10.0":{t:"# ES6 函数的扩展\r",p:"\r",l:"ECMAScript/es6/函数的扩展.html",a:"es6-函数的扩展"},"10.1":{t:"函数参数的默认值\r",p:"\r",l:"ECMAScript/es6/函数的扩展.html#函数参数的默认值",a:"函数参数的默认值"},"10.2":{t:"认识函数参数的默认值\r",p:`调用函数的时候传参了，就用传递的参数；如果没传参，就用默认值
`,l:"ECMAScript/es6/函数的扩展.html#认识函数参数的默认值",a:"认识函数参数的默认值"},"10.3":{t:"函数参数默认值的基本用法\r",p:`// 之前的默认值实现方式
const multiply = (x, y) =&gt; {
  if (typeof y === 'undefined') {
    y = 3
  }
  retu ...`,l:"ECMAScript/es6/函数的扩展.html#函数参数默认值的基本用法",a:"函数参数默认值的基本用法"},"10.4":{t:"默认值的生效条件\r",p:`不传参数，或者明确的传递 undefined 作为参数，只有这两种情况下，默认值才会生效。
注意：null 就是 null，不会使用默认值。
`,l:"ECMAScript/es6/函数的扩展.html#默认值的生效条件",a:"默认值的生效条件"},"10.5":{t:"与解构赋值默认值结合使用\r",p:`参数默认值可以与解构赋值的默认值，结合起来使用。
function foo({ x, y = 5 }) {
  console.log(x, y)
}

foo({}) // undefined 5
 ...`,l:"ECMAScript/es6/函数的扩展.html#与解构赋值默认值结合使用",a:"与解构赋值默认值结合使用"},"10.6":{t:"参数默认值的位置\r",p:`通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际上这个参数是没法省略的。
// 例一
function f(x = 1, ...`,l:"ECMAScript/es6/函数的扩展.html#参数默认值的位置",a:"参数默认值的位置"},"10.7":{t:"函数参数默认值的应用\r",p:`接收很多参数的时候
// 普通时候
const logUser = (username = 'zjr', age = 18, sex = 'male') =&gt; {
  console.log(u ...`,l:"ECMAScript/es6/函数的扩展.html#函数参数默认值的应用",a:"函数参数默认值的应用"},"10.8":{t:"rest 参数\r",p:"\r",l:"ECMAScript/es6/函数的扩展.html#rest-参数",a:"rest-参数"},"10.9":{t:"前言\r",p:"剩余语法（Rest syntax 也可以叫剩余参数）看起来和展开语法完全相同都是使用 ... 的语法糖，不同之处在于剩余参数用于解构数组和对象。从某种意义上说，剩余语法与展开语法是相反的：展开语法将数 ...",l:"ECMAScript/es6/函数的扩展.html#前言",a:"前言"},"10.10":{t:"函数参数\r",p:`在讲解剩余参数前，我们先来看看，剩余参数在函数参数中都解决了哪些问题？为什么会引入剩余参数的概念？
在 ES5 中，函数经常会传入不定参数，在传入不定参数时，ES5 的给出的解决方案是通过 argum ...`,l:"ECMAScript/es6/函数的扩展.html#函数参数",a:"函数参数"},"10.11":{t:"注意事项\r",p:`箭头函数的剩余参数
箭头函数的参数部分即使只有一个剩余参数，也不能省略圆括号。
const add = (...args) =&gt; {};
使用剩余参数替代 arguments 获取实际参数

剩 ...`,l:"ECMAScript/es6/函数的扩展.html#注意事项",a:"注意事项"},"10.12":{t:"剩余参数的应用\r",p:`作为数组的应用：
const add = (...args) =&gt; {
  let sum = 0

  for (let i = 0; i &lt; args.length; i++) {
  ...`,l:"ECMAScript/es6/函数的扩展.html#剩余参数的应用",a:"剩余参数的应用"},"10.13":{t:"小结\r",p:`本节结合了 ES5 函数中的 arguments 对象引入了为什么 ES6 会引入剩余参数的概念，可以看到剩余参数所带来的好处。本节内容可以总结以下几点：

剩余参数是为了能替代函数内部的 argum ...`,l:"ECMAScript/es6/函数的扩展.html#小结",a:"小结"},"10.14":{t:"箭头函数\r",p:`ES6 引入了箭头函数（Arrow Functions），是一种更简洁和灵活的函数定义方式。箭头函数通常与其他 ES6 特性（如解构赋值、模板字符串等）结合使用，使得代码更加现代化和易读。
`,l:"ECMAScript/es6/函数的扩展.html#箭头函数",a:"箭头函数"},"10.15":{t:"基本语法\r",p:`箭头函数的基本语法如下：
const functionName = (parameter1, parameter2, ...) =&gt; {
  // 函数体
  return result;
}; ...`,l:"ECMAScript/es6/函数的扩展.html#基本语法",a:"基本语法"},"10.16":{t:"没有参数或多个参数\r",p:`当箭头函数没有参数或有多个参数时，需要使用括号来表示参数列表。
// 没有参数
const greet = () =&gt; console.log('Hello!')
greet() // 输出：H ...`,l:"ECMAScript/es6/函数的扩展.html#没有参数或多个参数",a:"没有参数或多个参数"},"10.17":{t:"箭头函数与 this\r",p:`箭头函数与传统函数有一个重要的区别：箭头函数没有自己的this，它继承自外层作用域的this。
在传统函数中，this的值是在函数调用时动态确定的，取决于调用方式（比如函数是否作为对象的方法调用、是否 ...`,l:"ECMAScript/es6/函数的扩展.html#箭头函数与-this",a:"箭头函数与-this"},"10.18":{t:"使用注意事项\r",p:`
如果箭头函数只有一个参数，可以省略参数列表的括号。
如果箭头函数的函数体为空或只有一个表达式，可以省略花括号和return关键字。
避免在对象方法中使用箭头函数，因为箭头函数会继承外层作用域的thi ...`,l:"ECMAScript/es6/函数的扩展.html#使用注意事项",a:"使用注意事项"},"10.19":{t:"函数参数的尾逗号\r",p:`ES2017 允许函数的最后一个参数有尾逗号（trailing comma）。
此前，函数定义和调用时，都不允许最后一个参数后面出现逗号。
function clownsEverywhere(para ...`,l:"ECMAScript/es6/函数的扩展.html#函数参数的尾逗号",a:"函数参数的尾逗号"},"10.20":{t:"catch 命令的参数省略\r",p:`JavaScript 语言的try...catch结构，以前明确要求catch命令后面必须跟参数，接受try代码块抛出的错误对象。
try {
  // ...
} catch (err) {
  / ...`,l:"ECMAScript/es6/函数的扩展.html#catch-命令的参数省略",a:"catch-命令的参数省略"},"11.0":{t:"# Js 字符串的常用方法\r",p:"\r",l:"ECMAScript/es6/字符串的常用方法.html",a:"js-字符串的常用方法"},"11.1":{t:"一、操作方法\r",p:`我们也可将字符串常用的操作方法归纳为增、删、改、查，需要知道字符串的特点是一旦创建了，就不可变
`,l:"ECMAScript/es6/字符串的常用方法.html#一、操作方法",a:"一、操作方法"},"11.2":{t:"增\r",p:`这里增的意思并不是说直接增添内容，而是创建字符串的一个副本，再进行操作
除了常用+以及\${}进行字符串拼接之外，还可通过concat
`,l:"ECMAScript/es6/字符串的常用方法.html#增",a:"增"},"11.3":{t:"concat()\r",p:`用于将一个或多个字符串拼接成一个新字符串
let stringValue = 'hello '
let result = stringValue.concat('world')
console.log ...`,l:"ECMAScript/es6/字符串的常用方法.html#concat",a:"concat"},"11.4":{t:"删\r",p:`这里的删的意思并不是说删除原字符串的内容，而是创建字符串的一个副本，再进行操作
常见的有：

slice()
substr()
substring()

这三个方法都返回调用它们的字符串的一个子字符串 ...`,l:"ECMAScript/es6/字符串的常用方法.html#删",a:"删"},"11.5":{t:"改\r",p:`这里改的意思也不是改变原字符串，而是创建字符串的一个副本，再进行操作
常见的有：


trim()、trimLeft()、trimRight()


repeat()


padStart()、pad ...`,l:"ECMAScript/es6/字符串的常用方法.html#改",a:"改"},"11.6":{t:"trim()、trimLeft()、trimRight()\r",p:`删除前、后或前后所有空格符，再返回新的字符串
let stringValue = ' hello world '
let trimmedStringValue = stringValue.trim() ...`,l:"ECMAScript/es6/字符串的常用方法.html#trim-、trimleft-、trimright",a:"trim-、trimleft-、trimright"},"11.7":{t:"repeat()\r",p:`接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果
let stringValue = 'na '
let copyResult = stringValue.repeat(2)  ...`,l:"ECMAScript/es6/字符串的常用方法.html#repeat",a:"repeat"},"11.8":{t:"padStart() padEnd()\r",p:`复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件
没有第二个参数默认空格
let stringValue = 'foo'
console.log(stringValue.padSt ...`,l:"ECMAScript/es6/字符串的常用方法.html#padstart-padend",a:"padstart-padend"},"11.9":{t:"toLowerCase()、 toUpperCase()\r",p:`大小写转化
let stringValue = 'hello world'
console.log(stringValue.toUpperCase()) // &quot;HELLO WORLD&qu ...`,l:"ECMAScript/es6/字符串的常用方法.html#tolowercase-、-touppercase",a:"tolowercase-、-touppercase"},"11.10":{t:"查\r",p:"\r",l:"ECMAScript/es6/字符串的常用方法.html#查",a:"查"},"11.11":{t:"charAt()\r",p:`返回给定索引位置的字符，由传给方法的整数参数指定
let message = 'abcde'
console.log(message.charAt(2)) // &quot;c&quot;

`,l:"ECMAScript/es6/字符串的常用方法.html#charat",a:"charat"},"11.12":{t:"indexOf()\r",p:`从字符串开头去搜索传入的字符串，并返回位置（如果没找到，则返回 -1 ）
let stringValue = 'hello world'
console.log(stringValue.indexOf ...`,l:"ECMAScript/es6/字符串的常用方法.html#indexof",a:"indexof"},"11.13":{t:"startWith()、includes()\r",p:`从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值
let message = 'foobarbaz'
console.log(message.startsWith('foo')) // tr ...`,l:"ECMAScript/es6/字符串的常用方法.html#startwith-、includes",a:"startwith-、includes"},"11.14":{t:"at()\r",p:`at()方法接受一个整数作为参数，返回参数指定位置的字符，支持负索引（即倒数的位置）。
const str = 'hello'
str.at(1) // &quot;e&quot;
str.at(-1 ...`,l:"ECMAScript/es6/字符串的常用方法.html#at",a:"at"},"11.15":{t:"二、转换方法\r",p:"\r",l:"ECMAScript/es6/字符串的常用方法.html#二、转换方法",a:"二、转换方法"},"11.16":{t:"split()\r",p:`把字符串按照指定的分割符，拆分成数组中的每一项
let str = '12+23+34'
let arr = str.split('+') // [12,23,34]

`,l:"ECMAScript/es6/字符串的常用方法.html#split",a:"split"},"11.17":{t:"三、模板匹配方法\r",p:`针对正则表达式，字符串设计了几个方法：

match()
search()
replace()

`,l:"ECMAScript/es6/字符串的常用方法.html#三、模板匹配方法",a:"三、模板匹配方法"},"11.18":{t:"match()\r",p:`接收一个参数，可以是一个正则表达式字符串，也可以是一个RegExp对象，返回数组
let text = 'cat, bat, sat, fat'
let pattern = /.at/
let mat ...`,l:"ECMAScript/es6/字符串的常用方法.html#match",a:"match"},"11.19":{t:"search()\r",p:`接收一个参数，可以是一个正则表达式字符串，也可以是一个RegExp对象，找到则返回匹配索引，否则返回 -1
let text = 'cat, bat, sat, fat'
let pos = text ...`,l:"ECMAScript/es6/字符串的常用方法.html#search",a:"search"},"11.20":{t:"replace()\r",p:`接收两个参数，第一个参数为匹配的内容，第二个参数为替换的元素（可用函数）
let text = 'cat, bat, sat, fat'
let result = text.replace('at', ...`,l:"ECMAScript/es6/字符串的常用方法.html#replace",a:"replace"},"12.0":{t:"# ES6 字符串的扩展\r",p:"\r",l:"ECMAScript/es6/字符串的扩展.html",a:"es6-字符串的扩展"},"12.1":{t:"模板字符串\r",p:"ES6 引入了模板字符串（Template Strings），也被称为模板字面量，是一种方便拼接字符串的新语法。模板字符串使用反引号（`）来包裹字符串，并允许在字符串中插入变量、表达式和多行文本。\n",l:"ECMAScript/es6/字符串的扩展.html#模板字符串",a:"模板字符串"},"12.2":{t:"字符串插值\r",p:"使用${}来在模板字符串中插入变量或表达式，其中${}中的内容会被解析并替换为实际的值。\nconst name = 'John'\nconst age = 30\nconst message = `Hel ...",l:"ECMAScript/es6/字符串的扩展.html#字符串插值",a:"字符串插值"},"12.3":{t:"多行字符串\r",p:`使用模板字符串可以很方便地创建多行文本，不需要使用\\n来手动添加换行符。
const multiLineText = \`
  This is a multi-line text.
  It spans ...`,l:"ECMAScript/es6/字符串的扩展.html#多行字符串",a:"多行字符串"},"12.4":{t:"嵌套模板字符串\r",p:"模板字符串可以嵌套在其他模板字符串中，使得字符串拼接更加灵活。\nconst name = 'Alice'\nconst greeting = `Hello, ${`my name is ${name}` ...",l:"ECMAScript/es6/字符串的扩展.html#嵌套模板字符串",a:"嵌套模板字符串"},"12.5":{t:"带标签的模板字符串\r",p:`可以在模板字符串前添加一个标签函数，这个标签函数将模板字符串的各个部分解析成多个参数，使得我们可以对字符串进行自定义处理。
function tagFunc(strings, ...values) { ...`,l:"ECMAScript/es6/字符串的扩展.html#带标签的模板字符串",a:"带标签的模板字符串"},"13.0":{t:"# ES6 对象的扩展\r",p:"\r",l:"ECMAScript/es6/对象的扩展.html",a:"es6-对象的扩展"},"13.1":{t:"属性的简洁表示法\r",p:`ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。
const foo = 'bar'
const baz = { foo }
baz // {foo: &quo ...`,l:"ECMAScript/es6/对象的扩展.html#属性的简洁表示法",a:"属性的简洁表示法"},"13.2":{t:"方括号语法\r",p:"\r",l:"ECMAScript/es6/对象的扩展.html#方括号语法",a:"方括号语法"},"13.3":{t:"方括号语法的用法\r",p:`const prop = 'age'
const person = {}
person.prop = 18
console.log(person) // { prop: 18 }

// ------ ...`,l:"ECMAScript/es6/对象的扩展.html#方括号语法的用法",a:"方括号语法的用法"},"13.4":{t:"方括号中可以放什么\r",p:`// [值、可以得到值的表达式]
const prop = 'age'
const func = () =&gt; 'age2'
const person = {
  [prop]: 18,
  [f ...`,l:"ECMAScript/es6/对象的扩展.html#方括号中可以放什么",a:"方括号中可以放什么"},"13.5":{t:"方括号语法和点语法的区别\r",p:`
点语法是方括号语法的特殊形式
属性名由数字、字母、下划线以及 $ 构成，并且数字还不能打头的时候可以使用点语法（合法标识符）
能用点语法优先使用点语法

const person = {
    a ...`,l:"ECMAScript/es6/对象的扩展.html#方括号语法和点语法的区别",a:"方括号语法和点语法的区别"},"13.6":{t:"super 关键字\r",p:`我们知道，this关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字super，指向当前对象的原型对象。
const proto = {
  foo: 'hello'
}

cons ...`,l:"ECMAScript/es6/对象的扩展.html#super-关键字",a:"super-关键字"},"13.7":{t:"对象的展开运算符\r",p:"\r",l:"ECMAScript/es6/对象的扩展.html#对象的展开运算符",a:"对象的展开运算符"},"13.8":{t:"展开对象\r",p:`对象不能直接展开，必须在 {} 中展开。
const apple = {
  color: '红色',
  shape: '球形',
  taste: '甜'
}
console.log({ ...a ...`,l:"ECMAScript/es6/对象的扩展.html#展开对象",a:"展开对象"},"13.9":{t:"合并对象\r",p:`const apple = {
  color: '红色',
  shape: '球形',
  taste: '甜'
}

const pen = {
  color: '黑色',
  shape:  ...`,l:"ECMAScript/es6/对象的扩展.html#合并对象",a:"合并对象"},"13.10":{t:"注意事项\r",p:"\r",l:"ECMAScript/es6/对象的扩展.html#注意事项",a:"注意事项"},"13.11":{t:"空对象的展开\r",p:`如果展开一个空对象，则没有任何效果。
console.log({ ...{} }) // {}
console.log({ ...{}, a: 1 }) // { a: 1 }

`,l:"ECMAScript/es6/对象的扩展.html#空对象的展开",a:"空对象的展开"},"13.12":{t:"非对象的展开\r",p:`如果展开的不是对象，则会自动将其转为对象，再将其属性罗列出来（没有属性便为空）。
console.log({ ...1 }) // {}
console.log(new Object(1)) // [ ...`,l:"ECMAScript/es6/对象的扩展.html#非对象的展开",a:"非对象的展开"},"13.13":{t:"字符串的展开\r",p:`如果展开运算符后面是字符串，它会自动转成一个类似数组的对象，因此返回的不是空对象。
// 字符串在对象中展开
console.log({ ...'alex' }) // { '0': 'a', '1' ...`,l:"ECMAScript/es6/对象的扩展.html#字符串的展开",a:"字符串的展开"},"13.14":{t:"数组的展开\r",p:`console.log({ ...[1, 2, 3] }) // { '0': 1, '1': 2, '2': 3 }

`,l:"ECMAScript/es6/对象的扩展.html#数组的展开",a:"数组的展开"},"13.15":{t:"对象中对象属性的展开\r",p:`不会展开对象中的对象属性。
const apple = {
  feature: {
    taste: '甜'
  }
}

const pen = {
  feature: {
    colo ...`,l:"ECMAScript/es6/对象的扩展.html#对象中对象属性的展开",a:"对象中对象属性的展开"},"13.16":{t:"对象展开运算符的应用\r",p:"\r",l:"ECMAScript/es6/对象的扩展.html#对象展开运算符的应用",a:"对象展开运算符的应用"},"13.17":{t:"复制对象\r",p:`const a = { x: 1, y: 2 }
const c = { ...a }
console.log(c, c === a)
// { x: 1, y: 2 } false

`,l:"ECMAScript/es6/对象的扩展.html#复制对象",a:"复制对象"},"13.18":{t:"用户参数和默认参数\r",p:`const logUser = (userParam) =&gt; {
  const defaultPeram = {
    username: 'ZhangSan',
    age: 0,
  ...`,l:"ECMAScript/es6/对象的扩展.html#用户参数和默认参数",a:"用户参数和默认参数"},"13.19":{t:"对象的新增方法\r",p:"\r",l:"ECMAScript/es6/对象的扩展.html#对象的新增方法",a:"对象的新增方法"},"13.20":{t:"Object.is()\r",p:"ES5 比较两个值是否相等，只有两个运算符：相等运算符（==）和严格相等运算符（===）。它们都有缺点，前者会自动转换数据类型，后者的NaN不等于自身，以及+0等于-0。JavaScript 缺乏一种 ...",l:"ECMAScript/es6/对象的扩展.html#object-is",a:"object-is"},"13.21":{t:"Object.assign()\r",p:`Object.assign()方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。
const target = { a: 1 }

const source ...`,l:"ECMAScript/es6/对象的扩展.html#object-assign",a:"object-assign"},"13.22":{t:"Object.keys()、Object.values() 和 Object.entries()\r",p:`Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。
Object.values方法返回一个数组，成员是参数对象自身的（不含继承的 ...`,l:"ECMAScript/es6/对象的扩展.html#object-keys-、object-values-和-object-entries",a:"object-keys-、object-values-和-object-entries"},"14.0":{t:"# ES6 Array 数组新增方法\r",p:"\r",l:"ECMAScript/es6/数组的扩展.html",a:"es6-array-数组新增方法"},"14.1":{t:"Array.of()\r",p:`将参数中所有值作为元素形成数组。
没有参数则返回空数组
Array.of(1, '2', true) // [1, '2', true]

`,l:"ECMAScript/es6/数组的扩展.html#array-of",a:"array-of"},"14.2":{t:"Array.from()\r",p:`将类数组对象或可迭代对象转化为数组。
Array.from([1, 2]) // [1, 2]
Array.from([1, , 3]) // [1, undefined, 3]

`,l:"ECMAScript/es6/数组的扩展.html#array-from",a:"array-from"},"14.3":{t:"转换类数组\r",p:`let arr = Array.from({
  0: '1',
  1: '2',
  2: 3,
  length: 3 // 必须有length属性，没有则返回空数组
})
// ['1', ' ...`,l:"ECMAScript/es6/数组的扩展.html#转换类数组",a:"转换类数组"},"14.4":{t:"转换 map\r",p:`let map = new Map()
map.set('key0', 'value0')
map.set('key1', 'value1')
Array.from(map) // [['key0', ...`,l:"ECMAScript/es6/数组的扩展.html#转换-map",a:"转换-map"},"14.5":{t:"转换 set\r",p:`let set = new Set([1, 2, 3])
Array.from(set) // [1, 2, 3]

`,l:"ECMAScript/es6/数组的扩展.html#转换-set",a:"转换-set"},"14.6":{t:"转换字符串\r",p:`Array.from('abc') // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]

`,l:"ECMAScript/es6/数组的扩展.html#转换字符串",a:"转换字符串"},"14.7":{t:"方法\r",p:"\r",l:"ECMAScript/es6/数组的扩展.html#方法",a:"方法"},"14.8":{t:"find()查找\r",p:`则返回符合条件的第一个元素。
let arr = Array.of(1, 2, 3, 4)
arr.find((item) =&gt; item &gt; 2) // 3

`,l:"ECMAScript/es6/数组的扩展.html#find-查找",a:"find-查找"},"14.9":{t:"findIndex() 查找索引\r",p:`则返回符合条件的第一个元素的索引。
let arr = Array.of(1, 2, 1, 3)
// 参数1：回调函数
// 参数2(可选)：指定回调函数中的 this 值
arr.findInde ...`,l:"ECMAScript/es6/数组的扩展.html#findindex-查找索引",a:"findindex-查找索引"},"14.10":{t:"fill()填充\r",p:`let arr = Array.of(1, 2, 3, 4)
// 参数1：用来填充的值
// 参数2：被填充的起始索引
// 参数3(可选)：被填充的结束索引，默认为数组末尾
console.log ...`,l:"ECMAScript/es6/数组的扩展.html#fill-填充",a:"fill-填充"},"14.11":{t:"copyWithin() 覆盖\r",p:`
开始覆盖的位置索引
复制起始位置
（可选）复制结束位置，默认为结尾

var arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
arr.copyWithin(2,  ...`,l:"ECMAScript/es6/数组的扩展.html#copywithin-覆盖",a:"copywithin-覆盖"},"14.12":{t:"entries() 遍历\r",p:`// 遍历键值对。
for (let [key, value] of ['a', 'b'].entries()) {
  console.log(key, value)
}
// 0 &quot;a& ...`,l:"ECMAScript/es6/数组的扩展.html#entries-遍历",a:"entries-遍历"},"14.13":{t:"keys()遍历键名\r",p:`for (let key of ['a', 'b'].keys()) {
  console.log(key)
}
// 0
// 1

`,l:"ECMAScript/es6/数组的扩展.html#keys-遍历键名",a:"keys-遍历键名"},"14.14":{t:"values()遍历键值\r",p:`for (let value of ['a', 'b'].values()) {
  console.log(value)
}
// &quot;a&quot;
// &quot;b&quot;

`,l:"ECMAScript/es6/数组的扩展.html#values-遍历键值",a:"values-遍历键值"},"14.15":{t:"includes()查找\r",p:`数组是否包含指定值
Set 的 has 方法用于查找值，Map 的 has 方法用于查找键名。
// 参数1：包含的指定值
;[1, 2, 3].includes(1) // true
// 参数2： ...`,l:"ECMAScript/es6/数组的扩展.html#includes-查找",a:"includes-查找"},"14.16":{t:"flat()嵌套数组转一维数\r",p:`console.log([1, [2, 3]].flat()) // [1, 2, 3]

// 指定转换的嵌套层数
console.log([1, [2, [3, [4, 5]]]].flat(2) ...`,l:"ECMAScript/es6/数组的扩展.html#flat-嵌套数组转一维数",a:"flat-嵌套数组转一维数"},"14.17":{t:"flatMap()\r",p:`先遍历元素，再对数组执行 flat() 方法。
// 参数1：遍历函数，遍历函数可接受3个参数：当前元素、当前元素索引、原数组
// 参数2：指定遍历函数中 this 的指向
console.log( ...`,l:"ECMAScript/es6/数组的扩展.html#flatmap",a:"flatmap"},"15.0":{t:"# 解构赋值\r",p:`ES6 引入了解构赋值（Destructuring Assignment），是一种从数组或对象中提取值并赋给变量的语法，使得在处理数据时更加方便和简洁。
当使用解构赋值时，我们可以从数组或对象中提取数 ...`,l:"ECMAScript/es6/解构赋值.html",a:"解构赋值"},"15.1":{t:"数组解构赋值\r",p:`数组解构赋值允许我们根据数组的顺序，将数组的元素提取出来并赋值给变量。
`,l:"ECMAScript/es6/解构赋值.html#数组解构赋值",a:"数组解构赋值"},"15.2":{t:"基本用法\r",p:`const numbers = [1, 2, 3, 4, 5]

const [a, b, c, d, e] = numbers

console.log(a) // 1
console.log(b) ...`,l:"ECMAScript/es6/解构赋值.html#基本用法",a:"基本用法"},"15.3":{t:"忽略不需要的元素\r",p:`我们可以使用逗号将不需要的元素跳过。
const numbers = [1, 2, 3, 4, 5]

const [a, , c, , e] = numbers

console.log(a) // ...`,l:"ECMAScript/es6/解构赋值.html#忽略不需要的元素",a:"忽略不需要的元素"},"15.4":{t:"给变量指定默认值\r",p:`如果数组元素不足以匹配变量的个数，可以为变量指定默认值，避免出现undefined。
const numbers = [1, 2]

const [a, b, c = 3] = numbers

co ...`,l:"ECMAScript/es6/解构赋值.html#给变量指定默认值",a:"给变量指定默认值"},"15.5":{t:"剩余元素\r",p:`使用...语法可以将剩余的数组元素赋值给一个新数组。
const numbers = [1, 2, 3, 4, 5]

const [a, b, ...rest] = numbers

console ...`,l:"ECMAScript/es6/解构赋值.html#剩余元素",a:"剩余元素"},"15.6":{t:"交换变量的值\r",p:`使用解构赋值，可以非常简洁地交换两个变量的值，无需使用第三个变量。
let x = 10
let y = 20

;[x, y] = [y, x]  // 前面必须要加分号

console.log( ...`,l:"ECMAScript/es6/解构赋值.html#交换变量的值",a:"交换变量的值"},"15.7":{t:"对象解构赋值\r",p:`对象解构赋值允许我们根据对象的属性名，将对象的属性值提取出来并赋值给变量。
`,l:"ECMAScript/es6/解构赋值.html#对象解构赋值",a:"对象解构赋值"},"15.8":{t:"基本用法\r",p:`const person = {
  name: 'John',
  age: 30,
  country: 'USA'
}

const { name, age, country } = perso ...`,l:"ECMAScript/es6/解构赋值.html#基本用法",a:"基本用法"},"15.9":{t:"重命名变量\r",p:`我们可以通过在解构时为变量指定新的名称，来实现重命名。
const person = {
  fullName: 'John Doe',
  yearsOld: 30
}

const { fullN ...`,l:"ECMAScript/es6/解构赋值.html#重命名变量",a:"重命名变量"},"15.10":{t:"给变量指定默认值\r",p:`和数组解构一样，可以为对象解构赋值时，为变量指定默认值。
const person = {
  name: 'Alice',
  age: 25
}

const { name, age, count ...`,l:"ECMAScript/es6/解构赋值.html#给变量指定默认值",a:"给变量指定默认值"},"15.11":{t:"嵌套解构\r",p:`对象解构也支持嵌套解构，从嵌套对象中提取值。
const person = {
  name: 'Bob',
  age: 28,
  address: {
    city: 'New York', ...`,l:"ECMAScript/es6/解构赋值.html#嵌套解构",a:"嵌套解构"},"16.0":{t:"# CSS 选择器\r",p:"\r",l:"frontEnd/css3/base/css选择器.html",a:"css-选择器"},"16.1":{t:"通配符选择器\r",p:`
选择页面所有元素
用于清除内外边距

* {
  padding: 0;
  margin: 0;
}

`,l:"frontEnd/css3/base/css选择器.html#通配符选择器",a:"通配符选择器"},"16.2":{t:"元素选择器\r",p:`
通过标签名选择元素
优点：可快速为同类型标签统一设置样式
缺点：不能涉及差异化样式，只能选择全部标签

h1 {
  color: #ccc;
}

`,l:"frontEnd/css3/base/css选择器.html#元素选择器",a:"元素选择器"},"16.3":{t:"类选择器\r",p:`
通过类名选择元素

.container {
  color: pink;
}

`,l:"frontEnd/css3/base/css选择器.html#类选择器",a:"类选择器"},"16.4":{t:"id 选择器\r",p:`
通过元素 id 属性选择元素

#md {
  font-weight: 600;
}

`,l:"frontEnd/css3/base/css选择器.html#id-选择器",a:"id-选择器"},"16.5":{t:"交集选择器\r",p:`&lt;p class=&quot;good&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;good beaauty&quot;&gt;&lt;/p&gt;

/* 语法 ...`,l:"frontEnd/css3/base/css选择器.html#交集选择器",a:"交集选择器"},"16.6":{t:"并集选择器\r",p:`
作用：选中多个选择器对应的元素，又称：分组选择器
语法：选择器1, 选择器2, 选择器3,... 选择器 n {}

h1,
h2,
h3 {
  text-align: center;
}

`,l:"frontEnd/css3/base/css选择器.html#并集选择器",a:"并集选择器"},"16.7":{t:"后代选择器\r",p:`
在所有后代节点中选

ul li {
  color: blue;
}

`,l:"frontEnd/css3/base/css选择器.html#后代选择器",a:"后代选择器"},"16.8":{t:"子选择器\r",p:`
只在亲儿子中选

div &gt; a {
  color: green;
}

`,l:"frontEnd/css3/base/css选择器.html#子选择器",a:"子选择器"},"16.9":{t:"兄弟选择器\r",p:`
选择所有指定元素的相邻后一个兄弟节点

&lt;h1&gt;h1-2&lt;/h1&gt;
&lt;p&gt;p0 被选中&lt;/p&gt;
&lt;div class=&quot;contain ...`,l:"frontEnd/css3/base/css选择器.html#兄弟选择器",a:"兄弟选择器"},"16.10":{t:"伪类选择器\r",p:`
根据元素状态或所处 DOM 结构选择元素

`,l:"frontEnd/css3/base/css选择器.html#伪类选择器",a:"伪类选择器"},"16.11":{t:"动态伪类选择器\r",p:`按这个顺序声明
a:link 链接一开始的样式
a:visited 链接访问后的样式
a:hover 光标经过链接的样式
a:active 链接被按下时的样式

:focus 用于选择获取焦点的表单元 ...`,l:"frontEnd/css3/base/css选择器.html#动态伪类选择器",a:"动态伪类选择器"},"16.12":{t:"结构伪类选择器(C3)\r",p:`


选择符
含义




E:first-child
第一个子元素 E


E:last-child
最后一个子元素 E


E:nth-child(n)
第 n 个子元素 E


E:first- ...`,l:"frontEnd/css3/base/css选择器.html#结构伪类选择器-c3",a:"结构伪类选择器-c3"},"16.13":{t:"属性选择器(C3)\r",p:`


选择符
含义




E[att]
选择具有 att 属性的 E 元素


E[att=&quot;val&quot;]
选择具有 att 属性且属性值等于 val 的 E 元素


E[att ...`,l:"frontEnd/css3/base/css选择器.html#属性选择器-c3",a:"属性选择器-c3"},"16.14":{t:"伪元素选择器(C3)\r",p:`
伪元素选择器利用 CSS 创建新标签元素，而不需要 HTML 标签，从而简化 HTML 结构
before 和 after 创建了一个行内元素，在 DOM 树中无法找到，故为伪元素
必须有 cont ...`,l:"frontEnd/css3/base/css选择器.html#伪元素选择器-c3",a:"伪元素选择器-c3"},"16.15":{t:"相关链接\r",p:`一篇搞清伪类和伪元素
`,l:"frontEnd/css3/base/css选择器.html#相关链接",a:"相关链接"},"17.0":{t:"# Flex 布局 - 灵活的网页布局解决方案\r",p:"Flex 布局（也称为弹性盒子布局）是一种用于创建灵活、自适应的网页布局的 CSS 工具。它通过在父元素上设置display: flex，将子元素定义为弹性项目，使它们能够在主轴和交叉轴上灵活布局。F ...",l:"frontEnd/css3/base/flex.html",a:"flex-布局-灵活的网页布局解决方案"},"17.1":{t:"如何启用 Flex 布局？\r",p:`要启用 Flex 布局，只需在要成为 Flex 容器的父元素上设置display: flex即可：
.container {
  display: flex;
}

一旦容器成为 Flex 容器，其中 ...`,l:"frontEnd/css3/base/flex.html#如何启用-flex-布局",a:"如何启用-flex-布局"},"17.2":{t:"主轴和交叉轴\r",p:`Flex 布局具有一个主轴和一个交叉轴。默认情况下，主轴是水平方向，交叉轴是垂直方向。可以使用flex-direction属性更改主轴方向。
flex-direction 决定 Flex 项目的排列方 ...`,l:"frontEnd/css3/base/flex.html#主轴和交叉轴",a:"主轴和交叉轴"},"17.3":{t:"主轴对齐与交叉轴对齐\r",p:`可以使用justify-content属性控制主轴上的对齐方式，align-items属性控制交叉轴上的对齐方式。
justify-content 定义 Flex 项目在主轴上的对齐方式：

flex ...`,l:"frontEnd/css3/base/flex.html#主轴对齐与交叉轴对齐",a:"主轴对齐与交叉轴对齐"},"17.4":{t:"换行与排列\r",p:`默认情况下，Flex 项目会在一行中排列，如果项目超出了容器的宽度，它们会缩小以适应。可以使用flex-wrap属性来控制项目是否换行。
flex-wrap 指定 Flex 项目是否换行。

nowr ...`,l:"frontEnd/css3/base/flex.html#换行与排列",a:"换行与排列"},"17.5":{t:"flex-flow\r",p:`是flex-direction和flex-wrap的缩写。
.container {
  display: flex;
  flex-flow: row wrap; /* 水平排列，允许换行 */
} ...`,l:"frontEnd/css3/base/flex.html#flex-flow",a:"flex-flow"},"17.6":{t:"弹性增长与缩小\r",p:`
使用flex-grow属性可以控制项目在剩余空间中的放大比例
使用flex-shrink属性可以控制项目在空间不足时的缩小比例。

.item {
  flex-grow: 1; /* 弹性增长因子 ...`,l:"frontEnd/css3/base/flex.html#弹性增长与缩小",a:"弹性增长与缩小"},"17.7":{t:"弹性基准值\r",p:`flex-basis属性定义了项目的基准尺寸，如果没有设置宽度或高度，则会参考该值进行布局：
.item {
  flex-basis: 200px; /* 项目的基准宽度为200像素 */
}

`,l:"frontEnd/css3/base/flex.html#弹性基准值",a:"弹性基准值"},"17.8":{t:"嵌套 Flex 容器\r",p:`在 Flex 项目内部可以再创建一个新的 Flex 容器，嵌套的 Flex 容器有自己的主轴和交叉轴：
.container {
  display: flex;
  .inner-container ...`,l:"frontEnd/css3/base/flex.html#嵌套-flex-容器",a:"嵌套-flex-容器"},"17.9":{t:"多行对齐\r",p:`在多行 Flex 容器中，可以使用align-content属性控制交叉轴上多行的对齐方式。
align-content定义多行 Flex 项目在交叉轴上的对齐方式：

flex-start：多行项目 ...`,l:"frontEnd/css3/base/flex.html#多行对齐",a:"多行对齐"},"17.10":{t:"实现常见布局需求\r",p:`Flex 布局非常适合实现常见的网页布局需求，例如：


居中对齐：通过justify-content和align-items属性实现水平和垂直居中对齐。


两端对齐：使用justify-conte ...`,l:"frontEnd/css3/base/flex.html#实现常见布局需求",a:"实现常见布局需求"},"18.0":{t:"# Grid 布局：现代网页布局的终极解决方案\r",p:"\r",l:"frontEnd/css3/base/grid.html",a:"grid-布局-现代网页布局的终极解决方案"},"18.1":{t:"1. 理解 Grid 布局\r",p:"Grid 布局是一种二维布局模型，可以将网页划分为网格，其中包含了行（rows）和列（columns）。通过将网格容器（Grid Container）分割为网格单元格（Grid Cells），开发者可 ...",l:"frontEnd/css3/base/grid.html#_1-理解-grid-布局",a:"_1-理解-grid-布局"},"18.2":{t:"1.1 网格容器与网格项\r",p:`要使用 Grid 布局，首先需要将一个 HTML 元素定义为网格容器。我们可以通过设置 display: grid; 来实现：
.grid-container {
  display: grid;
} ...`,l:"frontEnd/css3/base/grid.html#_1-1-网格容器与网格项",a:"_1-1-网格容器与网格项"},"18.3":{t:"1.2 行与列\r",p:"Grid 布局的核心是行和列，通过定义网格的行和列，我们可以创造出复杂的网页布局。在网格容器中，通过 grid-template-columns 和 grid-template-rows 属性来定义列 ...",l:"frontEnd/css3/base/grid.html#_1-2-行与列",a:"_1-2-行与列"},"18.4":{t:"1.3 网格线与网格跨度\r",p:`在 Grid 布局中，网格线（Grid Lines）是定义网格单元格边界的线条。水平的网格线定义了行，而垂直的网格线定义了列。我们可以通过指定网格线的名称或索引来定位网格项。
网格跨度（Grid Sp ...`,l:"frontEnd/css3/base/grid.html#_1-3-网格线与网格跨度",a:"_1-3-网格线与网格跨度"},"18.5":{t:"2. Grid 布局的属性详解\r",p:`Grid 布局提供了一系列强大的属性，用于更精确地控制网页布局。以下是一些常用的 Grid 属性：
`,l:"frontEnd/css3/base/grid.html#_2-grid-布局的属性详解",a:"_2-grid-布局的属性详解"},"18.6":{t:"2.1 `grid-template-columns` 和 `grid-template-rows`\r",p:"grid-template-columns 和 grid-template-rows 用于定义网格的列和行的大小和结构。可以指定固定大小（如像素、百分比等），也可以使用 fr 单位表示可用空间的比例分 ...",l:"frontEnd/css3/base/grid.html#_2-1-grid-template-columns-和-grid-template-rows",a:"_2-1-grid-template-columns-和-grid-template-rows"},"18.7":{t:"2.2 `grid-template-areas`\r",p:`grid-template-areas 允许通过指定网格区域的名称来创建更具语义的布局。通过在网格容器中使用网格区域名称，而不是使用行和列属性，可以更清晰地定义布局结构。
.grid-containe ...`,l:"frontEnd/css3/base/grid.html#_2-2-grid-template-areas",a:"_2-2-grid-template-areas"},"18.8":{t:"2.3 `grid-template`\r",p:"grid-template 是 grid-template-columns、grid-template-rows 和 grid-template-areas 的缩写属性。可以通过一个属性同时定义列、行 ...",l:"frontEnd/css3/base/grid.html#_2-3-grid-template",a:"_2-3-grid-template"},"18.9":{t:"2.4 `grid-gap`\r",p:`grid-gap 定义网格项之间的间隔（行和列之间的间距）。可以使用两个值表示行和列的间隔。
.grid-container {
  display: grid;
  grid-gap: 10px 2 ...`,l:"frontEnd/css3/base/grid.html#_2-4-grid-gap",a:"_2-4-grid-gap"},"18.10":{t:"2.5 `grid-column-gap` 和 `grid-row-gap`\r",p:`grid-column-gap 和 grid-row-gap 分别定义网格列和行之间的间隔。与 grid-gap 类似，但允许分别指定列和行的间隔。
.grid-container {
  displ ...`,l:"frontEnd/css3/base/grid.html#_2-5-grid-column-gap-和-grid-row-gap",a:"_2-5-grid-column-gap-和-grid-row-gap"},"18.11":{t:"2.6 `grid-auto-columns` 和 `grid-auto-rows`\r",p:`grid-auto-columns 和 grid-auto-rows 定义了当网格容器中的网格项目无法放入先前定义的网格轨道时，自动创建的额外列和行的大小。可以指定固定大小或使用 fr 单位。
.gr ...`,l:"frontEnd/css3/base/grid.html#_2-6-grid-auto-columns-和-grid-auto-rows",a:"_2-6-grid-auto-columns-和-grid-auto-rows"},"18.12":{t:"2.7 `grid-auto-flow`\r",p:`grid-auto-flow 定义了当网格项目无法放入先前定义的网格轨道时，如何自动创建额外的网格项目。默认值是 row，表示按照行进行放置，也可以设置为 column。
.grid-containe ...`,l:"frontEnd/css3/base/grid.html#_2-7-grid-auto-flow",a:"_2-7-grid-auto-flow"},"18.13":{t:"2.8 `justify-items` 和 `align-items`\r",p:`justify-items 和 align-items 用于在网格项目中定义对齐方式。justify-items 控制项目在列轴上的对齐方式，align-items 控制项目在行轴上的对齐方式。
.g ...`,l:"frontEnd/css3/base/grid.html#_2-8-justify-items-和-align-items",a:"_2-8-justify-items-和-align-items"},"18.14":{t:"2.9 `justify-content` 和 `align-content`\r",p:"justify-content 和 align-content 用于定义网格项目在网格容器内部的对齐方式。justify-content 控制网格项目在列轴上的对齐方式，align-content 控 ...",l:"frontEnd/css3/base/grid.html#_2-9-justify-content-和-align-content",a:"_2-9-justify-content-和-align-content"},"18.15":{t:"2.10 `justify-self` 和 `align-self`\r",p:"justify-self 和 align-self 用于定义单个网格项目自身在网格单元格中的对齐方式。justify-self 控制项目在列轴上的对齐方式，align-self 控制项目在行轴上的对齐 ...",l:"frontEnd/css3/base/grid.html#_2-10-justify-self-和-align-self",a:"_2-10-justify-self-和-align-self"},"18.16":{t:"2.11 `grid-column` 和 `grid-row`\r",p:`grid-column 和 grid-row 用于将网格项目放置在指定的列和行位置。可以使用数字、span 关键字、网格线名称或 auto 值来指定位置。
.grid-item {
  grid-co ...`,l:"frontEnd/css3/base/grid.html#_2-11-grid-column-和-grid-row",a:"_2-11-grid-column-和-grid-row"},"18.17":{t:"3. 创建网格布局\r",p:`使用 Grid 布局，我们可以创建灵活且复杂的网页布局。了解如何创建网格布局对于掌握 Grid 布局至关重要。
`,l:"frontEnd/css3/base/grid.html#_3-创建网格布局",a:"_3-创建网格布局"},"18.18":{t:"3.1 网格轨道的大小和增长\r",p:`网格轨道（Grid Track）是相邻网格线之间的空间，包括行轨道和列轨道。我们可以通过设置网格轨道的大小和增长方式来控制网格布局。
.grid-container {
  display: grid ...`,l:"frontEnd/css3/base/grid.html#_3-1-网格轨道的大小和增长",a:"_3-1-网格轨道的大小和增长"},"18.19":{t:"3.2 网格模板的定义\r",p:`通过使用网格模板（Grid Template），我们可以更加直观地定义网格布局，使得布局结构更加清晰。
.grid-container {
  display: grid;
  grid-templa ...`,l:"frontEnd/css3/base/grid.html#_3-2-网格模板的定义",a:"_3-2-网格模板的定义"},"18.20":{t:"3.3 响应式设计与媒体查询\r",p:`Grid 布局与响应式设计完美结合，通过使用媒体查询（Media Queries），我们可以在不同的屏幕尺寸和设备上应用不同的网格布局。
.grid-container {
  display: gr ...`,l:"frontEnd/css3/base/grid.html#_3-3-响应式设计与媒体查询",a:"_3-3-响应式设计与媒体查询"},"18.21":{t:"4. Grid 布局的实际应用\r",p:`Grid 布局在实际应用中非常强大，可以用于创建各种复杂的网页布局。
`,l:"frontEnd/css3/base/grid.html#_4-grid-布局的实际应用",a:"_4-grid-布局的实际应用"},"18.22":{t:"4.1 简单网页布局\r",p:`Grid 布局可以用于创建简单的网页布局，如标题、导航栏和内容区域。
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head ...`,l:"frontEnd/css3/base/grid.html#_4-1-简单网页布局",a:"_4-1-简单网页布局"},"18.23":{t:"4.2 复杂网页布局\r",p:`Grid 布局可以应用于创建复杂的网页布局，如新闻网站的首页布局。
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head& ...`,l:"frontEnd/css3/base/grid.html#_4-2-复杂网页布局",a:"_4-2-复杂网页布局"},"18.24":{t:"4.3 布局的嵌套与组合\r",p:`Grid 布局可以嵌套使用，从而创建更加复杂和多样化的布局。
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt; ...`,l:"frontEnd/css3/base/grid.html#_4-3-布局的嵌套与组合",a:"_4-3-布局的嵌套与组合"},"18.25":{t:"4.4 网格的动态调整\r",p:`Grid 布局的一个重要特点是网格项目的动态调整。网格项可以根据内容的大小自动调整，也可以通过调整网格容器的大小来实现动态布局。
&lt;!DOCTYPE html&gt;
&lt;html lang ...`,l:"frontEnd/css3/base/grid.html#_4-4-网格的动态调整",a:"_4-4-网格的动态调整"},"18.26":{t:"5. Grid 布局与 Flexbox 的比较\r",p:`Grid 布局和 Flexbox 布局是 CSS 中两种常用的布局模型。它们分别适用于不同的布局需求，并可以结合使用以实现复杂的布局。
`,l:"frontEnd/css3/base/grid.html#_5-grid-布局与-flexbox-的比较",a:"_5-grid-布局与-flexbox-的比较"},"18.27":{t:"5.1 适用场景\r",p:`
Grid 布局：适用于创建二维布局，即同时控制行和列的布局。Grid 布局适用于复杂的网页布局，如主页布局、产品展示页面等。
Flexbox 布局：适用于单一方向的布局，即只控制主轴或交叉轴的布局。 ...`,l:"frontEnd/css3/base/grid.html#_5-1-适用场景",a:"_5-1-适用场景"},"18.28":{t:"5.2 布局的差异与共同点\r",p:`

Grid 布局：可以实现更复杂的布局结构，支持二维布局，可以精确控制网格项的位置和跨度，支持网格区域的命名，更具语义性。


Flexbox 布局：适用于一维布局，支持在主轴上对齐网格项，支持网格 ...`,l:"frontEnd/css3/base/grid.html#_5-2-布局的差异与共同点",a:"_5-2-布局的差异与共同点"},"18.29":{t:"6. 常见问题与最佳实践\r",p:`在使用 Grid 布局时，我们可能会遇到一些常见问题，以下是一些最佳实践和优化建议：
`,l:"frontEnd/css3/base/grid.html#_6-常见问题与最佳实践",a:"_6-常见问题与最佳实践"},"18.30":{t:"6.1 网格项目的排序与定位\r",p:`在 Grid 布局中，网格项的顺序并不一定与它们在 HTML 中的顺序一致。可以使用 order 属性来改变网格项的顺序。
.grid-item:nth-child(3) {
  order: 1;  ...`,l:"frontEnd/css3/base/grid.html#_6-1-网格项目的排序与定位",a:"_6-1-网格项目的排序与定位"},"18.31":{t:"6.2 跨浏览器兼容性\r",p:`虽然 Grid 布局在现代浏览器中得到了很好的支持，但在旧版本的浏览器中可能存在兼容性问题。为了确保网页在不同浏览器中正常显示，可以使用 CSS 前缀或回退方案。
`,l:"frontEnd/css3/base/grid.html#_6-2-跨浏览器兼容性",a:"_6-2-跨浏览器兼容性"},"18.32":{t:"6.3 性能考虑\r",p:"尽管 Grid 布局强大，但在某些情况下可能会对性能产生一定影响。当网页中包含大量网格项和复杂的布局时，可能会导致渲染性能下降。在使用 Grid 布局时，建议合理控制网格项的数量和布局复杂度，以优化网 ...",l:"frontEnd/css3/base/grid.html#_6-3-性能考虑",a:"_6-3-性能考虑"},"18.33":{t:"6.4 最佳实践与优化建议\r",p:`
使用网格模板（grid-template）和网格区域（grid-template-areas）来定义布局，以提高代码的可读性和维护性。
嵌套使用 Grid 布局，实现更复杂的布局需求。
结合 Fle ...`,l:"frontEnd/css3/base/grid.html#_6-4-最佳实践与优化建议",a:"_6-4-最佳实践与优化建议"},"19.0":{t:"# 选择器优先级\r",p:`一般情况下，选择器的优先级为

!important 行内 &gt; ID 选择器 &gt; 类选择器 &gt; 元素选择器 &gt; 通配选择器
相同级别的选择器，显示最后面的样式。

`,l:"frontEnd/css3/base/选择器优先级.html",a:"选择器优先级"},"19.1":{t:"CSS 权重\r",p:`::: tip 详细描述

计算方式：每个选择器，都可以算出一组权重，格式为（a,b,c)


格式: (a, b, c)

a: ID 选择器的个数
b: 类、伪类、属性 选择器的个数
c: 元素、 ...`,l:"frontEnd/css3/base/选择器优先级.html#css-权重",a:"css-权重"},"20.0":{t:"# CSS 水平垂直居中\r",p:"\r",l:"frontEnd/css3/tricks/center.html",a:"css-水平垂直居中"},"20.1":{t:"行内元素\r",p:`
使用 line-height

&lt;div class=&quot;container&quot;&gt;
  &lt;span&gt;123&lt;/span&gt;
&lt;/div&gt; ...`,l:"frontEnd/css3/tricks/center.html#行内元素",a:"行内元素"},"20.2":{t:"块级元素\r",p:`&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;
&lt;/div&gt; ...`,l:"frontEnd/css3/tricks/center.html#块级元素",a:"块级元素"},"20.3":{t:"使用 margin\r",p:`
父元素使用 display: flex

.container {
  display: flex;
  height: 100vh;
}

.box {
  width: 400px;
  hei ...`,l:"frontEnd/css3/tricks/center.html#使用-margin",a:"使用-margin"},"20.4":{t:"使用定位\r",p:"\r",l:"frontEnd/css3/tricks/center.html#使用定位",a:"使用定位"},"20.5":{t:"定宽高\r",p:`.box {
  width: 400px;
  height: 200px;
  background: skyblue;

  position: absolute;
  left: 50%;
  ...`,l:"frontEnd/css3/tricks/center.html#定宽高",a:"定宽高"},"20.6":{t:"不定宽高\r",p:`
使用 transform

.box {
  width: 400px;
  height: 200px;
  background: skyblue;

  position: absolute; ...`,l:"frontEnd/css3/tricks/center.html#不定宽高",a:"不定宽高"},"20.7":{t:"使用 Flex 布局\r",p:`.container {
  display: flex;
  justify-content: center; /* 水平居中 */
  align-items: center; /* 垂直居中 * ...`,l:"frontEnd/css3/tricks/center.html#使用-flex-布局",a:"使用-flex-布局"},"20.8":{t:"使用 Grid 布局\r",p:`.container {
  display: grid;
  place-content: center;
}

`,l:"frontEnd/css3/tricks/center.html#使用-grid-布局",a:"使用-grid-布局"},"21.0":{t:"# CSS 文本溢出隐藏\r",p:`&lt;div class=&quot;content&quot;&gt;12333333333333333333333333&lt;/div&gt;

.content {
  width: 100 ...`,l:"frontEnd/css3/tricks/ellipsis.html",a:"css-文本溢出隐藏"},"21.1":{t:"单行溢出隐藏\r",p:`.content {
  width: 100px; /* 1.设置元素的宽度 */
  border: 1px solid #000;
  white-space: nowrap; /* 2.不换行 ...`,l:"frontEnd/css3/tricks/ellipsis.html#单行溢出隐藏",a:"单行溢出隐藏"},"21.2":{t:"多行溢出隐藏-webkit-内核\r",p:`&lt;div class=&quot;text&quot;&gt;
  这里是多行文本内容，这里是多行文本内容，这里是多行文本内容，这里是多行文本内容，这里是多行文本内容，这里是多行文本内容，这里是 ...`,l:"frontEnd/css3/tricks/ellipsis.html#多行溢出隐藏-webkit-内核",a:"多行溢出隐藏-webkit-内核"},"21.3":{t:"多行溢出隐藏 兼容较好\r",p:`.text {
  /* 1.限定宽度 */
  width: 400px;
  border: solid;
  margin: auto;
  /* 2.限定高度以及行高，并且行高与高度要成比例  ...`,l:"frontEnd/css3/tricks/ellipsis.html#多行溢出隐藏-兼容较好",a:"多行溢出隐藏-兼容较好"},"22.0":{t:"# 滚动条样式\r",p:`/* 滚动条 */
::-webkit-scrollbar {
  /* 纵向 */
  width: 8px;
  /* 横向 */
  height: 8px;
  background-colo ...`,l:"frontEnd/css3/tricks/scrollbar.html",a:"滚动条样式"},"23.0":{t:"# CSS 绘制三角形\r",p:"\r",l:"frontEnd/css3/tricks/triangle.html",a:"css-绘制三角形"},"23.1":{t:"方法 1：使用边框\r",p:`/* 朝上的三角形 */
.arrow-up {
  width: 0;
  height: 0;
  border-left: 5px solid transparent;
  border-rig ...`,l:"frontEnd/css3/tricks/triangle.html#方法-1-使用边框",a:"方法-1-使用边框"},"23.2":{t:"方法 2：使用 clip-path 属性\r",p:`.content {
  width: 175px;
  height: 175px;
  margin: auto;
  object-fit: cover;
  background-image: ...`,l:"frontEnd/css3/tricks/triangle.html#方法-2-使用-clip-path-属性",a:"方法-2-使用-clip-path-属性"},"24.0":{t:"# html5 音视频标签\r",p:`音视频标签中的资源除了可以用 src 属性来指定外，还可以用 source 标签，而且可以指定多个，可以用来解决某些兼容问题。
\`\`\`html

&lt;h2&gt;音频示例&lt;/h2&gt;
& ...`,l:"frontEnd/html5/base/audio_video.html",a:"html5-音视频标签"},"24.1":{t:"音视频频格式的 MIME 类型\r",p:"\r",l:"frontEnd/html5/base/audio_video.html#音视频频格式的-mime-类型",a:"音视频频格式的-mime-类型"},"24.2":{t:"音频格式\r",p:`


Format
MIME-type




MP3
audio/mpeg


Ogg
audio/ogg


Wav
audio/wav



`,l:"frontEnd/html5/base/audio_video.html#音频格式",a:"音频格式"},"24.3":{t:"视频格式\r",p:`


格式
MIME-type




MP4
video/mp4


WebM
video/webm


Ogg
video/ogg



`,l:"frontEnd/html5/base/audio_video.html#视频格式",a:"视频格式"},"24.4":{t:"音视频标签描述\r",p:"\r",l:"frontEnd/html5/base/audio_video.html#音视频标签描述",a:"音视频标签描述"},"24.5":{t:"HTML5 Audio 标签\r",p:`


标签
描述




&lt;audio&gt;
定义了声音内容


&lt;source&gt;
规定了多媒体资源, 可以是多个，在 &lt;video&gt; 与 &lt;audio&gt;标 ...`,l:"frontEnd/html5/base/audio_video.html#html5-audio-标签",a:"html5-audio-标签"},"24.6":{t:"HTML5 Video 标签\r",p:`| 标签 | 描述 |
|&lt;video&gt; |定义一个视频|
|&lt;source&gt;| 定义多种媒体资源,比如 &lt;video&gt; 和&lt;audio&gt;|
|&lt; ...`,l:"frontEnd/html5/base/audio_video.html#html5-video-标签",a:"html5-video-标签"},"24.7":{t:"`<video>`标签的属性\r",p:`


属性
描述




src
要播放的视频的 URL


width/height
视频显示区域的宽高


controls
用户控制界面


poster
视频封面


autoplay
自动播 ...`,l:"frontEnd/html5/base/audio_video.html#video-标签的属性",a:"video-标签的属性"},"24.8":{t:"音视频对象的方法\r",p:`


方法名
作用




play()
播放


psuse()
暂停


load()
重新加载



`,l:"frontEnd/html5/base/audio_video.html#音视频对象的方法",a:"音视频对象的方法"},"24.9":{t:"代码实例\r",p:"\r",l:"frontEnd/html5/base/audio_video.html#代码实例",a:"代码实例"},"24.10":{t:"audio 音频\r",p:`&lt;audio controls&gt;
  &lt;source src=&quot;https://www.runoob.com/try/demo_source/horse.ogg&quot; ...`,l:"frontEnd/html5/base/audio_video.html#audio-音频",a:"audio-音频"},"24.11":{t:"video 视频\r",p:`&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;button onclick=&quot;playPause()&quot;&gt;播放/暂 ...`,l:"frontEnd/html5/base/audio_video.html#video-视频",a:"video-视频"},"25.0":{t:"# HTML - 超文本标记语言\r",p:`HTML（HyperText Markup Language）是一种用于创建网页和网页应用程序的标记语言。它通过使用一系列标签和属性来描述网页的结构和内容，使得网页可以在浏览器中正确显示和呈现。
`,l:"frontEnd/html5/base/index.html",a:"html-超文本标记语言"},"25.1":{t:"HTML 的基本结构\r",p:`HTML 文档由一系列嵌套的 HTML 标签组成。一个基本的 HTML 文档通常包含以下结构：
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
   ...`,l:"frontEnd/html5/base/index.html#html-的基本结构",a:"html-的基本结构"},"25.2":{t:"HTML 标签和元素\r",p:"HTML 标签用于定义网页的结构和内容，它们由尖括号包围。标签通常成对出现，包含开始标签和结束标签，例如&lt;tagname&gt;内容&lt;/tagname&gt;。有些标签是空标签，没有结束标 ...",l:"frontEnd/html5/base/index.html#html-标签和元素",a:"html-标签和元素"},"25.3":{t:"HTML5 的新特性\r",p:"HTML5 引入了许多新特性，如语义化标签（&lt;header&gt;、&lt;footer&gt;、&lt;nav&gt;、&lt;article&gt;等）、多媒体支持（&lt;video&gt ...",l:"frontEnd/html5/base/index.html#html5-的新特性",a:"html5-的新特性"},"25.4":{t:"实践和进阶\r",p:`学习 HTML 最重要的是通过实践来加深理解。创建简单的网页、布局、添加样式和图像，然后逐渐增加复杂性，学习如何使用 CSS 和 JavaScript 与 HTML 结合，从而实现更丰富的用户体验。
 ...`,l:"frontEnd/html5/base/index.html#实践和进阶",a:"实践和进阶"},"26.0":{t:"# 常用标签及用法\r",p:`当描述 HTML 标签时，代码块会被渲染成 HTML 标记，为了避免这种情况，我将在每个代码示例中添加特殊字符，以确保它们不会被渲染。请在复制代码时将特殊字符删除。
`,l:"frontEnd/html5/base/label.html",a:"常用标签及用法"},"26.1":{t:"标题标签 `<h1>` 到 `<h6>`\r",p:`&lt;h1&gt;这是h1级别的标题&lt;/h1&gt;
&lt;h2&gt;这是h2级别的标题&lt;/h2&gt;
&lt;h3&gt;这是h3级别的标题&lt;/h3&gt;
&lt;h4& ...`,l:"frontEnd/html5/base/label.html#标题标签-h1-到-h6",a:"标题标签-h1-到-h6"},"26.2":{t:"段落标签 `<p>`\r",p:`&lt;p&gt;这是一个段落文本。&lt;/p&gt;

`,l:"frontEnd/html5/base/label.html#段落标签-p",a:"段落标签-p"},"26.3":{t:"超链接标签 `<a>`\r",p:`&lt;a href=&quot;https://www.example.com&quot;&gt;点击这里跳转到示例网站&lt;/a&gt;

`,l:"frontEnd/html5/base/label.html#超链接标签-a",a:"超链接标签-a"},"26.4":{t:"图像标签 `<img>`\r",p:`&lt;img src=&quot;example.jpg&quot; alt=&quot;示例图片&quot; /&gt;

`,l:"frontEnd/html5/base/label.html#图像标签-img",a:"图像标签-img"},"26.5":{t:"无序列表和列表项标签 `<ul>` 和 `<li>`\r",p:`&lt;ul&gt;
  &lt;li&gt;列表项1&lt;/li&gt;
  &lt;li&gt;列表项2&lt;/li&gt;
  &lt;li&gt;列表项3&lt;/li&gt;
&lt;/ ...`,l:"frontEnd/html5/base/label.html#无序列表和列表项标签-ul-和-li",a:"无序列表和列表项标签-ul-和-li"},"26.6":{t:"有序列表和列表项标签 `<ol>` 和 `<li>`\r",p:`&lt;ol&gt;
  &lt;li&gt;列表项1&lt;/li&gt;
  &lt;li&gt;列表项2&lt;/li&gt;
  &lt;li&gt;列表项3&lt;/li&gt;
&lt;/ ...`,l:"frontEnd/html5/base/label.html#有序列表和列表项标签-ol-和-li",a:"有序列表和列表项标签-ol-和-li"},"26.7":{t:"容器标签 `<div>`\r",p:`&lt;div&gt;
  这是一个div容器。
  &lt;p&gt;包含一段文本。&lt;/p&gt;
&lt;/div&gt;

`,l:"frontEnd/html5/base/label.html#容器标签-div",a:"容器标签-div"},"26.8":{t:"内联容器标签 `<span>`\r",p:`这是一个
&lt;span style=&quot;color: blue;&quot;&gt;内联容器&lt;/span&gt;
标签。

`,l:"frontEnd/html5/base/label.html#内联容器标签-span",a:"内联容器标签-span"},"26.9":{t:"表格标签 `<table>`、`<tr>`、`<th>` 和 `<td>`\r",p:`&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;表头1&lt;/th&gt;
    &lt;th&gt;表头2&lt;/th&gt;
  &lt;/tr&gt;
  ...`,l:"frontEnd/html5/base/label.html#表格标签-table-、-tr-、-th-和-td",a:"表格标签-table-、-tr-、-th-和-td"},"26.10":{t:"换行标签 `<br>`\r",p:`这是一行文本。
&lt;br /&gt;
这是另一行文本。

`,l:"frontEnd/html5/base/label.html#换行标签-br",a:"换行标签-br"},"26.11":{t:"输入标签 `<input>`\r",p:`&lt;input type=&quot;text&quot; placeholder=&quot;输入文本&quot; /&gt;
&lt;input type=&quot;checkbox&quo ...`,l:"frontEnd/html5/base/label.html#输入标签-input",a:"输入标签-input"},"26.12":{t:"按钮标签 `<button>`\r",p:`&lt;button&gt;点击我&lt;/button&gt;

`,l:"frontEnd/html5/base/label.html#按钮标签-button",a:"按钮标签-button"},"26.13":{t:"表单标签 `<form>`\r",p:`&lt;form action=&quot;/submit&quot; method=&quot;post&quot;&gt;
  &lt;label for=&quot;username&quot; ...`,l:"frontEnd/html5/base/label.html#表单标签-form",a:"表单标签-form"},"26.14":{t:"标题、脚注和导航标签 `<header>`、`<footer>` 和 `<nav>`\r",p:`&lt;header&gt;
  &lt;h1&gt;网站标题&lt;/h1&gt;
  &lt;nav&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=& ...`,l:"frontEnd/html5/base/label.html#标题、脚注和导航标签-header-、-footer-和-nav",a:"标题、脚注和导航标签-header-、-footer-和-nav"},"26.15":{t:"多媒体标签 `<video>` 和 `<audio>`\r",p:`&lt;video src=&quot;example.mp4&quot; controls&gt;您的浏览器不支持视频播放。&lt;/video&gt;

&lt;audio src=&quot;e ...`,l:"frontEnd/html5/base/label.html#多媒体标签-video-和-audio",a:"多媒体标签-video-和-audio"},"27.0":{t:"# HTML 标签\r",p:`HTML 标签用于定义网页的结构和内容，它们由尖括号包围。HTML 标签可以分为两类：块级标签和内联标签。
`,l:"frontEnd/html5/base/tag.html",a:"html-标签"},"27.1":{t:"块级标签（Block-level Elements）\r",p:`块级标签通常用于创建页面的大型结构和组织，它们会单独占据一行，并且在前后都会产生换行。常见的块级标签包括：

&lt;div&gt;：最通用的容器标签，用于将一组元素包裹在一起，方便样式和布局控制。
 ...`,l:"frontEnd/html5/base/tag.html#块级标签-block-level-elements",a:"块级标签-block-level-elements"},"27.2":{t:"内联标签（Inline Elements）\r",p:`内联标签用于包裹文本的一部分，它们不会独占一行，而是按照文本的自然流动排列。常见的内联标签包括：

&lt;a&gt;：锚链接标签，用于创建超链接到其他网页或文档。
&lt;span&gt;：内联容器 ...`,l:"frontEnd/html5/base/tag.html#内联标签-inline-elements",a:"内联标签-inline-elements"},"27.3":{t:"嵌套标签\r",p:`HTML 标签可以嵌套在其他标签中，形成树状的结构。例如，可以将一段文本包裹在&lt;p&gt;标签中，然后在&lt;div&gt;标签中包裹这个&lt;p&gt;标签，从而形成嵌套的关系。
&lt; ...`,l:"frontEnd/html5/base/tag.html#嵌套标签",a:"嵌套标签"},"27.4":{t:"属性\r",p:`HTML 标签可以包含属性，属性用于为标签提供额外的信息或设置。属性以键值对的形式出现，放在标签的开始标签中。例如，&lt;a&gt;标签用href属性来指定链接地址：
&lt;a href=&quo ...`,l:"frontEnd/html5/base/tag.html#属性",a:"属性"},"27.5":{t:"自定义标签\r",p:`HTML5 允许开发者创建自定义的标签，这些标签可能在 HTML 规范中没有定义，但可以在特定的应用中使用。自定义标签应以data-为前缀，避免与未来 HTML 版本中的新标签冲突。
例如：
&lt; ...`,l:"frontEnd/html5/base/tag.html#自定义标签",a:"自定义标签"},"28.0":{t:"# input\r",p:"\r",l:"frontEnd/html5/problem/input.html",a:"input"},"28.1":{t:'input type="password" 浏览器自动填充账号和密码\r',p:"&lt;a-input type=&quot;password&quot; placeholder=&quot;请输入登录密码&quot; v-model=&quot;model.password&q ...",l:"frontEnd/html5/problem/input.html#input-type-password-浏览器自动填充账号和密码",a:"input-type-password-浏览器自动填充账号和密码"},"29.0":{t:"# React - 用于构建现代 Web 应用程序的 JavaScript 库\r",p:`
官方网址

`,l:"frontEnd/react/index.html",a:"react-用于构建现代-web-应用程序的-javascript-库"},"29.1":{t:"简介\r",p:"React 是由 Facebook 开源的 JavaScript 库，用于构建用户界面。它专注于构建高性能、可维护且可复用的 UI 组件，使开发者能够轻松构建交互性的用户界面。React 是单向数据流 ...",l:"frontEnd/react/index.html#简介",a:"简介"},"29.2":{t:"React 的特点\r",p:"\r",l:"frontEnd/react/index.html#react-的特点",a:"react-的特点"},"29.3":{t:"1. 组件化开发\r",p:"React 引入了组件化开发的概念，将复杂的用户界面划分为独立的组件，每个组件具有自己的状态和行为。这种组件化的开发模式使得代码更易于维护、复用和测试。开发者可以将大型应用程序拆分为小的、独立的组件， ...",l:"frontEnd/react/index.html#_1-组件化开发",a:"_1-组件化开发"},"29.4":{t:"2. 虚拟 DOM\r",p:"React 采用了虚拟 DOM 技术，它在内存中维护了一个虚拟的 DOM 树，用于表示真实 DOM 的结构。当组件的状态发生变化时，React 会通过比较新旧虚拟 DOM 树的差异，找出需要更新的部分 ...",l:"frontEnd/react/index.html#_2-虚拟-dom",a:"_2-虚拟-dom"},"29.5":{t:"3. 单向数据流\r",p:"React 采用了单向数据流的数据管理模式，即数据只能从父组件流向子组件，子组件无法直接修改父组件的数据。这种单向数据流的模式使得数据流动更加可控，减少了数据的混乱和不一致，从而提高了应用程序的可维护 ...",l:"frontEnd/react/index.html#_3-单向数据流",a:"_3-单向数据流"},"29.6":{t:"4. 生态系统丰富\r",p:"React 拥有一个庞大的生态系统，有众多优秀的第三方库和工具，可以帮助开发者更高效地构建 Web 应用程序。比如 React Router 用于实现前端路由，Redux 用于管理应用程序的状态，Ax ...",l:"frontEnd/react/index.html#_4-生态系统丰富",a:"_4-生态系统丰富"},"29.7":{t:"核心概念\r",p:`在学习 React 时，我们需要掌握以下几个核心概念：
`,l:"frontEnd/react/index.html#核心概念",a:"核心概念"},"29.8":{t:"1. 组件（Components）\r",p:"组件是 React 中最重要的概念之一，它是构建用户界面的基本单元。每个组件封装了特定的功能和状态，可以在其他组件中重复使用。组件可以是函数组件或类组件，函数组件是一种简单的声明式组件，类组件具有更多 ...",l:"frontEnd/react/index.html#_1-组件-components",a:"_1-组件-components"},"29.9":{t:"2. JSX（JavaScript XML）\r",p:"JSX 是一种类似 HTML 的语法扩展，允许在 JavaScript 代码中编写类似 HTML 的标记。通过 JSX，我们可以以一种更直观的方式描述组件的结构和样式，使得代码更易读和理解。在 Rea ...",l:"frontEnd/react/index.html#_2-jsx-javascript-xml",a:"_2-jsx-javascript-xml"},"29.10":{t:"3. Props（属性）\r",p:"Props 是 React 中用于组件之间通信的机制。通过 props，父组件可以向子组件传递数据或方法。这种单向数据流的机制使得 React 组件更加可预测和易于维护。在子组件中，我们可以通过 pr ...",l:"frontEnd/react/index.html#_3-props-属性",a:"_3-props-属性"},"29.11":{t:"4. State（状态）\r",p:"State 是 React 组件内部管理的可变数据。当组件的状态发生变化时，React 会自动重新渲染组件以反映最新的状态。状态是类组件中的一个特殊对象，可以通过 this.state 来访问和更新。 ...",l:"frontEnd/react/index.html#_4-state-状态",a:"_4-state-状态"},"29.12":{t:"5. 生命周期\r",p:"React 组件具有不同的生命周期阶段，包括组件的挂载、更新和卸载阶段。在这些生命周期方法中，我们可以执行特定的操作，如初始化组件、发送网络请求、清理资源等。生命周期方法允许我们在组件不同阶段执行相应 ...",l:"frontEnd/react/index.html#_5-生命周期",a:"_5-生命周期"},"29.13":{t:"6. 事件处理\r",p:"React 允许处理用户的交互事件，如点击、输入等，并对其进行响应。通过事件处理函数，我们可以执行特定的操作，如更新组件的状态、发送网络请求、处理用户输入等。在 React 中，事件处理和原生 DOM ...",l:"frontEnd/react/index.html#_6-事件处理",a:"_6-事件处理"},"29.14":{t:"7. 条件渲染\r",p:`条件渲染是根据条件来决定是否渲染组件或显示不同的内容。通过条件语句（如 if 和三元表达式）来控制组件的渲染逻辑。条件渲染使得我们可以根据不同的情况展示不同的 UI，实现动态和灵活的界面展示。
`,l:"frontEnd/react/index.html#_7-条件渲染",a:"_7-条件渲染"},"29.15":{t:"8. 列表渲染\r",p:"在 React 中，我们可以使用 map 方法遍历数组，并将数组的每个元素渲染成相应的组件。列表渲染允许动态地渲染多个相同类型的组件，实现列表展示的功能。通过列表渲染，我们可以轻松地展示数据列表，如商 ...",l:"frontEnd/react/index.html#_8-列表渲染",a:"_8-列表渲染"},"29.16":{t:"9. 表单处理\r",p:"处理用户输入的表单数据是常见的任务。在 React 中，我们可以通过对表单元素的事件监听和状态更新，来收集用户的输入并实时更新组件的状态。React 提供了一些方便的组件来处理表单数据，如 input ...",l:"frontEnd/react/index.html#_9-表单处理",a:"_9-表单处理"},"29.17":{t:"10. 状态提升\r",p:`状态提升是一种在 React 中共享状态的技术，允许将共享的状态提升到共同的父组件，实现组件之间的数据共享。通过状态提升，我们可以在多个组件之间共享数据和状态，并保持数据的一致性和同步性。
`,l:"frontEnd/react/index.html#_10-状态提升",a:"_10-状态提升"},"29.18":{t:"11. 高阶组件（HOC）\r",p:"高阶组件是一个函数，用于在 React 中实现组件的复用逻辑。HOC 可以增强组件的功能，使得代码更具可复用性和灵活性。通过 HOC，我们可以将通用的逻辑封装成函数，然后将该函数应用到多个组件中，从而 ...",l:"frontEnd/react/index.html#_11-高阶组件-hoc",a:"_11-高阶组件-hoc"},"29.19":{t:"12. 上下文（Context）\r",p:"React 的上下文允许在组件树中共享数据，而不必通过 props 一层层传递。上下文提供了一种便捷的方式来在组件之间共享数据，尤其对于跨多层级的组件共享数据非常有用。然而，上下文的使用需要谨慎，避免 ...",l:"frontEnd/react/index.html#_12-上下文-context",a:"_12-上下文-context"},"29.20":{t:"13. Hooks\r",p:"Hooks 是 React 16.8 引入的新特性，用于在函数组件中添加状态、副作用和其他 React 特性。通过 Hooks，我们可以在函数组件中使用类组件的功能，如状态管理、生命周期方法等，从而使 ...",l:"frontEnd/react/index.html#_13-hooks",a:"_13-hooks"},"29.21":{t:"React 环境搭建\r",p:`利用 React 来写一个 Hello World
`,l:"frontEnd/react/index.html#react-环境搭建",a:"react-环境搭建"},"29.22":{t:"react.js 和 react-dom.js\r",p:`为了通过 React 写一个 Hello World 程序，我们需要先安装几个包：


react.js: React 的核心库。这个包，是专门用来创建 React 组件、组件生命周期等。


rea ...`,l:"frontEnd/react/index.html#react-js-和-react-dom-js",a:"react-js-和-react-dom-js"},"29.23":{t:"方式一：本地引入相关的 js 库\r",p:`入门的时候，我们建议采取方式一。
如果是本地引入的话，可以这样写：
&lt;!-- 引入React相关的js库 --&gt;




如果是通过 CDN 的方式引入的话，可以使用网站 https:// ...`,l:"frontEnd/react/index.html#方式一-本地引入相关的-js-库",a:"方式一-本地引入相关的-js-库"},"29.24":{t:"方式二：脚手架\r",p:`
使用 vite 创建， 选择 React

npm init vite@latest

main.jsx:
import React from 'react'
import ReactDOM fro ...`,l:"frontEnd/react/index.html#方式二-脚手架",a:"方式二-脚手架"},"30.0":{t:"# React JSX 语法 - 构建动态 UI 的魔法\r",p:"\r",l:"frontEnd/react/JSX.html",a:"react-jsx-语法-构建动态-ui-的魔法"},"30.1":{t:"简介\r",p:"JSX（JavaScript XML）是 React 的一种特殊语法扩展，它允许我们在 JavaScript 代码中编写类似于 HTML 的标记，从而使得构建动态 UI 变得更加直观和简洁。JSX 在 ...",l:"frontEnd/react/JSX.html#简介",a:"简介"},"30.2":{t:"JSX 原理\r",p:"JSX 并不是直接由浏览器理解的语法，而是通过 Babel 等工具进行转换后，再变成普通的 JavaScript 代码。这个转换过程将 JSX 转换为React.createElement()函数的调 ...",l:"frontEnd/react/JSX.html#jsx-原理",a:"jsx-原理"},"30.3":{t:"基本语法规则\r",p:"\r",l:"frontEnd/react/JSX.html#基本语法规则",a:"基本语法规则"},"30.4":{t:"1. 标签\r",p:`在 JSX 中，我们可以像写 HTML 标签一样写 React 组件的标签。标签可以是 HTML 标签，也可以是自定义的 React 组件。
const element = &lt;div&gt;JS ...`,l:"frontEnd/react/JSX.html#_1-标签",a:"_1-标签"},"30.5":{t:"2. 属性\r",p:`在 JSX 中，可以通过属性来传递数据给组件。属性的写法与 HTML 标签类似，使用key=value的形式。
const element = &lt;input type=&quot;text&qu ...`,l:"frontEnd/react/JSX.html#_2-属性",a:"_2-属性"},"30.6":{t:"3. 嵌套\r",p:`JSX 支持标签的嵌套，可以将多个标签组合在一起形成复杂的 UI 结构。
const element = (
  &lt;div&gt;
    &lt;h1&gt;JSX Syntax&lt;/h1 ...`,l:"frontEnd/react/JSX.html#_3-嵌套",a:"_3-嵌套"},"30.7":{t:"4. 表达式\r",p:`在 JSX 中，可以在大括号内使用 JavaScript 表达式。这样可以在 UI 中插入动态的内容。
const name = 'John'
const element = &lt;p&gt;Hel ...`,l:"frontEnd/react/JSX.html#_4-表达式",a:"_4-表达式"},"30.8":{t:"5. 注释\r",p:`JSX 支持在大括号内使用 JavaScript 注释。
const element = (
  &lt;div&gt;
    {/This is a comment/}
    &lt;h1&gt ...`,l:"frontEnd/react/JSX.html#_5-注释",a:"_5-注释"},"30.9":{t:"JSX 中的组件化开发\r",p:"JSX 在 React 中的最大价值在于支持组件化开发。通过组件化开发，我们可以将 UI 拆分成独立的、可复用的组件，从而使得代码结构更加清晰和易于维护。组件是 React 中最基本的概念之一，也是构 ...",l:"frontEnd/react/JSX.html#jsx-中的组件化开发",a:"jsx-中的组件化开发"},"30.10":{t:"函数组件\r",p:`函数组件是一种简单的声明式组件，它是一个纯函数，接受一个 props 对象作为参数，并返回一个描述 UI 的 React 元素。
function Welcome(props) {
  return  ...`,l:"frontEnd/react/JSX.html#函数组件",a:"函数组件"},"30.11":{t:"类组件\r",p:`类组件是一种功能更强大的组件，它是一个 ES6 类，继承自React.Component，并且具有状态和生命周期方法。
class Welcome extends React.Component {
 ...`,l:"frontEnd/react/JSX.html#类组件",a:"类组件"},"30.12":{t:"组件的使用\r",p:`使用组件时，我们可以像使用 HTML 标签一样使用组件的标签。将属性传递给组件，可以在组件中获取这些属性并进行相应的渲染。
const element = &lt;Welcome name=&quot ...`,l:"frontEnd/react/JSX.html#组件的使用",a:"组件的使用"},"30.13":{t:"JSX 中的条件渲染\r",p:`JSX 支持条件渲染，即根据条件来决定是否渲染组件或显示不同的内容。可以使用 JavaScript 的条件语句（如 if 和三元表达式）来控制组件的渲染逻辑。
`,l:"frontEnd/react/JSX.html#jsx-中的条件渲染",a:"jsx-中的条件渲染"},"30.14":{t:"使用 if 语句\r",p:`function Greeting(props) {
  if (props.isLoggedIn) {
    return &lt;h1&gt;Welcome back!&lt;/h1&gt;
  ...`,l:"frontEnd/react/JSX.html#使用-if-语句",a:"使用-if-语句"},"30.15":{t:"使用三元表达式\r",p:`function Greeting(props) {
  return props.isLoggedIn ? &lt;h1&gt;Welcome back!&lt;/h1&gt; : &lt;h1&g ...`,l:"frontEnd/react/JSX.html#使用三元表达式",a:"使用三元表达式"},"30.16":{t:"JSX 中的列表渲染\r",p:`在 React 中，我们经常需要渲染数据列表，比如商品列表、评论列表等。JSX 提供了方便的方式来实现列表渲染。
`,l:"frontEnd/react/JSX.html#jsx-中的列表渲染",a:"jsx-中的列表渲染"},"30.17":{t:"使用 map 方法\r",p:`function ProductList(props) {
  const products = props.products
  return (
    &lt;ul&gt;
      {pro ...`,l:"frontEnd/react/JSX.html#使用-map-方法",a:"使用-map-方法"},"30.18":{t:"JSX 中的表单处理\r",p:`处理用户输入的表单数据是 Web 应用程序中的常见任务。在 React 中，我们可以通过对表单元素的事件监听和状态更新，来收集用户的输入并实时更新组件的状态。
class FormExample ex ...`,l:"frontEnd/react/JSX.html#jsx-中的表单处理",a:"jsx-中的表单处理"},"30.19":{t:"JSX 中的状态提升\r",p:`状态提升是一种在 React 中共享状态的技术，允许将共享的状态提升到共同的父组件，实现组件之间的数据共享。
function TemperatureConverter() {
  const [ce ...`,l:"frontEnd/react/JSX.html#jsx-中的状态提升",a:"jsx-中的状态提升"},"30.20":{t:"JSX 中的高阶组件（HOC）\r",p:`高阶组件（HOC）是一种在 React 中实现组件的复用逻辑的技术。HOC 是一个函数，接受一个组件作为参数，并返回一个新的组件。
function withLogger(WrappedCompone ...`,l:"frontEnd/react/JSX.html#jsx-中的高阶组件-hoc",a:"jsx-中的高阶组件-hoc"},"30.21":{t:"JSX 中的上下文（Context）\r",p:`React 的上下文允许在组件树中共享数据，而不必通过 props 一层层传递。上下文提供了一种便捷的方式来在组件之间共享数据，尤其对于跨多层级的组件共享数据非常有用。
const ThemeCont ...`,l:"frontEnd/react/JSX.html#jsx-中的上下文-context",a:"jsx-中的上下文-context"},"30.22":{t:"JSX 中的 Hooks\r",p:`Hooks 是 React 16.8 引入的新特性，用于在函数组件中添加状态、副作用和其他 React 特性。通过 Hooks，我们可以在函数组件中使用类组件的功能，如状态管理、生命周期方法等。
fu ...`,l:"frontEnd/react/JSX.html#jsx-中的-hooks",a:"jsx-中的-hooks"},"31.0":{t:"# React 组件 — 生命周期\r",p:"React 生命周期是指组件在不同阶段经历的一系列方法调用，这些方法允许我们在特定时间点执行代码，控制组件的行为，并进行必要的操作。理解 React 生命周期对于优化性能、处理副作用以及在开发过程中更 ...",l:"frontEnd/react/lifecycle.html",a:"react-组件-—-生命周期"},"31.1":{t:"生命周期阶段\r",p:`React 生命周期可以分为三个阶段：组件创建、组件更新和组件销毁。


组件创建阶段：

constructor：组件被创建时调用，用于初始化状态和绑定方法。
static getDerivedSt ...`,l:"frontEnd/react/lifecycle.html#生命周期阶段",a:"生命周期阶段"},"31.2":{t:"组件创建阶段\r",p:"\r",l:"frontEnd/react/lifecycle.html#组件创建阶段",a:"组件创建阶段"},"31.3":{t:"constructor\r",p:`constructor 是组件创建阶段的第一个方法，它在组件实例被创建时调用。在 constructor 中，我们可以初始化组件的状态（state）和绑定方法。
class MyComponent e ...`,l:"frontEnd/react/lifecycle.html#constructor",a:"constructor"},"31.4":{t:"static getDerivedStateFromProps\r",p:"static getDerivedStateFromProps 是组件创建和更新阶段的一个静态方法，在组件每次渲染之前都会被调用。它接收 props 和 state 作为参数，并返回一个对象来更新 s ...",l:"frontEnd/react/lifecycle.html#static-getderivedstatefromprops",a:"static-getderivedstatefromprops"},"31.5":{t:"render\r",p:`render 是组件创建阶段的第三个方法，它用于渲染组件的内容。在 render 方法中，我们应该返回一个 React 元素，用于描述组件的 UI 结构。
class MyComponent exte ...`,l:"frontEnd/react/lifecycle.html#render",a:"render"},"31.6":{t:"componentDidMount\r",p:"componentDidMount 是组件创建阶段的最后一个方法，它在组件挂载到 DOM 后调用。在 componentDidMount 中，我们可以进行一些副作用操作，比如发送网络请求、订阅事件、操 ...",l:"frontEnd/react/lifecycle.html#componentdidmount",a:"componentdidmount"},"31.7":{t:"组件更新阶段\r",p:"\r",l:"frontEnd/react/lifecycle.html#组件更新阶段",a:"组件更新阶段"},"31.8":{t:"static getDerivedStateFromProps\r",p:`在组件更新阶段，static getDerivedStateFromProps 的作用和在组件创建阶段是一样的，用于根据 props 更新 state。
class MyComponent exten ...`,l:"frontEnd/react/lifecycle.html#static-getderivedstatefromprops",a:"static-getderivedstatefromprops"},"31.9":{t:"shouldComponentUpdate\r",p:"shouldComponentUpdate 是组件更新阶段的第二个方法，它在组件更新之前调用。在 shouldComponentUpdate 中，我们可以根据新的 props 或 state 判断是否 ...",l:"frontEnd/react/lifecycle.html#shouldcomponentupdate",a:"shouldcomponentupdate"},"31.10":{t:"getSnapshotBeforeUpdate\r",p:"getSnapshotBeforeUpdate 是组件更新阶段的第四个方法，它在 render 之后、更新之前调用。它接收 prevProps 和 prevState 作为参数，并返回一个值，该值将作 ...",l:"frontEnd/react/lifecycle.html#getsnapshotbeforeupdate",a:"getsnapshotbeforeupdate"},"31.11":{t:"componentDidUpdate\r",p:"componentDidUpdate 是组件更新阶段的最后一个方法，它在组件更新之后调用。在 componentDidUpdate 中，我们可以进行一些副作用操作，比如发送网络请求、订阅事件、操作 D ...",l:"frontEnd/react/lifecycle.html#componentdidupdate",a:"componentdidupdate"},"31.12":{t:"组件销毁阶段\r",p:"\r",l:"frontEnd/react/lifecycle.html#组件销毁阶段",a:"组件销毁阶段"},"31.13":{t:"componentWillUnmount\r",p:"componentWillUnmount 是组件销毁阶段的唯一一个方法，在组件即将被销毁时调用。在 componentWillUnmount 中，我们应该进行一些清理操作，比如取消订阅、清除定时器、释 ...",l:"frontEnd/react/lifecycle.html#componentwillunmount",a:"componentwillunmount"},"32.0":{t:"# React Props（属性）\r",p:"在 React 中，组件是构建用户界面的基本单位。每个组件可以接收外部传入的数据，这些数据被称为 Props（属性）。Props 允许我们向组件传递信息，使组件能够根据外部数据的变化进行渲染和展示不同 ...",l:"frontEnd/react/props.html",a:"react-props-属性"},"32.1":{t:"什么是 Props？\r",p:"Props 是 React 中用于向组件传递数据的一种机制。它是“Properties”的缩写，意为属性。每个 React 组件都可以通过 Props 接收数据，这些数据可以来自组件的父组件或者外部环 ...",l:"frontEnd/react/props.html#什么是-props",a:"什么是-props"},"32.2":{t:"Props 的使用\r",p:"\r",l:"frontEnd/react/props.html#props-的使用",a:"props-的使用"},"32.3":{t:"1. 传递 Props\r",p:`在父组件中，可以通过在子组件上设置属性来传递 Props。例如：
// 父组件
class ParentComponent extends React.Component {
  render() { ...`,l:"frontEnd/react/props.html#_1-传递-props",a:"_1-传递-props"},"32.4":{t:"2. 默认 Props\r",p:`有时候，我们希望在未传递某个 Props 时，组件能够使用一个默认值。这时可以通过设置组件的 defaultProps 来实现。
class MyComponent extends React.Com ...`,l:"frontEnd/react/props.html#_2-默认-props",a:"_2-默认-props"},"32.5":{t:"3. 使用解构赋值简化 Props\r",p:`在组件中访问 Props 时，可以使用解构赋值来简化代码。
class MyComponent extends React.Component {
  render() {
    const { n ...`,l:"frontEnd/react/props.html#_3-使用解构赋值简化-props",a:"_3-使用解构赋值简化-props"},"32.6":{t:"Props 的值类型\r",p:`Props 可以接收各种类型的数据，包括字符串、数字、布尔值、数组、对象等。React 组件会根据传递的 Props 的值类型进行相应的渲染。
`,l:"frontEnd/react/props.html#props-的值类型",a:"props-的值类型"},"32.7":{t:"1. 字符串类型\r",p:`class MyComponent extends React.Component {
  render() {
    return &lt;p&gt;Hello, {this.props.name ...`,l:"frontEnd/react/props.html#_1-字符串类型",a:"_1-字符串类型"},"32.8":{t:"2. 数字类型\r",p:`class MyComponent extends React.Component {
  render() {
    return &lt;p&gt;Age: {this.props.age}&l ...`,l:"frontEnd/react/props.html#_2-数字类型",a:"_2-数字类型"},"32.9":{t:"3. 布尔值类型\r",p:`class MyComponent extends React.Component {
  render() {
    return &lt;p&gt;Is Active: {this.props. ...`,l:"frontEnd/react/props.html#_3-布尔值类型",a:"_3-布尔值类型"},"32.10":{t:"4. 数组类型\r",p:`class MyComponent extends React.Component {
  render() {
    return (
      &lt;ul&gt;
        {this ...`,l:"frontEnd/react/props.html#_4-数组类型",a:"_4-数组类型"},"32.11":{t:"5. 对象类型\r",p:`class MyComponent extends React.Component {
  render() {
    return (
      &lt;div&gt;
        &lt; ...`,l:"frontEnd/react/props.html#_5-对象类型",a:"_5-对象类型"},"32.12":{t:"Props 的传递规则\r",p:`在 React 中，Props 的传递是自上而下的，即数据只能从父组件传递到子组件，而不能从子组件传递到父组件或者兄弟组件之间传递。这样的设计有助于保持组件之间的独立性和可预测性。
`,l:"frontEnd/react/props.html#props-的传递规则",a:"props-的传递规则"},"32.13":{t:"Props 的不可变性\r",p:`在 React 中，Props 是只读的，组件本身无法修改 Props 的值。这样的设计有助于维护组件的数据流向，避免对 Props 进行意外的修改，从而使组件行为更加可预测和稳定。
`,l:"frontEnd/react/props.html#props-的不可变性",a:"props-的不可变性"},"32.14":{t:"Props 验证\r",p:"为了确保组件接收到正确的 Props，我们可以使用 PropTypes 来对 Props 进行验证。PropTypes 是 React 提供的一种机制，用于对组件的 Props 进行类型检查。在开发过 ...",l:"frontEnd/react/props.html#props-验证",a:"props-验证"},"32.15":{t:"默认 Props\r",p:`有时候，我们希望在未传递某个 Props 时，组件能够使用一个默认值。这时可以通过设置组件的 defaultProps 来实现。
import PropTypes from 'prop-types'
 ...`,l:"frontEnd/react/props.html#默认-props",a:"默认-props"},"33.0":{t:"# React 路由 - 实现单页应用的导航\r",p:"\r",l:"frontEnd/react/router.html",a:"react-路由-实现单页应用的导航"},"33.1":{t:"什么是 React 路由？\r",p:"React 路由是指在 React 应用中实现页面之间导航的技术。它允许我们在单页应用中切换不同的页面视图，而无需重新加载整个页面。相比传统多页应用，单页应用（Single Page Applicat ...",l:"frontEnd/react/router.html#什么是-react-路由",a:"什么是-react-路由"},"33.2":{t:"React Router 的基本概念\r",p:"\r",l:"frontEnd/react/router.html#react-router-的基本概念",a:"react-router-的基本概念"},"33.3":{t:"1. 路由\r",p:`路由是 React Router 中的核心概念之一。它表示一个特定的 URL 路径和对应的页面组件。当用户访问该路径时，React Router 会渲染对应的页面组件。
React Router 使用 ...`,l:"frontEnd/react/router.html#_1-路由",a:"_1-路由"},"33.4":{t:"2. 嵌套路由\r",p:`嵌套路由是指在一个页面组件中嵌套另一个页面组件，并且这些页面组件具有各自的 URL 路径。
React Router 允许我们在一个页面组件中使用嵌套的 &lt;Route&gt; 组件，从而实现页面 ...`,l:"frontEnd/react/router.html#_2-嵌套路由",a:"_2-嵌套路由"},"33.5":{t:"3. 路由参数\r",p:`路由参数允许我们在 URL 路径中传递参数，并将参数传递给页面组件进行处理。例如，我们可以通过路由参数在 URL 中传递一个特定的 ID，然后在页面组件中根据 ID 加载对应的数据。
React Ro ...`,l:"frontEnd/react/router.html#_3-路由参数",a:"_3-路由参数"},"33.6":{t:"4. 路由链接\r",p:`路由链接是用于在页面中生成导航链接的组件。它允许用户点击链接来切换不同的页面视图，而无需进行页面的完全刷新。
React Router 提供了 &lt;Link&gt; 组件来创建路由链接，通过 to ...`,l:"frontEnd/react/router.html#_4-路由链接",a:"_4-路由链接"},"33.7":{t:"5. 编程式导航\r",p:`除了使用路由链接进行页面导航外，还可以通过编程式导航的方式实现页面切换。编程式导航允许我们在组件中使用 JavaScript 来手动触发页面的切换。
React Router 提供了 history  ...`,l:"frontEnd/react/router.html#_5-编程式导航",a:"_5-编程式导航"},"33.8":{t:"安装 React Router\r",p:`要开始使用 React Router，首先需要在项目中安装 React Router 的依赖。可以使用 npm 或 yarn 进行安装：
npm install react-router-dom

或 ...`,l:"frontEnd/react/router.html#安装-react-router",a:"安装-react-router"},"33.9":{t:"使用 React Router\r",p:`一旦安装了 React Router 的依赖，我们就可以在项目中开始使用它了。以下是使用 React Router 实现导航的基本步骤：
`,l:"frontEnd/react/router.html#使用-react-router",a:"使用-react-router"},"33.10":{t:"1. 创建路由组件\r",p:`首先，我们需要创建几个页面组件，它们将用于显示不同的页面视图。在 React 中，每个页面都是一个独立的组件，可以使用函数组件或类组件来定义。
// Home.js
import React from ...`,l:"frontEnd/react/router.html#_1-创建路由组件",a:"_1-创建路由组件"},"33.11":{t:"2. 定义路由\r",p:`接下来，我们需要在应用中定义路由。可以在顶层组件（通常是 App.js）中使用 &lt;Route&gt; 组件来定义路由。
// App.js
import React from 'react'
i ...`,l:"frontEnd/react/router.html#_2-定义路由",a:"_2-定义路由"},"33.12":{t:"3. 渲染页面\r",p:`最后，在顶层组件中渲染 &lt;Route&gt; 组件，从而实现页面导航。
// index.js
import React from 'react'
import ReactDOM from 'r ...`,l:"frontEnd/react/router.html#_3-渲染页面",a:"_3-渲染页面"},"33.13":{t:"嵌套路由\r",p:`有时候，我们希望在一个页面中显示其他页面的内容，这就需要使用嵌套路由。React Router 允许我们在一个页面组件中定义嵌套的 &lt;Route&gt; 组件。
// App.js
import ...`,l:"frontEnd/react/router.html#嵌套路由",a:"嵌套路由"},"33.14":{t:"路由参数\r",p:`在实际开发中，我们经常需要从 URL 中获取参数来加载不同的数据或进行页面的定向。React Router 允许我们在 URL 路径中定义参数，并将参数传递给页面组件。
// App.js
impor ...`,l:"frontEnd/react/router.html#路由参数",a:"路由参数"},"33.15":{t:"路由链接和导航\r",p:`React Router 提供了 &lt;Link&gt; 组件和编程式导航来实现页面之间的导航。
// App.js
import React from 'react'
import { Brows ...`,l:"frontEnd/react/router.html#路由链接和导航",a:"路由链接和导航"},"34.0":{t:"# React State（状态）\r",p:"在 React 中，State（状态）是组件用于存储和管理可变数据的一种机制。State 允许我们在组件内部保存数据，并在数据发生变化时重新渲染组件。通过使用 State，我们可以创建交互性和动态性的 ...",l:"frontEnd/react/state.html",a:"react-state-状态"},"34.1":{t:"什么是 State？\r",p:"在 React 中，State 是组件内部的一种特殊变量，用于存储组件的可变数据。每个 React 组件都可以拥有自己的 State，并在需要时对其进行更新。State 是 React 组件的一部分， ...",l:"frontEnd/react/state.html#什么是-state",a:"什么是-state"},"34.2":{t:"State 的使用\r",p:"\r",l:"frontEnd/react/state.html#state-的使用",a:"state-的使用"},"34.3":{t:"1. 初始化 State\r",p:`在 React 中，通常在组件的构造函数中初始化 State。可以通过this.state属性来定义组件的 State。
class MyComponent extends React.Compone ...`,l:"frontEnd/react/state.html#_1-初始化-state",a:"_1-初始化-state"},"34.4":{t:"2. 更新 State\r",p:`要更新 State 的值，可以使用this.setState()方法。这样做的原因是为了确保组件在更新 State 后能够重新渲染，并显示更新后的数据。
class MyComponent exten ...`,l:"frontEnd/react/state.html#_2-更新-state",a:"_2-更新-state"},"34.5":{t:"3. 异步更新 State\r",p:"需要注意的是，this.setState()方法是异步的。这意味着在调用this.setState()后，并不会立即更新 State 的值，而是会放入一个更新队列中，等待 React 合并更新后再进行 ...",l:"frontEnd/react/state.html#_3-异步更新-state",a:"_3-异步更新-state"},"34.6":{t:"State 的不可变性\r",p:"在 React 中，State 是不可变的，意味着我们不应该直接修改 State 的值。如果直接修改 State 的值，React 无法检测到 State 的变化，并进行重新渲染。为了正确地更新 St ...",l:"frontEnd/react/state.html#state-的不可变性",a:"state-的不可变性"},"34.7":{t:"State 的传递\r",p:"在 React 中，State 通常是在组件的父组件中定义的，并通过 Props 传递给子组件。这样的设计有助于保持组件之间的独立性和可预测性。当 State 需要在多个组件中共享时，可以将 Stat ...",l:"frontEnd/react/state.html#state-的传递",a:"state-的传递"},"35.0":{t:"# React 列表渲染\r",p:`在 React 中，列表渲染是一种常见的技术，用于动态地生成列表元素。列表渲染使我们能够根据数据数组来动态生成多个相似的元素，并将它们渲染到用户界面上。
`,l:"frontEnd/react/列表渲染.html",a:"react-列表渲染"},"35.1":{t:"什么是列表渲染？\r",p:"列表渲染是指根据数据数组来动态生成多个相似的元素，并将它们渲染到用户界面上。在 React 中，我们通常使用 JavaScript 的数组和 map() 方法来实现列表渲染。通过列表渲染，我们可以轻松 ...",l:"frontEnd/react/列表渲染.html#什么是列表渲染",a:"什么是列表渲染"},"35.2":{t:"使用 map() 方法实现列表渲染\r",p:"在 React 中，使用数组的 map() 方法是实现列表渲染的常见方式。map() 方法可以遍历数组的每个元素，并根据每个元素生成一个新的元素。下面是一个简单的示例，演示了如何使用 map() 方法 ...",l:"frontEnd/react/列表渲染.html#使用-map-方法实现列表渲染",a:"使用-map-方法实现列表渲染"},"35.3":{t:"条件渲染列表元素\r",p:`在实际应用中，我们可能需要根据特定条件来渲染列表元素。在 React 中，我们可以在 map() 方法中使用条件语句来实现条件渲染。下面是一个示例，演示了如何根据数字的奇偶性来渲染不同样式的列表项：
 ...`,l:"frontEnd/react/列表渲染.html#条件渲染列表元素",a:"条件渲染列表元素"},"35.4":{t:"列表渲染和数据来源\r",p:"在实际应用中，数据通常来自于父组件的状态或从外部 API 获取。在 React 中，我们可以通过 props 将数据传递给子组件，然后在子组件中使用 map() 方法来实现列表渲染。下面是一个示例，演 ...",l:"frontEnd/react/列表渲染.html#列表渲染和数据来源",a:"列表渲染和数据来源"},"35.5":{t:"添加列表项\r",p:`在实际应用中，我们可能需要通过用户的交互来添加新的列表项。在 React 中，我们可以通过修改数据数组的方式来实现添加列表项。下面是一个示例，演示了如何通过按钮点击来添加新的列表项：
import R ...`,l:"frontEnd/react/列表渲染.html#添加列表项",a:"添加列表项"},"35.6":{t:"列表渲染的最佳实践\r",p:`

使用 key 属性：在使用 map() 方法渲染列表项时，每个列表项都应该有一个唯一的 key 属性。key 属性帮助 React 正确地更新 DOM，并提高列表渲染的性能。


使用 Fragm ...`,l:"frontEnd/react/列表渲染.html#列表渲染的最佳实践",a:"列表渲染的最佳实践"},"36.0":{t:"# React 条件渲染\r",p:`在 React 中，条件渲染是一种根据特定条件决定是否渲染组件或组件的一部分的技术。条件渲染使我们能够根据不同的状态或数据来展示不同的内容，从而实现动态和交互性的用户界面。
`,l:"frontEnd/react/条件渲染.html",a:"react-条件渲染"},"36.1":{t:"什么是条件渲染？\r",p:"条件渲染是指根据特定条件来决定是否渲染组件或组件的一部分。在 React 中，我们可以使用 JavaScript 的条件语句（如 if、else、switch）或三元表达式来实现条件渲染。条件渲染允许 ...",l:"frontEnd/react/条件渲染.html#什么是条件渲染",a:"什么是条件渲染"},"36.2":{t:"使用 if...else 实现条件渲染\r",p:`在 React 中，我们可以使用 JavaScript 的 if...else 语句来实现条件渲染。下面是一个简单的示例，演示了如何根据条件来渲染不同的内容：
import React from 'r ...`,l:"frontEnd/react/条件渲染.html#使用-if-else-实现条件渲染",a:"使用-if-else-实现条件渲染"},"36.3":{t:"使用三元表达式实现条件渲染\r",p:"除了使用 if...else，我们还可以使用 JavaScript 的三元表达式（ternary operator）来实现条件渲染。三元表达式是一种简洁的写法，用于在一行代码中根据条件返回不同的值。下 ...",l:"frontEnd/react/条件渲染.html#使用三元表达式实现条件渲染",a:"使用三元表达式实现条件渲染"},"36.4":{t:"使用逻辑与（&&）实现条件渲染\r",p:"除了 if...else 和三元表达式，我们还可以使用逻辑与（&amp;&amp;）来实现条件渲染。逻辑与在 JavaScript 中是一种短路逻辑，当第一个条件为真时，会返回第二个条件；否则，返回第 ...",l:"frontEnd/react/条件渲染.html#使用逻辑与-实现条件渲染",a:"使用逻辑与-实现条件渲染"},"36.5":{t:"使用条件运算符实现条件渲染\r",p:"除了上述方法，我们还可以使用条件运算符（也称为逻辑或 nullish coalescing 运算符）来实现条件渲染。条件运算符是 ES2020 中的新特性，用于简化条件判断。下面是一个使用条件运算符的 ...",l:"frontEnd/react/条件渲染.html#使用条件运算符实现条件渲染",a:"使用条件运算符实现条件渲染"},"36.6":{t:"条件渲染的最佳实践\r",p:`

使用适合场景的条件渲染方法：根据具体的场景和需求选择合适的条件渲染方法，例如使用 if...else、三元表达式、逻辑与、条件运算符等。


抽象逻辑：如果条件渲染逻辑较复杂，建议将其抽象成函数或 ...`,l:"frontEnd/react/条件渲染.html#条件渲染的最佳实践",a:"条件渲染的最佳实践"},"37.0":{t:"# Vue.js\r",p:"\r",l:"frontEnd/vue/base/index.html",a:"vue-js"},"37.1":{t:"简介\r",p:`Vue.js 是一套用于构建用户界面的渐进式 JavaScript 框架。它允许您将应用程序划分为可复用的组件，并以声明式的方式构建数据驱动的 UI。
`,l:"frontEnd/vue/base/index.html#简介",a:"简介"},"37.2":{t:"开始\r",p:"\r",l:"frontEnd/vue/base/index.html#开始",a:"开始"},"37.3":{t:"安装 Vue.js\r",p:`您可以通过直接引入 Vue.js 脚本文件或使用 npm（Node Package Manager）安装 Vue.js。
&lt;!-- 直接引入Vue.js脚本 --&gt;


或者
# 使用np ...`,l:"frontEnd/vue/base/index.html#安装-vue-js",a:"安装-vue-js"},"37.4":{t:"第一个 Vue.js 应用\r",p:`&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;My First Vue App&lt;/title&gt;
   ...`,l:"frontEnd/vue/base/index.html#第一个-vue-js-应用",a:"第一个-vue-js-应用"},"37.5":{t:"数据绑定\r",p:"\r",l:"frontEnd/vue/base/index.html#数据绑定",a:"数据绑定"},"37.6":{t:"插值表达式\r",p:`使用双花括号（Mustache 语法）进行数据插值，将数据绑定到 HTML 模板中。
&lt;div&gt;
  &lt;p&gt;{{ message }}&lt;/p&gt;
&lt;/div&g ...`,l:"frontEnd/vue/base/index.html#插值表达式",a:"插值表达式"},"37.7":{t:"指令\r",p:`Vue.js 提供了一些指令，用于在模板中实现特定的行为。

v-bind：将元素属性与 Vue 实例的数据绑定。

&lt;img v-bind:src=&quot;imageSrc&quot; / ...`,l:"frontEnd/vue/base/index.html#指令",a:"指令"},"37.8":{t:"条件渲染\r",p:"\r",l:"frontEnd/vue/base/index.html#条件渲染",a:"条件渲染"},"37.9":{t:"`v-if` 和 `v-else`\r",p:`根据条件渲染元素。
&lt;div v-if=&quot;isVisible&quot;&gt;This is visible.&lt;/div&gt;
&lt;div v-else&gt;This  ...`,l:"frontEnd/vue/base/index.html#v-if-和-v-else",a:"v-if-和-v-else"},"37.10":{t:"`v-show`\r",p:`根据条件显示或隐藏元素。
&lt;div v-show=&quot;isVisible&quot;&gt;This is visible.&lt;/div&gt;

`,l:"frontEnd/vue/base/index.html#v-show",a:"v-show"},"37.11":{t:"列表渲染\r",p:"\r",l:"frontEnd/vue/base/index.html#列表渲染",a:"列表渲染"},"37.12":{t:"`v-for`\r",p:`循环渲染列表中的元素。
&lt;ul&gt;
  &lt;li v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;{{ item. ...`,l:"frontEnd/vue/base/index.html#v-for",a:"v-for"},"37.13":{t:"事件处理\r",p:`使用v-on指令监听 DOM 事件，并执行相应的方法。
&lt;button v-on:click=&quot;handleClick&quot;&gt;Click Me&lt;/button&gt; ...`,l:"frontEnd/vue/base/index.html#事件处理",a:"事件处理"},"37.14":{t:"表单输入绑定\r",p:`使用v-model指令实现表单输入和 Vue 实例数据的双向绑定。
&lt;input v-model=&quot;message&quot; type=&quot;text&quot; /&gt;
 ...`,l:"frontEnd/vue/base/index.html#表单输入绑定",a:"表单输入绑定"},"37.15":{t:"组件\r",p:"\r",l:"frontEnd/vue/base/index.html#组件",a:"组件"},"37.16":{t:"定义组件\r",p:`// 定义一个名为 'my-component' 的组件
Vue.component('my-component', {
  template: '&lt;div&gt;{{ message }}&l ...`,l:"frontEnd/vue/base/index.html#定义组件",a:"定义组件"},"37.17":{t:"使用组件\r",p:`&lt;div id=&quot;app&quot;&gt;
  &lt;my-component&gt;&lt;/my-component&gt;
&lt;/div&gt;

`,l:"frontEnd/vue/base/index.html#使用组件",a:"使用组件"},"37.18":{t:"生命周期钩子\r",p:`


钩子函数
阶段
描述




beforeCreate
创建前
在实例被创建之前调用。此时，组件的数据观察和事件还未初始化。


created
创建后
在实例创建完成后调用。可以在这里进行数据 ...`,l:"frontEnd/vue/base/index.html#生命周期钩子",a:"生命周期钩子"},"38.0":{t:"# Vue Router 学习指南\r",p:"\r",l:"frontEnd/vue/base/vue-router.html",a:"vue-router-学习指南"},"38.1":{t:"1. 简介\r",p:`
Vue Router 是 Vue.js 官方提供的路由管理器，用于实现单页面应用（SPA）的路由功能。
学习 Vue Router 之前，确保您对 Vue.js 有一定的了解。

`,l:"frontEnd/vue/base/vue-router.html#_1-简介",a:"_1-简介"},"38.2":{t:"2. 安装\r",p:`
使用 npm 或 yarn 安装 Vue Router 到您的 Vue.js 项目中。

# 使用npm
npm install vue-router

# 使用yarn
yarn add vue- ...`,l:"frontEnd/vue/base/vue-router.html#_2-安装",a:"_2-安装"},"38.3":{t:"3. 基本用法\r",p:`
创建一个 Vue Router 实例并将其与 Vue 应用关联。
定义路由表，包含不同路径与对应组件的映射。

import { createRouter, createWebHistory } f ...`,l:"frontEnd/vue/base/vue-router.html#_3-基本用法",a:"_3-基本用法"},"38.4":{t:"4. 路由视图\r",p:`
在 Vue 组件中使用 &lt;router-view&gt; 标签来渲染路由匹配到的组件。

&lt;template&gt;
  &lt;div&gt;
    &lt;router-view& ...`,l:"frontEnd/vue/base/vue-router.html#_4-路由视图",a:"_4-路由视图"},"38.5":{t:"5. 路由导航\r",p:`
使用&lt;router-link&gt;组件创建导航链接，以在单页面应用中切换不同的路由。

&lt;template&gt;
  &lt;div&gt;
    &lt;router-link  ...`,l:"frontEnd/vue/base/vue-router.html#_5-路由导航",a:"_5-路由导航"},"38.6":{t:"6. 路由传参\r",p:`
使用路由参数传递数据给组件。

const routes = [{ path: '/user/:id', component: User }]

&lt;router-link :to=&quot; ...`,l:"frontEnd/vue/base/vue-router.html#_6-路由传参",a:"_6-路由传参"},"38.7":{t:"7. 嵌套路由\r",p:`
在组件中定义嵌套的子路由。

const routes = [
  {
    path: '/parent',
    component: Parent,
    children: [{ pa ...`,l:"frontEnd/vue/base/vue-router.html#_7-嵌套路由",a:"_7-嵌套路由"},"38.8":{t:"8. 路由守卫\r",p:`
使用路由守卫来处理导航前后的逻辑，例如登录验证、权限控制等。

router.beforeEach((to, from, next) =&gt; {
  // 检查用户是否登录，进行相关逻辑处理
  ...`,l:"frontEnd/vue/base/vue-router.html#_8-路由守卫",a:"_8-路由守卫"},"38.9":{t:"9. 动态路由\r",p:`
使用动态路由来根据不同条件加载组件。

const routes = [{ path: '/category/:id', component: Category }]

`,l:"frontEnd/vue/base/vue-router.html#_9-动态路由",a:"_9-动态路由"},"38.10":{t:"10. 路由懒加载\r",p:`
使用路由懒加载来优化页面加载性能。

const routes = [
  {
    path: '/lazy',
    component: () =&gt; import('./compon ...`,l:"frontEnd/vue/base/vue-router.html#_10-路由懒加载",a:"_10-路由懒加载"},"38.11":{t:" ",p:"",l:"frontEnd/vue/base/vue-router.html#",a:""},"38.12":{t:"11. 更多配置\r",p:`
了解更多高级配置，如路由别名、重定向、404 页面等。
--&gt;

`,l:"frontEnd/vue/base/vue-router.html#_11-更多配置",a:"_11-更多配置"},"39.0":{t:"# vuex\r",p:`
Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它是一个集中式的状态管理库，用于管理 Vue.js 应用中的共享状态（state）。在大型应用程序中，组件之间的数据共享和通信可能变得 ...`,l:"frontEnd/vue/base/vuex.html",a:"vuex"},"39.1":{t:"核心概念\r",p:`

State（状态）：在 Vuex 中，状态即应用程序中需要共享的数据。它类似于组件的 data，但是不限于某个组件，而是存储在 Vuex 的全局状态树中，使得不同组件可以共享和访问这些数据。


 ...`,l:"frontEnd/vue/base/vuex.html#核心概念",a:"核心概念"},"39.2":{t:"优点\r",p:`

集中式管理：所有的状态都集中在 Vuex 的 store 中，方便开发者进行状态的调试和追踪。


组件通信：可以轻松实现跨组件的状态共享和通信，避免了传统的 Props 和 Events 的繁琐 ...`,l:"frontEnd/vue/base/vuex.html#优点",a:"优点"},"39.3":{t:"使用\r",p:`

安装 Vuex：使用 npm 或 yarn 安装 Vuex 库。在终端中运行以下命令：
npm install vuex
或
yarn add vuex



创建一个 Vuex 的 store： ...`,l:"frontEnd/vue/base/vuex.html#使用",a:"使用"},"39.4":{t:"Mutations 的使用\r",p:`当使用 Vuex 时，通常会将状态的修改拆分为两个部分：mutations 和 actions。
Mutations 用于同步地修改状态。它们是唯一允许直接修改状态的地方，而且是一个纯函数（不应该有副 ...`,l:"frontEnd/vue/base/vuex.html#mutations-的使用",a:"mutations-的使用"},"39.5":{t:"Actions 的使用\r",p:"Actions 用于处理异步操作，并且可以包含任意异步代码。它们不直接修改状态，而是通过调用 mutations 来间接修改状态。通常，在组件中通过 dispatch 调用 actions 中的方法。 ...",l:"frontEnd/vue/base/vuex.html#actions-的使用",a:"actions-的使用"},"39.6":{t:"getters 的使用\r",p:"Getters 用于派生出 Vuex store 中的状态（state），类似于组件的计算属性（computed），但是 Getters 可以被多个组件共用，避免了重复逻辑代码。Getters 可以对 ...",l:"frontEnd/vue/base/vuex.html#getters-的使用",a:"getters-的使用"},"40.0":{t:"# Vue 响应式原理\r",p:"\r",l:"frontEnd/vue/principle/响应式原理.html",a:"vue-响应式原理"},"40.1":{t:"Vue2响应式原理\r",p:`Vue 2 的响应式原理主要是基于 Object.defineProperty 实现的。以下是 Vue 2 响应式系统的核心原理：


数据劫持（Data Observation）：

当你创建一个  ...`,l:"frontEnd/vue/principle/响应式原理.html#vue2响应式原理",a:"vue2响应式原理"},"40.2":{t:"Vue3响应式原理\r",p:`Vue 3 的响应式原理使用了 Proxy 对象，相比 Vue 2 使用的 Object.defineProperty 有一些重要的改进和性能优化。以下是 Vue 3 响应式系统的核心原理：


Pr ...`,l:"frontEnd/vue/principle/响应式原理.html#vue3响应式原理",a:"vue3响应式原理"},"41.0":{t:"# vue3 API\r",p:`
vue在线学习工具


在 vue3.2 中，我们只需在script标签中添加setup。就可以做到，组件只需引入不用注册，属性和方法也不用 return 才能于 template 中使用，也不用写 ...`,l:"frontEnd/vue/v3/api.html",a:"vue3-api"},"41.1":{t:"setup\r",p:`
理解：Vue3.0 中一个新的配置项，值为一个函数。
setup() 函数是 Vue3 新增的一个选项，它是组合式 API 的统一入口，简单来说，就是所有的 CompositionAPI 新特性都应 ...`,l:"frontEnd/vue/v3/api.html#setup",a:"setup"},"41.2":{t:"ref 和 reactive\r",p:`
ref() 函数用来根据给定的值创建一个响应式的数据对象，ref() 函数调用的返回值是一个对象，这个对象上只包含一个 value 属性, 只在setup函数内部访问ref函数需要加.value，其 ...`,l:"frontEnd/vue/v3/api.html#ref-和-reactive",a:"ref-和-reactive"},"41.3":{t:"ref全家桶\r",p:"",l:"frontEnd/vue/v3/api.html#ref全家桶",a:"ref全家桶"},"41.4":{t:"isRef\r",p:`判断是不是一个ref对象
import { ref,isRef } from 'vue'
let message = ref(&quot;我是message&quot;)
let notRef:num ...`,l:"frontEnd/vue/v3/api.html#isref",a:"isref"},"41.5":{t:"shallowRef\r",p:`创建一个跟踪自身 .value 变化的 ref，但不会使其值也变成响应式的
修改其属性是非响应式的这样是不会改变的
&lt;template&gt;
  &lt;div&gt;
    &lt;but ...`,l:"frontEnd/vue/v3/api.html#shallowref",a:"shallowref"},"41.6":{t:"triggerRef\r",p:`强制更新页面DOM
import {Ref,shallowRef,triggerRef} from 'vue'
type Obj = {
    name:string
}
let message:R ...`,l:"frontEnd/vue/v3/api.html#triggerref",a:"triggerref"},"41.7":{t:"customRef\r",p:`自定义ref
customRef 是个工厂函数要求我们返回一个对象 并且实现 get 和 set  适合去做防抖之类的
&lt;template&gt;
  &lt;div ref=&quot;div ...`,l:"frontEnd/vue/v3/api.html#customref",a:"customref"},"41.8":{t:"reactive全家桶\r",p:`reactive是不可以绑定普通的数据类型这样是不允许 会给我们报错
import { reactive} from 'vue'
let person = reactive('zhangsan')
/ ...`,l:"frontEnd/vue/v3/api.html#reactive全家桶",a:"reactive全家桶"},"41.9":{t:"readonly\r",p:`readonly 接受一个对象 (不论是响应式还是普通的) 或是一个 ref，返回一个原值的只读代理。


`,l:"frontEnd/vue/v3/api.html#readonly",a:"readonly"},"41.10":{t:"shallowReactive\r",p:`只能对浅层的数据 如果是深层的数据只会改变值 不会改变视图
&lt;template&gt;
  &lt;div&gt;
    &lt;div&gt;{{ state }}&lt;/div&gt;
 ...`,l:"frontEnd/vue/v3/api.html#shallowreactive",a:"shallowreactive"},"41.11":{t:"to系列全家桶\r",p:"",l:"frontEnd/vue/v3/api.html#to系列全家桶",a:"to系列全家桶"},"41.12":{t:"toRef\r",p:`把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref
如果原始对象是非响应式的，数据是会变的，但不会更新视图。
&lt;template&gt;
  &lt;div&g ...`,l:"frontEnd/vue/v3/api.html#toref",a:"toref"},"41.13":{t:"toRefs\r",p:`toRefs相当于对对象内每个属性调用toRef，toRefs返回的对象内的属性使用时需要加.value,主要是方便我们解构使用
&lt;template&gt;
  &lt;div&gt;
     ...`,l:"frontEnd/vue/v3/api.html#torefs",a:"torefs"},"41.14":{t:"toRaw\r",p:`将响应式对象修改为普通对象
&lt;template&gt;
  &lt;div&gt;
    &lt;button @click=&quot;change&quot;&gt;按钮&lt;/butt ...`,l:"frontEnd/vue/v3/api.html#toraw",a:"toraw"},"41.15":{t:"computed\r",p:`computed() 与 Vue2 中的 computed 作用基本一致，它可以接收一个函数或对象作为参数，会返回一个只读的 ref 对象。
&lt;template&gt;
  &lt;div&gt ...`,l:"frontEnd/vue/v3/api.html#computed",a:"computed"},"41.16":{t:"watch\r",p:`vue3 watch 的作用和 Vue2 中的 watch 作用是一样的，他们都是用来监听响应式状态发生变化的，当响应式状态发生变化时，就会触发一个回调函数。
watch(data,()=&gt;{} ...`,l:"frontEnd/vue/v3/api.html#watch",a:"watch"},"41.17":{t:"1、监听ref定义的一个响应式数据\r",p:`import { ref, watch } from 'vue'
let message = ref({
    nav:{
        bar:{
            name:&quot; ...`,l:"frontEnd/vue/v3/api.html#_1、监听ref定义的一个响应式数据",a:"_1、监听ref定义的一个响应式数据"},"41.18":{t:"2、监听多个ref\r",p:`写法变为数组的形式
import { ref, watch ,reactive} from 'vue'

let message = ref('')
let message2 = ref('')

w ...`,l:"frontEnd/vue/v3/api.html#_2、监听多个ref",a:"_2、监听多个ref"},"41.19":{t:"3、监听Reactive定义的响应式对象\r",p:`使用reactive监听深层对象开启和不开启deep 效果一样
import { ref, watch ,reactive} from 'vue'

let message = reactive({
 ...`,l:"frontEnd/vue/v3/api.html#_3、监听reactive定义的响应式对象",a:"_3、监听reactive定义的响应式对象"},"41.20":{t:"4、监听reactive 定义响应式对象的单一属性\r",p:`import { ref, watch ,reactive} from 'vue'
let message = reactive({
    name:&quot;&quot;,
    name2: ...`,l:"frontEnd/vue/v3/api.html#_4、监听reactive-定义响应式对象的单一属性",a:"_4、监听reactive-定义响应式对象的单一属性"},"41.21":{t:"WatchEffect\r",p:`
立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。
不用直接指定要监视的数据, 回调函数中使用的哪些响应式数据就监视哪些响应式数据
默认初始时就会执行第一次, 从而可以收 ...`,l:"frontEnd/vue/v3/api.html#watcheffect",a:"watcheffect"},"41.22":{t:"清除副作用\r",p:`
watchEffect 的第一个参数——effect函数——可以接收一个参数：叫onInvalidate，也是一个函数，用于清除 effect 产生的副作用
就是在触发监听之前会调用一个函数可以处理 ...`,l:"frontEnd/vue/v3/api.html#清除副作用",a:"清除副作用"},"41.23":{t:"停止监听\r",p:`- 当 watchEffect 在组件的 setup() 函数或生命周期钩子被调用时，侦听器会被链接到该组件的生命周期，并在组件卸载时自动停止。
- 但是我们采用异步的方式创建了一个监听器，这个时候监 ...`,l:"frontEnd/vue/v3/api.html#停止监听",a:"停止监听"},"41.24":{t:"配置选项\r",p:`

watchEffect的第二个参数，用来定义副作用刷新时机，可以作为一个调试器来使用


flush （更新时机）：

pre：组件更新前执行
sync：强制效果始终同步触发
post：组件更新后 ...`,l:"frontEnd/vue/v3/api.html#配置选项",a:"配置选项"},"41.25":{t:"生命周期\r",p:`简单来说就是一个组件从创建 到 销毁的 过程 成为生命周期
在我们使用Vue3 组合式API 是没有 beforeCreate 和 created 这两个生命周期的
!img
`,l:"frontEnd/vue/v3/api.html#生命周期",a:"生命周期"},"41.26":{t:"自定义指令\r",p:"",l:"frontEnd/vue/v3/api.html#自定义指令",a:"自定义指令"},"41.27":{t:"Vue3指令的钩子函数\r",p:`
created 元素初始化的时候
beforeMount 指令绑定到元素后调用 只调用一次
mounted 元素插入父级dom调用
beforeUpdate 元素被更新之前调用
update 这个周 ...`,l:"frontEnd/vue/v3/api.html#vue3指令的钩子函数",a:"vue3指令的钩子函数"},"41.28":{t:"在setup内定义局部指令\r",p:`这里有一个需要注意的限制：必须以 vNameOfDirective 的形式来命名本地自定义指令，以使得它们可以直接在模板中使用。

const vMoveDirective: Directive =  ...`,l:"frontEnd/vue/v3/api.html#在setup内定义局部指令",a:"在setup内定义局部指令"},"41.29":{t:"生命周期钩子参数详解\r",p:`第一个 el  当前绑定的DOM 元素
第二个 binding

instance：使用指令的组件实例。
value：传递给指令的值。例如，在 v-my-directive=&quot;1 + 1&q ...`,l:"frontEnd/vue/v3/api.html#生命周期钩子参数详解",a:"生命周期钩子参数详解"},"41.30":{t:"案列 - 自定义拖拽指令\r",p:`&lt;template&gt;
  &lt;div v-move class=&quot;box&quot;&gt;
    &lt;div class=&quot;header&quot;&gt; ...`,l:"frontEnd/vue/v3/api.html#案列-自定义拖拽指令",a:"案列-自定义拖拽指令"},"41.31":{t:"自定义hooks\r",p:`在 vue2 中有个东西叫 mixins，他可以将多个组件中相同的逻辑抽离出来，实现一次写代码，多组件受益的效果。
但是 mixins 的副作用就是引用的多了变量的来源就不清晰了，而且还会有变量来源不 ...`,l:"frontEnd/vue/v3/api.html#自定义hooks",a:"自定义hooks"},"42.0":{t:"# vue3 组件通信方式\r",p:"\r",l:"frontEnd/vue/v3/communication.html",a:"vue3-组件通信方式"},"42.1":{t:"通信方式\r",p:`&lt;!-- 通信仓库地址:项目地址 --&gt;
不管是 vue2 还是 vue3,组件通信方式很重要,不管是项目还是面试都是经常用到的知识点。
比如:vue2 组件通信方式
**props:** ...`,l:"frontEnd/vue/v3/communication.html#通信方式",a:"通信方式"},"42.2":{t:"1、props\r",p:`props 可以实现父子组件通信,在 vue3 中我们可以通过 defineProps 获取父组件传递的数据。且在组件内部不需要引入 defineProps 方法可以直接使用！
父组件给子组件传递数据 ...`,l:"frontEnd/vue/v3/communication.html#_1、props",a:"_1、props"},"42.3":{t:"2、自定义事件\r",p:`在 vue 框架中事件分为两种:一种是原生的 DOM 事件，另外一种自定义事件。
原生 DOM 事件可以让用户与网页进行交互，比如 click、dbclick、change、mouseenter、mo ...`,l:"frontEnd/vue/v3/communication.html#_2、自定义事件",a:"_2、自定义事件"},"42.4":{t:"1. 原生 DOM 事件\r",p:`代码如下:
&lt;pre @click=&quot;handler&quot;&gt;
      我是祖国的老花骨朵
 &lt;/pre&gt;

当前代码级给 pre 标签绑定原生 DOM 事件 ...`,l:"frontEnd/vue/v3/communication.html#_1-原生-dom-事件",a:"_1-原生-dom-事件"},"42.5":{t:"2. 自定义事件\r",p:`自定义事件可以实现子组件给父组件传递数据.在项目中是比较常用的。
比如在父组件内部给子组件(Event2)绑定一个自定义事件
&lt;Event2 @xxx=&quot;handler3&quot;& ...`,l:"frontEnd/vue/v3/communication.html#_2-自定义事件",a:"_2-自定义事件"},"42.6":{t:"3、全局事件总线\r",p:`全局事件总线可以实现任意组件通信，在 vue2 中可以根据 VM 与 VC 关系推出全局事件总线。
但是在 vue3 中没有 Vue 构造函数，也就没有 Vue.prototype.以及组合式 API ...`,l:"frontEnd/vue/v3/communication.html#_3、全局事件总线",a:"_3、全局事件总线"},"42.7":{t:"4、v-model\r",p:`v-model 指令可是收集表单数据(数据双向绑定)，除此之外它也可以实现父子组件数据同步。
而 v-model 实指利用 props[modelValue]与自定义事件[update:modelVa ...`,l:"frontEnd/vue/v3/communication.html#_4、v-model",a:"_4、v-model"},"42.8":{t:"5、useAttrs\r",p:`在 Vue3 中可以利用 useAttrs 方法获取组件的属性与事件(包含:原生 DOM 事件或者自定义事件),次函数功能类似于 Vue2 框架中$attrs属性与$listeners 方法。
比如: ...`,l:"frontEnd/vue/v3/communication.html#_5、useattrs",a:"_5、useattrs"},"42.9":{t:"6、ref 与$parent\r",p:`ref,提及到 ref 可能会想到它可以获取元素的 DOM 或者获取子组件实例的 VC。既然可以在父组件内部通过 ref 获取子组件实例 VC，那么子组件内部的方法与响应式数据父组件可以使用的。
比如 ...`,l:"frontEnd/vue/v3/communication.html#_6、ref-与-parent",a:"_6、ref-与-parent"},"42.10":{t:"7、provide 与 inject\r",p:`provide[提供]
**inject[注入]vue3 提供两个方法 provide 与 inject,可以实现隔辈组件传递参数
组件组件提供数据:
provide 方法用于提供数据，此方法执需要传 ...`,l:"frontEnd/vue/v3/communication.html#_7、provide-与-inject",a:"_7、provide-与-inject"},"42.11":{t:"8、piniapinia 官网:https://pinia.web3doc.top/**\r",p:`pinia 也是集中式管理状态容器,类似于 vuex。但是核心概念没有 mutation、modules,使用方式参照官网
`,l:"frontEnd/vue/v3/communication.html#_8、piniapinia-官网-https-pinia-web3doc-top",a:"_8、piniapinia-官网-https-pinia-web3doc-top"},"42.12":{t:"9、slot\r",p:`插槽：默认插槽、具名插槽、作用域插槽可以实现父子组件通信.
默认插槽:
在子组件内部的模板中书写 slot 全局组件标签
&lt;template&gt;
  &lt;div&gt;
    &lt; ...`,l:"frontEnd/vue/v3/communication.html#_9、slot",a:"_9、slot"},"43.0":{t:"# Vue3 深入组件\r",p:"\r",l:"frontEnd/vue/v3/components.html",a:"vue3-深入组件"},"43.1":{t:"注册\r",p:"\r",l:"frontEnd/vue/v3/components.html#注册",a:"注册"},"43.2":{t:"全局组件\r",p:`在 main.ts 引入组件跟随在 createApp(App) 后面，切记不能放到 mount 后面
//main.js
import { createApp } from 'vue'
import ...`,l:"frontEnd/vue/v3/components.html#全局组件",a:"全局组件"},"43.3":{t:" ",p:"",l:"frontEnd/vue/v3/components.html#",a:""},"43.4":{t:"批量注册全局组件 -->\r",p:"\r",l:"frontEnd/vue/v3/components.html#批量注册全局组件",a:"批量注册全局组件"},"43.5":{t:"局部组件\r",p:`局部注册的组件需要在使用它的父组件中显式导入，并且只能在该父组件中使用。它的优点是使组件之间的依赖关系更加明确，并且对 tree-shaking 更加友好。
在使用 \`
&lt;template&gt ...`,l:"frontEnd/vue/v3/components.html#局部组件",a:"局部组件"},"43.6":{t:"父子组件传参\r",p:`
父组件通过 v-bind 绑定一个数据，然后子组件通过 defineProps 接受传过来的值
传递非字符串类型需要加 v-bind 简写 冒号

父组件
&lt;template&gt;
  &l ...`,l:"frontEnd/vue/v3/components.html#父子组件传参",a:"父子组件传参"},"43.7":{t:"插槽\r",p:"\r",l:"frontEnd/vue/v3/components.html#插槽",a:"插槽"},"43.8":{t:"匿名插槽\r",p:`在子组件放置一个插槽
// Child.vue
&lt;template&gt;
  &lt;div&gt;child&lt;/div&gt;
  &lt;slot&gt;&lt;/slot&gt;
 ...`,l:"frontEnd/vue/v3/components.html#匿名插槽",a:"匿名插槽"},"43.9":{t:"具名插槽\r",p:`具名插槽其实就是给插槽取个名字。一个子组件可以放多个插槽，而且可以放在不同的地方，而父组件填充内容时，可以根据这个名字把内容填充到对应插槽中
&lt;div&gt;
  &lt;slot name=& ...`,l:"frontEnd/vue/v3/components.html#具名插槽",a:"具名插槽"},"43.10":{t:"作用域插槽\r",p:`插槽内容可以访问到父组件的数据作用域，因为插槽内容本身是在父组件模板中定义的。
在子组件动态绑定参数 派发给父组件的 slot 去使用
&lt;span&gt;{{ message }}&lt;/sp ...`,l:"frontEnd/vue/v3/components.html#作用域插槽",a:"作用域插槽"},"43.11":{t:"动态插槽\r",p:`插槽可以是一个变量名
&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;父组件&lt;/p&gt;
    &lt;Child&gt;
      &lt;tem ...`,l:"frontEnd/vue/v3/components.html#动态插槽",a:"动态插槽"},"43.12":{t:"异步组件\r",p:`在大型应用中，需要将应用分割成小一些的代码块，并且减少主包的体积。
通过 defineAsyncComponent 异步加载
&lt;template&gt;
  &lt;Children :msg= ...`,l:"frontEnd/vue/v3/components.html#异步组件",a:"异步组件"},"43.13":{t:"Suspense\r",p:"Suspense 允许应用程序在等待异步组件时渲染一些其它内容,在 Vue2 中，必须使用条件判断(例如 v-if、 v-else等)来检查数据是否已加载并显示一些其它内容；但是，在 Vue3 新增了 ...",l:"frontEnd/vue/v3/components.html#suspense",a:"suspense"},"43.14":{t:"Teleport 传送组件\r",p:`Teleport 是一种能够将我们的模板渲染至指定DOM节点，不受父级style、v-show等属性影响，但data、prop数据依旧能够共用的技术；类似于 React 的 Portal。
主要解决的 ...`,l:"frontEnd/vue/v3/components.html#teleport-传送组件",a:"teleport-传送组件"},"43.15":{t:"Keep-alive 缓存组件\r",p:`
事件挂载的方法等，只执行一次的放在 onMounted中；组件每次进去执行的方法放在 onActivated中


作用和vue2一致，只是生命周期名称有所更改
初次进入时： onMounted&g ...`,l:"frontEnd/vue/v3/components.html#keep-alive-缓存组件",a:"keep-alive-缓存组件"},"43.16":{t:"provide/inject\r",p:`provide 可以在祖先组件中指定我们想要提供给后代组件的数据或方法，而在任何后代组件中，我们都可以使用 inject 来接收 provide 提供的数据或方法。
父组件
&lt;template& ...`,l:"frontEnd/vue/v3/components.html#provide-inject",a:"provide-inject"},"43.17":{t:"v-model 升级\r",p:`
在Vue3 v-model 是破坏性更新的
v-model 是props 和 emit 组合而成的语法糖,vue3中 v-model 有以下改动


变更：value =&gt; modelValu ...`,l:"frontEnd/vue/v3/components.html#v-model-升级",a:"v-model-升级"},"44.0":{t:"# 创建Vue3项目\r",p:"\r",l:"frontEnd/vue/v3/create.html",a:"创建vue3项目"},"44.1":{t:"一、 使用vue-cli创建\r",p:`
`,l:"frontEnd/vue/v3/create.html#一、-使用vue-cli创建",a:"一、-使用vue-cli创建"},"44.2":{t:"安装或者升级\r",p:`npm install -g @vue/cli
`,l:"frontEnd/vue/v3/create.html#安装或者升级",a:"安装或者升级"},"44.3":{t:"保证 vue cli 版本在 4.5.0 以上\r",p:`vue --version
`,l:"frontEnd/vue/v3/create.html#保证-vue-cli-版本在-4-5-0-以上",a:"保证-vue-cli-版本在-4-5-0-以上"},"44.4":{t:"创建项目\r",p:`vue create my-project
然后的步骤

- Please pick a preset - 选择 Manually select features
- Check the featur ...`,l:"frontEnd/vue/v3/create.html#创建项目",a:"创建项目"},"44.5":{t:"二、 使用vite创建(推荐)\r",p:`vite的优势

冷服务   默认的构建目标浏览器是能 在 script 标签上支持原生 ESM 和 原生 ESM 动态导入
HMR  速度快到惊人的 模块热更新（HMR）
Rollup打包  它使用 ...`,l:"frontEnd/vue/v3/create.html#二、-使用vite创建-推荐",a:"二、-使用vite创建-推荐"},"44.6":{t:"1. 使用vite初始化一个项目\r",p:`# npm
npm init vite@latest

# yarn
yarn create vite

这两种使用vite创建vue3项目的步骤一样
(1).运行命令 输入项目名称
!img
(2) ...`,l:"frontEnd/vue/v3/create.html#_1-使用vite初始化一个项目",a:"_1-使用vite初始化一个项目"},"44.7":{t:"2. npm init vue@latest\r",p:`!img
`,l:"frontEnd/vue/v3/create.html#_2-npm-init-vue-latest",a:"_2-npm-init-vue-latest"},"45.0":{t:"# 认识Vue3\r",p:"\r",l:"frontEnd/vue/v3/index.html",a:"认识vue3"},"45.1":{t:"一、了解相关信息\r",p:`
Vue.js 3.0 &quot;One Piece&quot; 正式版在今年9月份发布
2年多开发, 100+位贡献者, 2600+次提交, 600+次PR
Vue3支持vue2的大多数特性
更好 ...`,l:"frontEnd/vue/v3/index.html#一、了解相关信息",a:"一、了解相关信息"},"45.2":{t:"二、 性能提升:\r",p:`
打包大小减少41%
初次渲染快55%, 更新渲染快133%
内存减少54%
使用Proxy代替defineProperty实现数据响应式
重写虚拟DOM的实现和Tree-Shaking

`,l:"frontEnd/vue/v3/index.html#二、-性能提升",a:"二、-性能提升"},"45.3":{t:"三、 新增特性\r",p:`

Composition (组合) API


setup

ref 和 reactive
computed 和 watch
新的生命周期函数
provide与inject
...



新组件

 ...`,l:"frontEnd/vue/v3/index.html#三、-新增特性",a:"三、-新增特性"},"46.0":{t:"# vue3.3 新特性\r",p:"\r",l:"frontEnd/vue/v3/vue33.html",a:"vue3-3-新特性"},"46.1":{t:"defineProps\r",p:`
父组件

&lt;template&gt;
  &lt;div&gt;
    &lt;h1&gt;Home&lt;/h1&gt;
    &lt;Child :name=&quot;['zhang ...`,l:"frontEnd/vue/v3/vue33.html#defineprops",a:"defineprops"},"46.2":{t:"defineEmits\r",p:`
父组件

&lt;template&gt;
  &lt;div&gt;
    &lt;h1&gt;Home&lt;/h1&gt;
    &lt;Child @send=&quot;getName ...`,l:"frontEnd/vue/v3/vue33.html#defineemits",a:"defineemits"},"46.3":{t:"defineOptions\r",p:`
主要是用来定义 Options API 的选项



::: tip
常用的就是定义 name 在 seutp 语法糖模式发现 name 不好定义了需要在开启一个 script 自定义 name 现 ...`,l:"frontEnd/vue/v3/vue33.html#defineoptions",a:"defineoptions"},"46.4":{t:"defineSlots\r",p:`用来约束 slot

父组件

&lt;template&gt;
  &lt;div&gt;
    &lt;Child :data=&quot;list&quot;&gt;
      &lt;te ...`,l:"frontEnd/vue/v3/vue33.html#defineslots",a:"defineslots"},"48.0":{t:"# JavaScript 数组\r",p:`数组：(Array)是一种可以按顺序保存数据的数据类型
使用场景：如果有多个数据可以用数组保存起来，然后放到一个变量中，管理非常方便

数组中可以存放任意类型的数据，例如字符串，数字，布尔值等。

`,l:"JavaScript/base/array.html",a:"javascript-数组"},"48.1":{t:"创建\r",p:`创建数组有两种方式

利用 new 创建数组
利用数组字面量创建数组

数组的字面量是方括号 [ ]
声明数组并赋值称为数组的初始化
这种字面量方式也是最多的使用方式



// 利用new 创建数组 ...`,l:"JavaScript/base/array.html#创建",a:"创建"},"48.2":{t:"获取数组元素\r",p:`数组的长度
使用数组名.length可以访问数组元素的数量（数组长度）
数组的索引
索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）。

数组可以通过索引来访问、设置、修改对应的数组元 ...`,l:"JavaScript/base/array.html#获取数组元素",a:"获取数组元素"},"48.3":{t:" ",p:"",l:"JavaScript/base/array.html#",a:""},"48.4":{t:"数组方法 -->\r",p:"\r",l:"JavaScript/base/array.html#数组方法",a:"数组方法"},"48.5":{t:"一、操作方法\r",p:`数组基本操作可以归纳为 增、删、改、查，需要留意的是哪些方法会对原数组产生影响，哪些方法不会
下面对数组常用的操作方法做一个归纳
`,l:"JavaScript/base/array.html#一、操作方法",a:"一、操作方法"},"48.6":{t:"增\r",p:`下面前三种是对原数组产生影响的增添方法，第四种则不会对原数组产生影响

push()
unshift()
splice()
concat()

`,l:"JavaScript/base/array.html#增",a:"增"},"48.7":{t:"push()\r",p:`push()方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度
let colors = [] // 创建一个数组
let count = colors.push('red', 'bl ...`,l:"JavaScript/base/array.html#push",a:"push"},"48.8":{t:"unshift()\r",p:`unshift()在数组开头添加任意多个值，然后返回新的数组长度
let colors = new Array() // 创建一个数组
let count = colors.unshift('red' ...`,l:"JavaScript/base/array.html#unshift",a:"unshift"},"48.9":{t:"splice()\r",p:`传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回空数组
let colors = ['red', 'green', 'blue']
let removed = colors.sp ...`,l:"JavaScript/base/array.html#splice",a:"splice"},"48.10":{t:"concat()\r",p:`首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组
let colors = ['red', 'green', 'blue']
let color ...`,l:"JavaScript/base/array.html#concat",a:"concat"},"48.11":{t:"删\r",p:`下面三种都会影响原数组，最后一项不影响原数组：

pop()
shift()
splice()
slice()

`,l:"JavaScript/base/array.html#删",a:"删"},"48.12":{t:"pop()\r",p:`pop() 方法用于删除数组的最后一项，同时减少数组的 length 值，返回被删除的项
let colors = ['red', 'green']
let item = colors.pop() / ...`,l:"JavaScript/base/array.html#pop",a:"pop"},"48.13":{t:"shift()\r",p:`shift()方法用于删除数组的第一项，同时减少数组的 length 值，返回被删除的项
let colors = ['red', 'green']
let item = colors.shift() ...`,l:"JavaScript/base/array.html#shift",a:"shift"},"48.14":{t:"splice()\r",p:`传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组
let colors = ['red', 'green', 'blue']
let removed = colors.splice ...`,l:"JavaScript/base/array.html#splice",a:"splice"},"48.15":{t:"slice()\r",p:`slice() 用于创建一个包含原有数组中一个或多个元素的新数组，不会影响原始数组
let colors = ['red', 'green', 'blue', 'yellow', 'purple']
 ...`,l:"JavaScript/base/array.html#slice",a:"slice"},"48.16":{t:"改\r",p:`即修改原来数组的内容，常用splice
`,l:"JavaScript/base/array.html#改",a:"改"},"48.17":{t:"splice()\r",p:`传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响
let colors = ['red', 'green', 'blue']
let remo ...`,l:"JavaScript/base/array.html#splice",a:"splice"},"48.18":{t:"查\r",p:`即查找元素，返回元素坐标或者元素值

indexOf()
includes()
find()

`,l:"JavaScript/base/array.html#查",a:"查"},"48.19":{t:"indexOf()\r",p:`返回要查找的元素在数组中的位置，如果没找到则返回 -1
let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]
numbers.indexOf(4) // 3

`,l:"JavaScript/base/array.html#indexof",a:"indexof"},"48.20":{t:"includes()\r",p:`返回要查找的元素在数组中的位置，找到返回true，否则false
let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]
numbers.includes(4) // tr ...`,l:"JavaScript/base/array.html#includes",a:"includes"},"48.21":{t:"find()\r",p:`返回第一个匹配的元素
const people = [
  {
    name: 'Matt',
    age: 27
  },
  {
    name: 'Nicholas',
    age ...`,l:"JavaScript/base/array.html#find",a:"find"},"48.22":{t:"二、排序方法\r",p:`数组有两个方法可以用来对元素重新排序：

reverse()
sort()

`,l:"JavaScript/base/array.html#二、排序方法",a:"二、排序方法"},"48.23":{t:"reverse()\r",p:`顾名思义，将数组元素方向反转
let values = [1, 2, 3, 4, 5]
values.reverse()
console.log(values) // 5,4,3,2,1

`,l:"JavaScript/base/array.html#reverse",a:"reverse"},"48.24":{t:"sort()\r",p:`sort()方法接受一个比较函数，用于判断哪个值应该排在前面
function compare(value1, value2) {
  if (value1 &lt; value2) {
    re ...`,l:"JavaScript/base/array.html#sort",a:"sort"},"48.25":{t:"三、转换方法\r",p:`常见的转换方法有：
`,l:"JavaScript/base/array.html#三、转换方法",a:"三、转换方法"},"48.26":{t:"join()\r",p:`join() 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串
let colors = ['red', 'green', 'blue']
console.log(colors.join(', ...`,l:"JavaScript/base/array.html#join",a:"join"},"48.27":{t:"四、迭代方法\r",p:`常用来迭代数组的方法（都不改变原数组）有如下：

some()
every()
forEach()
filter()
map()

`,l:"JavaScript/base/array.html#四、迭代方法",a:"四、迭代方法"},"48.28":{t:"some()\r",p:`对数组每一项都运行传入的测试函数，如果至少有 1 个元素返回 true ，则这个方法返回 true
let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]
let some ...`,l:"JavaScript/base/array.html#some",a:"some"},"48.29":{t:"every()\r",p:`对数组每一项都运行传入的测试函数，如果所有元素都返回 true ，则这个方法返回 true
let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]
let everyRes ...`,l:"JavaScript/base/array.html#every",a:"every"},"48.30":{t:"forEach()\r",p:`对数组每一项都运行传入的函数，没有返回值
let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]
numbers.forEach((item, index, array)  ...`,l:"JavaScript/base/array.html#foreach",a:"foreach"},"48.31":{t:"filter()\r",p:`对数组每一项都运行传入的函数，函数返回 true 的项会组成数组之后返回
let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]
let filterResult = nu ...`,l:"JavaScript/base/array.html#filter",a:"filter"},"48.32":{t:"map()\r",p:`对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组
let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]
let mapResult = numbers.m ...`,l:"JavaScript/base/array.html#map",a:"map"},"49.0":{t:"# JavaScript 流程控制\r",p:"\r",l:"JavaScript/base/flow.html",a:"javascript-流程控制"},"49.1":{t:"if 语句\r",p:`流程控制语句可以用来改变程序执行的顺序

条件判断语句
条件分支语句
循环语句

if (i &gt; 1) {
  alert('yes')
} else {
  alert('no')
}

// ...`,l:"JavaScript/base/flow.html#if-语句",a:"if-语句"},"49.2":{t:"if-else\r",p:`if-else 语句：

语法：

if(条件表达式){
  语句...
}else if(条件表达式1){
  语句...
}else if(条件表达式2){
  语句...
}else{
  语句 ...`,l:"JavaScript/base/flow.html#if-else",a:"if-else"},"49.3":{t:"switch 语句\r",p:`switch 语句 - 语法：

switch(表达式){
    case 表达式1:
        代码...
        break
    case 表达式2:
        代码.. ...`,l:"JavaScript/base/flow.html#switch-语句",a:"switch-语句"},"49.4":{t:"循环语句\r",p:`

通过循环语句可以使指定的代码反复执行


JS 中一共有三种循环语句

while 语句
do-while 语句
for 语句 - while 语句 - 语法：



`,l:"JavaScript/base/flow.html#循环语句",a:"循环语句"},"49.5":{t:"while\r",p:`// while(条件表达式){
//     语句...
// }
var i = 0
while (i &lt; 10) {
  i += 2
}

::: tip while 执行流程：
whi ...`,l:"JavaScript/base/flow.html#while",a:"while"},"49.6":{t:"do-while\r",p:`let i = 10
do {
  console.log(i)
  i++
} while (i &lt; 5)

::: tip do-while 执行顺序
do-while 语句在执行时，会先执 ...`,l:"JavaScript/base/flow.html#do-while",a:"do-while"},"49.7":{t:"for\r",p:"\r",l:"JavaScript/base/flow.html#for",a:"for"},"49.8":{t:"`for` 循环\r",p:`for (let i = 0; i &lt; 5; i++) {
  console.log(i)
}

`,l:"JavaScript/base/flow.html#for-循环",a:"for-循环"},"49.9":{t:"`for in` 循环\r",p:`
用于迭代对象的属性，通常是迭代对象的键（属性名）。
适用于对象（包括数组和其他可枚举属性的对象），不适用于迭代数组元素的值。
迭代的顺序不一定是按照属性在对象中的顺序，可能会有不可预测的结果。
通常 ...`,l:"JavaScript/base/flow.html#for-in-循环",a:"for-in-循环"},"49.10":{t:"` for of` 循环\r",p:`
用于迭代可迭代对象的值，例如数组、字符串、Map、Set 等。
迭代的顺序是按照对象的迭代协议定义的顺序，通常是按照对象中元素的顺序。
不会迭代对象的属性，只迭代值。

语法：
for (变量 of ...`,l:"JavaScript/base/flow.html#for-of-循环",a:"for-of-循环"},"49.11":{t:"for-in 和 for-of 的区别\r",p:`for-in 循环和 for-of 循环虽然都是用于迭代对象的方法，但它们有一些不同之处。

迭代对象的内容不同

for-in 循环迭代对象的是键名，而 for-of 循环迭代对象的是值。因此，fo ...`,l:"JavaScript/base/flow.html#for-in-和-for-of-的区别",a:"for-in-和-for-of-的区别"},"49.12":{t:"break 和 continue\r",p:`

break

break 用来终止 switch 和循环语句
break 执行后，当前的 switch 或循环会立刻停止
break 会终止离他最近的循环



for (let i = 0; i ...`,l:"JavaScript/base/flow.html#break-和-continue",a:"break-和-continue"},"50.0":{t:"# JavaScript 函数\r",p:`
在 JS 里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。
虽然 for 循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用 JS 中的函数 ...`,l:"JavaScript/base/function.html",a:"javascript-函数"},"50.1":{t:"函数的使用\r",p:"\r",l:"JavaScript/base/function.html#函数的使用",a:"函数的使用"},"50.2":{t:"声明函数\r",p:`function是声明函数的关键字，必须小写
// 声明定义方式
function 函数名() {
    // 函数体代码
}

// 这是函数表达式写法，匿名函数后面跟分号结束
var 变量名 = ...`,l:"JavaScript/base/function.html#声明函数",a:"声明函数"},"50.3":{t:"调用函数\r",p:`函数名();
// 函数使用分为两步： 声明函数 和 调用函数
// 1. 声明函数
// function 函数名() {
//     // 函数体
// }
function sayHi() { ...`,l:"JavaScript/base/function.html#调用函数",a:"调用函数"},"50.4":{t:"函数的封装\r",p:`函数的封装：是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口。
`,l:"JavaScript/base/function.html#函数的封装",a:"函数的封装"},"50.5":{t:"函数的参数\r",p:"\r",l:"JavaScript/base/function.html#函数的参数",a:"函数的参数"},"50.6":{t:"形参和实参\r",p:`
在声明函数时，可以在函数名称后面的小括号中添加一些参数，这些参数被称为形参
在调用该函数时，同样也需要传递相应的参数，这些参数被称为实参

参数的作用: 在函数内部某些值不能固定，我们可以通过参数在 ...`,l:"JavaScript/base/function.html#形参和实参",a:"形参和实参"},"50.7":{t:"函数形参和实参个数不匹配问题\r",p:`


参数个数
说明




实参个数等于形参个数
输出正确结果


实参个数多于形参个数
只取到形参的个数


实参个数少于形参个数
多的参数定义为 undefined



// 函数形参实参个数 ...`,l:"JavaScript/base/function.html#函数形参和实参个数不匹配问题",a:"函数形参和实参个数不匹配问题"},"50.8":{t:"函数的返回值\r",p:`有的时候，我们会希望函数将值返回给调用者，此时通过使用 return 语句就可以实现。
语法格式
// 声明函数
function 函数名（）{
    ...
    return  需要返回的值； ...`,l:"JavaScript/base/function.html#函数的返回值",a:"函数的返回值"},"50.9":{t:"break、continue、return 的区别\r",p:`
break：结束当前的循环体（如 for、while）
continue：跳出本次循环，继续执行下次循环（如 for、while）
return：不仅可以退出循环，还能够返回 return 语句中的 ...`,l:"JavaScript/base/function.html#break、continue、return-的区别",a:"break、continue、return-的区别"},"50.10":{t:"匿名函数\r",p:`函数可以分为具名函数和匿名函数
匿名函数：没有名字的函数,无法直接使用。
`,l:"JavaScript/base/function.html#匿名函数",a:"匿名函数"},"50.11":{t:"函数表达式\r",p:`// 声明
let fn = function () {
  console.log('函数表达式')
}
// 调用
fn()

`,l:"JavaScript/base/function.html#函数表达式",a:"函数表达式"},"50.12":{t:"立即执行函数\r",p:`(function(){ xxx  })();
(function(){ xxxx }());

::: tip
无需调用，立即执行，其实本质已经调用了
多个立即执行函数之间用分号隔开
:::
`,l:"JavaScript/base/function.html#立即执行函数",a:"立即执行函数"},"51.0":{t:"# JavaScript 基本语法\r",p:`JavaScript 是一种脚本语言，通常用于在 Web 浏览器中编写交互式前端代码。它也可以在服务器端运行，用于编写后端代码。
JavaScript 的语法类似于 C 语言，但它是一种解释性语言，不 ...`,l:"JavaScript/base/index.html",a:"javascript-基本语法"},"51.1":{t:"输出语句\r",p:`以下是一个简单的 JavaScript 示例：
// 输出Hello, World!
console.log('Hello, World!')

document.write('Hello World ...`,l:"JavaScript/base/index.html#输出语句",a:"输出语句"},"51.2":{t:"引入方式\r",p:`
JavaScript 程序不能独立运行，它需要被嵌入 HTML 中，然后浏览器才能执行 JavaScript 代码。通过 script 标签将 JavaScript 代码引入到 HTML 中，有两种 ...`,l:"JavaScript/base/index.html#引入方式",a:"引入方式"},"51.3":{t:"内部方式\r",p:`通过 script 标签包裹 JavaScript 代码
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
  ...`,l:"JavaScript/base/index.html#内部方式",a:"内部方式"},"51.4":{t:"外部方式\r",p:`
一般将 JavaScript 代码写在独立的以 .js 结尾的文件中，然后通过 script 标签的 src 属性引入
script标签如果带src属性，那么内部的 js 代码没有作用



`,l:"JavaScript/base/index.html#外部方式",a:"外部方式"},"51.5":{t:"注释\r",p:"\r",l:"JavaScript/base/index.html#注释",a:"注释"},"51.6":{t:"单行注释\r",p:`使用 //  注释单行代码， 快捷键 Ctrl + /


`,l:"JavaScript/base/index.html#单行注释",a:"单行注释"},"51.7":{t:"多行注释\r",p:`使用/* */注释多行代码，快捷键 Shift+Alt+A


`,l:"JavaScript/base/index.html#多行注释",a:"多行注释"},"52.0":{t:"# JavaScript 对象\r",p:"\r",l:"JavaScript/base/object.html",a:"javascript-对象"},"52.1":{t:"概述\r",p:"\r",l:"JavaScript/base/object.html#概述",a:"概述"},"52.2":{t:"生成方法\r",p:`对象（object）是 JavaScript 语言的核心概念，也是最重要的数据类型。
什么是对象？简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。
var obj ...`,l:"JavaScript/base/object.html#生成方法",a:"生成方法"},"52.3":{t:"键名\r",p:`对象的所有键名都是字符串（ES6 又引入了 Symbol 值也可以作为键名），所以加不加引号都可以。上面的代码也可以写成下面这样。
var obj = {
  foo: 'Hello',
  bar: ...`,l:"JavaScript/base/object.html#键名",a:"键名"},"52.4":{t:"对象的引用\r",p:`如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。
var o1 = {}
var o2 = o1

o1.a = 1
o ...`,l:"JavaScript/base/object.html#对象的引用",a:"对象的引用"},"52.5":{t:"表达式还是语句？\r",p:`对象采用大括号表示，这导致了一个问题：如果行首是一个大括号，它到底是表达式还是语句？
{
  foo: 123
}

JavaScript 引擎读到上面这行代码，会发现可能有两种含义。第一种可能是，这 ...`,l:"JavaScript/base/object.html#表达式还是语句",a:"表达式还是语句"},"52.6":{t:"属性的操作\r",p:"\r",l:"JavaScript/base/object.html#属性的操作",a:"属性的操作"},"52.7":{t:"属性的读取\r",p:`读取对象的属性，有两种方法，一种是使用点运算符，还有一种是使用方括号运算符。
var obj = {
  p: 'Hello World'
}

obj.p // &quot;Hello World& ...`,l:"JavaScript/base/object.html#属性的读取",a:"属性的读取"},"52.8":{t:"属性的赋值\r",p:`点运算符和方括号运算符，不仅可以用来读取值，还可以用来赋值。
var obj = {}

obj.foo = 'Hello'
obj['bar'] = 'World'

上面代码中，分别使用点运算符和 ...`,l:"JavaScript/base/object.html#属性的赋值",a:"属性的赋值"},"52.9":{t:"属性的查看\r",p:`查看一个对象本身的所有属性，可以使用Object.keys方法。
var obj = {
  key1: 1,
  key2: 2
}

Object.keys(obj)
// ['key1', 'k ...`,l:"JavaScript/base/object.html#属性的查看",a:"属性的查看"},"52.10":{t:"属性的删除：delete 命令\r",p:`delete命令用于删除对象的属性，删除成功后返回true。
var obj = { p: 1 }
Object.keys(obj) // [&quot;p&quot;]

delete obj.p  ...`,l:"JavaScript/base/object.html#属性的删除-delete-命令",a:"属性的删除-delete-命令"},"52.11":{t:"属性是否存在：in 运算符\r",p:`in运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回true，否则返回false。它的左边是一个字符串，表示属性名，右边是一个对象。
var obj = { p: 1 ...`,l:"JavaScript/base/object.html#属性是否存在-in-运算符",a:"属性是否存在-in-运算符"},"52.12":{t:"属性的遍历：for...in 循环\r",p:`for...in循环用来遍历一个对象的全部属性。
var obj = { a: 1, b: 2, c: 3 }

for (var i in obj) {
  console.log('键名：', i ...`,l:"JavaScript/base/object.html#属性的遍历-for-in-循环",a:"属性的遍历-for-in-循环"},"52.13":{t:"with 语句\r",p:`with语句的格式如下：
with (对象) {
  语句
}

它的作用是操作同一个对象的多个属性时，提供一些书写的方便。
// 例一
var obj = {
  p1: 1,
  p2: 2
}
 ...`,l:"JavaScript/base/object.html#with-语句",a:"with-语句"},"53.0":{t:"# JavaScript 运算符\r",p:"\r",l:"JavaScript/base/operator.html",a:"javascript-运算符"},"53.1":{t:"运算符\r",p:`运算符也被称为操作符，是用于实现赋值、比较和执行算数运算等动能的符号。
JavaScript 中常用的运算符有：

算数运算符
递增和递减运算符
比较运算符
逻辑运算符
赋值运算符

`,l:"JavaScript/base/operator.html#运算符",a:"运算符"},"53.2":{t:"算数运算符\r",p:`


运算符
描述
实例




+
加
1 + 2 = 3


-
减
3 - 2 = 1


*
乘
2 * 4 = 8


/
除
10 / 2 = 5


**
幂运算
2 ** 4 = 16 ...`,l:"JavaScript/base/operator.html#算数运算符",a:"算数运算符"},"53.3":{t:"赋值运算符\r",p:`


运算符名称
描述
实例




=
赋值
let a = 10


??=
空赋值&lt;br /&gt;只有当变量的值为 null 或 undefined 时才会对变量进行赋值
3 - 2 = ...`,l:"JavaScript/base/operator.html#赋值运算符",a:"赋值运算符"},"53.4":{t:"自增和自减\r",p:"\r",l:"JavaScript/base/operator.html#自增和自减",a:"自增和自减"},"53.5":{t:"++ 自增运算符\r",p:`
++ 使用后会使得原来的变量立刻增加 1
自增分为前自增(++a)和后自增(a++)
无论是++a 还是 a++都会使原变量立刻增加 1
不同的是++a 和 a++所返回的值不同
a++ 是自增前的 ...`,l:"JavaScript/base/operator.html#自增运算符",a:"自增运算符"},"53.6":{t:"-- 自减运算符\r",p:`
使用后会使得原来的变量立刻减小 1
自减分为前自减(--a)和后自减(a--)
无论是--a 还是 a--都会使原变量立刻减少 1
不同的是--a 和 a--的值不同
--a 是新值
a-- 是旧值 ...`,l:"JavaScript/base/operator.html#自减运算符",a:"自减运算符"},"53.7":{t:"比较运行符\r",p:`


运算符名称
描述
案列
结果




&lt;
小于号
1 &lt; 2
true


&gt;
大于号
1 &gt; 2
false


&lt;=
小于等于号
2 &lt;= 2
true
 ...`,l:"JavaScript/base/operator.html#比较运行符",a:"比较运行符"},"53.8":{t:"逻辑运算符\r",p:"\r",l:"JavaScript/base/operator.html#逻辑运算符",a:"逻辑运算符"},"53.9":{t:"逻辑与 `&&`\r",p:`一假即假


可以对两个值进行与运算


当&amp;&amp;左右都为 true 时，则返回 true，否则返回 false


与运算是短路的与，如果第一个值为 false，则不看第二个值


与 ...`,l:"JavaScript/base/operator.html#逻辑与",a:"逻辑与"},"53.10":{t:"逻辑或 `||`\r",p:`一真即真


可以对两个值进行或运算


当||左右有 true 时，则返回 true，否则返回 false


或运算也是短路的或，如果第一个值为 true，则不看第二个值


或运算是找 true ...`,l:"JavaScript/base/operator.html#逻辑或",a:"逻辑或"},"53.11":{t:"逻辑非 `!`\r",p:`console.log(!false) // true

`,l:"JavaScript/base/operator.html#逻辑非",a:"逻辑非"},"53.12":{t:"条件运算符\r",p:`
条件表达式 ? 表达式 1 : 表达式 2

::: tip 执行顺序：
条件运算符在执行时，会先对条件表达式进行求值判断

如果结果为 true，则执行表达式 1
如果结果为 false，则执行表 ...`,l:"JavaScript/base/operator.html#条件运算符",a:"条件运算符"},"53.13":{t:" 运算符的优先级\r",p:`JavaScript 各种运算符的优先级别（Operator Precedence）是不一样的。优先级高的运算符先执行，优先级低的运算符后执行。
4 + 5 * 6 // 34

圆括号（()）可以用 ...`,l:"JavaScript/base/operator.html#运算符的优先级",a:"运算符的优先级"},"54.0":{t:"# JavaScript 数据类型\r",p:"\r",l:"JavaScript/base/types.html",a:"javascript-数据类型"},"54.1":{t:"一、基本类型\r",p:`基本类型主要为以下 6 种：

Number
String
Boolean
Undefined
null
symbol

`,l:"JavaScript/base/types.html#一、基本类型",a:"一、基本类型"},"54.2":{t:"Number\r",p:`数值最常见的整数类型格式则为十进制，还可以设置八进制（零开头）、十六进制（0x 开头）
let intNum = 55 // 10进制的55
let num1 = 070 // 8进制的56
let  ...`,l:"JavaScript/base/types.html#number",a:"number"},"54.3":{t:"Undefined\r",p:`Undefined 类型只有一个值，就是特殊值 undefined。当使用 var 或 let 声明了变量但没有初始化时，就相当于给变量赋予了 undefined 值
let message
cons ...`,l:"JavaScript/base/types.html#undefined",a:"undefined"},"54.4":{t:"String\r",p:`字符串可以使用双引号（&quot;）、单引号（'）或反引号（\`）标示
let firstName = 'John'
let lastName = 'Jacob'
let lastName = \`Jin ...`,l:"JavaScript/base/types.html#string",a:"string"},"54.5":{t:"Null\r",p:`Null 类型同样只有一个值，即特殊值 null
逻辑上讲， null 值表示一个空对象指针，这也是给typeof 传一个 null 会返回 &quot;object&quot; 的原因
let ca ...`,l:"JavaScript/base/types.html#null",a:"null"},"54.6":{t:"Boolean\r",p:`Boolean （布尔值）类型有两个字面值： true 和 false
通过Boolean可以将其他类型的数据转化成布尔值
规则如下：
数据类型      				转换为 true 的值      	 ...`,l:"JavaScript/base/types.html#boolean",a:"boolean"},"54.7":{t:"Symbol\r",p:`Symbol （符号）是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险
let genericSymbol = Symbol()
let other ...`,l:"JavaScript/base/types.html#symbol",a:"symbol"},"54.8":{t:"二、引用类型\r",p:`复杂类型统称为Object，我们这里主要讲述下面三种：

Object
Array
Function

`,l:"JavaScript/base/types.html#二、引用类型",a:"二、引用类型"},"54.9":{t:"Object\r",p:`创建object常用方式为对象字面量表示法，属性名可以是字符串或数值
let person = {
  name: 'Nicholas',
  age: 29,
  5: true
}

`,l:"JavaScript/base/types.html#object",a:"object"},"54.10":{t:"Array\r",p:`JavaScript数组是一组有序的数据，但跟其他语言不同的是，数组中每个槽位可以存储任意类型的数据。并且，数组也是动态大小的，会随着数据添加而自动增长
let colors = ['red', 2, ...`,l:"JavaScript/base/types.html#array",a:"array"},"54.11":{t:"Function\r",p:`函数实际上是对象，每个函数都是 Function类型的实例，而 Function 也有属性和方法，跟其他引用类型一样
函数存在三种常见的表达方式：

函数声明

// 函数声明
function su ...`,l:"JavaScript/base/types.html#function",a:"function"},"54.12":{t:"其他引用类型\r",p:`除了上述说的三种之外，还包括Date、RegExp、Map、Set等......
`,l:"JavaScript/base/types.html#其他引用类型",a:"其他引用类型"},"54.13":{t:"三、类型转换\r",p:`类型转换指将一种数据类型转换为其他类型
`,l:"JavaScript/base/types.html#三、类型转换",a:"三、类型转换"},"54.14":{t:"转换为字符串\r",p:`// 1. 把数字转换为字符串型 变量.toString()
var num = 10
var str = num.toString()
console.log(typeof str, str) // ...`,l:"JavaScript/base/types.html#转换为字符串",a:"转换为字符串"},"54.15":{t:"转换为数字型\r",p:`
将其他的数据类型转换为数值

使用 Number()函数来将其他类型转换为数值
转换的情况：

字符串：

如果字符串是一个合法的数字，则会自动转换为对应的数字
如果字符串不是合法数字，则转换为 N ...`,l:"JavaScript/base/types.html#转换为数字型",a:"转换为数字型"},"54.16":{t:"转换为布尔型\r",p:`使用 Boolean()函数来将其他类型转换为布尔值


转换的情况：
数字：

0 和 NaN 转换为 false
其余是 true

字符串：

空串 转换为 false
其余是 true

nu ...`,l:"JavaScript/base/types.html#转换为布尔型",a:"转换为布尔型"},"54.17":{t:"四、存储区别\r",p:`基本数据类型和引用数据类型存储在内存中的位置不同：


基本数据类型存储在栈中


引用类型的对象存储于堆中


当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值
 ...`,l:"JavaScript/base/types.html#四、存储区别",a:"四、存储区别"},"54.18":{t:"基本类型\r",p:`let a = 10
let b = a // 赋值操作
b = 20
console.log(a) // 10值

a的值为一个基本类型，是存储在栈中，将a的值赋给b，虽然两个变量的值相等，但是两个 ...`,l:"JavaScript/base/types.html#基本类型",a:"基本类型"},"54.19":{t:"引用类型\r",p:`var obj1 = {}
var obj2 = obj1
obj2.name = 'zs'
console.log(obj1.name) // zs

引用类型数据存放在堆中，每个堆内存对象都有对应 ...`,l:"JavaScript/base/types.html#引用类型",a:"引用类型"},"54.20":{t:"小结\r",p:`
声明变量时不同的内存地址分配：

简单类型的值存放在栈中，在栈中存放的是对应的值
引用类型对应的值存储在堆中，在栈中存放的是指向堆内存的地址


不同的类型数据导致赋值变量时的不同：

简单类型赋值 ...`,l:"JavaScript/base/types.html#小结",a:"小结"},"55.0":{t:"# JavaScript 变量\r",p:"\r",l:"JavaScript/base/variable.html",a:"javascript-变量"},"55.1":{t:"var 关键字\r",p:`var msg // 默认 undefined

声明后可以改变类型，但不推荐
var msg = 'hi'
msg = 100 // 合法，但不推荐

var 声明作用域，一个函数内部定义一个变量， ...`,l:"JavaScript/base/variable.html#var-关键字",a:"var-关键字"},"55.2":{t:"let 声明\r",p:`let 声明的范围是块作用域：
if (true) {
  var name = 'zhangsan'
  console.log(name) // zhangsan
}
console.log(na ...`,l:"JavaScript/base/variable.html#let-声明",a:"let-声明"},"55.3":{t:"暂时性死区\r",p:`// name 会被提升
console.log(name) // undefined
var name = 'zhangsan'
// age 不会被提升
console.log(age) // R ...`,l:"JavaScript/base/variable.html#暂时性死区",a:"暂时性死区"},"55.4":{t:"全局声明\r",p:`let 在全局作用域中声明的变量不会成为 window 对象的属性（var 声明的变量则会）
var name = 'zhangsan'
console.log(window.name) // 'zh ...`,l:"JavaScript/base/variable.html#全局声明",a:"全局声明"},"55.5":{t:"条件声明\r",p:`


JavaScript 引擎会自动将多余的声明在作用域顶部合并为一个声明。但是 let 是块级作用域，所以检查不到之前是否声明过。



try/catch 语句或 typeof 操作符也不能解决 ...`,l:"JavaScript/base/variable.html#条件声明",a:"条件声明"},"55.6":{t:"for 循环中的 let 声明\r",p:`使用 var 时变量会渗透到外面
for (var i = 0; i &lt; 5; ++i) {
  // 循环逻辑
}
console.log(i) // 5

let 之后则不会，因为遇到 {} ...`,l:"JavaScript/base/variable.html#for-循环中的-let-声明",a:"for-循环中的-let-声明"},"55.7":{t:"const 声明\r",p:`const 的行为与 let 基本相同，但是他是常量，声明之后不能修改，尝试修改 const 声明的变量会导致运行时错误。
const age = 18
age = 30 // TypeError:  ...`,l:"JavaScript/base/variable.html#const-声明",a:"const-声明"},"55.8":{t:"函数声明提升与 var 声明提升\r",p:`var a = 'Tom'
function a() {}

console.log(a) // 'Tom'

function与var都存在变量提升，但function比var优先级高。上面的代码就 ...`,l:"JavaScript/base/variable.html#函数声明提升与-var-声明提升",a:"函数声明提升与-var-声明提升"},"56.0":{t:"# BOM document 对象\r",p:`Document 对象代表当前窗口或标签页中加载的文档。它提供了对文档内容进行访问和操作的方法和属性。
`,l:"JavaScript/BOM/document.html",a:"bom-document-对象"},"56.1":{t:"常见操作\r",p:`
获取元素：可以使用document.getElementById(id)获取具有指定 id 的元素。
修改文档结构：可以使用document.createElement(tagName)创建新元素， ...`,l:"JavaScript/BOM/document.html#常见操作",a:"常见操作"},"56.2":{t:"示例\r",p:`// 获取具有id为&quot;myElement&quot;的元素
var element = document.getElementById('myElement')

// 创建一个新的段落元素 ...`,l:"JavaScript/BOM/document.html#示例",a:"示例"},"57.0":{t:"# BOM history 对象\r",p:`History 对象提供了对浏览器历史记录的操作。可以使用它向前或向后导航，加载历史记录中的不同页面。
`,l:"JavaScript/BOM/history.html",a:"bom-history-对象"},"57.1":{t:"常见方法\r",p:`
history.back()：导航到上一个页面。
history.forward()：导航到下一个页面。
history.go(delta)：导航到相对于当前页面的偏移量为delta的页面。

`,l:"JavaScript/BOM/history.html#常见方法",a:"常见方法"},"57.2":{t:"示例\r",p:`// 导航到上一个页面
history.back()

// 导航到下一个页面
history.forward()

// 导航到相对于当前页面的偏移量为2的页面
history.go(2)

`,l:"JavaScript/BOM/history.html#示例",a:"示例"},"58.0":{t:"# JavaScript BOM\r",p:`BOM（Browser Object Model）是 JavaScript 中用于与浏览器交互的一组对象和方法集合。它提供了访问和控制浏览器窗口及其内容的功能。以下是一些常见的 BOM 对象：


w ...`,l:"JavaScript/BOM/index.html",a:"javascript-bom"},"59.0":{t:"# BOM location 对象\r",p:`Location 对象提供了与当前窗口的 URL 相关的信息和操作。它包含了 URL 的各个部分，如协议、主机名、路径和查询参数等。
`,l:"JavaScript/BOM/location.html",a:"bom-location-对象"},"59.1":{t:"常见属性和方法\r",p:`
location.href：当前窗口的完整 URL。
location.protocol：URL 的协议部分。
location.hostname：URL 的主机名部分。
location.path ...`,l:"JavaScript/BOM/location.html#常见属性和方法",a:"常见属性和方法"},"59.2":{t:"示例\r",p:`// 获取当前窗口的URL
console.log(location.href)

// 获取URL的协议
console.log(location.protocol)

// 将页面重定向到新的UR ...`,l:"JavaScript/BOM/location.html#示例",a:"示例"},"60.0":{t:"# BOM navigator 对象\r",p:`Navigator 对象提供了关于浏览器的信息，如浏览器的名称、版本、用户代理字符串等。它还可以用于检测浏览器的功能和特性。
`,l:"JavaScript/BOM/navigator.html",a:"bom-navigator-对象"},"60.1":{t:"常见属性\r",p:`
navigator.userAgent：包含用户代理字符串，用于识别浏览器和操作系统。
navigator.appName：浏览器的名称。
navigator.appVersion：浏览器的版本。
 ...`,l:"JavaScript/BOM/navigator.html#常见属性",a:"常见属性"},"60.2":{t:"示例\r",p:`// 获取用户代理字符串
console.log(navigator.userAgent)

// 获取浏览器的名称
console.log(navigator.appName)

// 获取浏览器的 ...`,l:"JavaScript/BOM/navigator.html#示例",a:"示例"},"61.0":{t:"# BOM screen 对象\r",p:`Screen 对象提供了关于用户屏幕的信息，如屏幕的尺寸、分辨率等。可以使用它来调整页面在不同屏幕上的显示。
`,l:"JavaScript/BOM/screen.html",a:"bom-screen-对象"},"61.1":{t:"常见属性\r",p:`
screen.width：屏幕的宽度。
screen.height：屏幕的高度。
screen.availWidth：屏幕的可用宽度，不包括系统任务栏或工具栏。
screen.availHeight ...`,l:"JavaScript/BOM/screen.html#常见属性",a:"常见属性"},"61.2":{t:"示例\r",p:`// 获取屏幕的宽度
console.log('屏幕宽度：' + screen.width + ' 像素')

// 获取屏幕的高度
console.log('屏幕高度：' + screen.heig ...`,l:"JavaScript/BOM/screen.html#示例",a:"示例"},"62.0":{t:"# BOM window 对象\r",p:`Window 对象是 BOM 的顶级对象，表示浏览器窗口或标签页。它提供了操作浏览器窗口的方法和属性，以及与窗口内容交互的功能。
`,l:"JavaScript/BOM/window.html",a:"bom-window-对象"},"62.1":{t:"常见属性和方法\r",p:`
window.open(url, name, specs)：打开一个新的浏览器窗口或标签页。
window.close()：关闭当前窗口。
window.resizeTo(width, height ...`,l:"JavaScript/BOM/window.html#常见属性和方法",a:"常见属性和方法"},"62.2":{t:"示例\r",p:`// 打开一个新窗口
window.open('https://www.example.com', '_blank')

// 关闭当前窗口
window.close()

// 调整窗口大小
win ...`,l:"JavaScript/BOM/window.html#示例",a:"示例"},"63.0":{t:"# JavaScript Ajax\r",p:"\r",l:"JavaScript/core/ajax.html",a:"javascript-ajax"},"63.1":{t:"Ajax简介\r",p:`AJAX 全称(Async Javascript and XML)
即异步的 JavaScript 和 XML，是一种创建交互式网页应用的网页开发技术，可以在不重新加载整个网页的情况下，与服务器交换数 ...`,l:"JavaScript/core/ajax.html#ajax简介",a:"ajax简介"},"63.2":{t:"二、实现过程\r",p:`实现 Ajax 异步交互需要服务器逻辑进行配合，需要完成以下步骤：


创建 Ajax 的核心对象 XMLHttpRequest 对象


通过 XMLHttpRequest 对象的 open() 方 ...`,l:"JavaScript/core/ajax.html#二、实现过程",a:"二、实现过程"},"63.3":{t:"1. 创建 XMLHttpRequest 对象\r",p:`通过XMLHttpRequest() 构造函数用于初始化一个 XMLHttpRequest 实例对象
const xhr = new XMLHttpRequest()

`,l:"JavaScript/core/ajax.html#_1-创建-xmlhttprequest-对象",a:"_1-创建-xmlhttprequest-对象"},"63.4":{t:"2. 与服务器建立连接\r",p:`通过 XMLHttpRequest 对象的 open() 方法与服务器建立连接
xhr.open(method, url, [async][, user][, password])

参数说明：


 ...`,l:"JavaScript/core/ajax.html#_2-与服务器建立连接",a:"_2-与服务器建立连接"},"63.5":{t:"3. 给服务端发送数据\r",p:`通过 XMLHttpRequest 对象的 send() 方法，将客户端页面的数据发送给服务端
xhr.send([body])

body: 在 XHR 请求中要发送的数据体，如果不传递数据则为 n ...`,l:"JavaScript/core/ajax.html#_3-给服务端发送数据",a:"_3-给服务端发送数据"},"63.6":{t:"4. 绑定 onreadystatechange 事件\r",p:`onreadystatechange 事件用于监听服务器端的通信状态，主要监听的属性为XMLHttpRequest.readyState ,
关于XMLHttpRequest.readyState属性 ...`,l:"JavaScript/core/ajax.html#_4-绑定-onreadystatechange-事件",a:"_4-绑定-onreadystatechange-事件"},"63.7":{t:"三、封装与使用\r",p:"\r",l:"JavaScript/core/ajax.html#三、封装与使用",a:"三、封装与使用"},"63.8":{t:"封装\r",p:`通过上面对XMLHttpRequest 对象的了解，下面来封装一个简单的ajax请求
//封装一个ajax请求
function ajax(options) {
    //创建XMLHttpRequ ...`,l:"JavaScript/core/ajax.html#封装",a:"封装"},"63.9":{t:"使用\r",p:`使用方式如下
ajax({
  type: 'post',
  dataType: 'json',
  data: {},
  url: 'https://xxxx',
  success: func ...`,l:"JavaScript/core/ajax.html#使用",a:"使用"},"64.0":{t:"# 轮播图\r",p:"\r",l:"JavaScript/core/carousel.html",a:"轮播图"},"64.1":{t:"代码实现\r",p:`:::code-group
&lt;&lt;&lt; @/JavaScript/core/components/carousel.html[示例]
:::
`,l:"JavaScript/core/carousel.html#代码实现",a:"代码实现"},"65.0":{t:"# JavaScript 闭包\r",p:`
闭包（Closure）是 JavaScript 中一种强大且常用的特性。它允许内部函数访问其外部函数的作用域，即使外部函数已经执行完毕，也可以继续访问。闭包可以捕获外部函数的变量和参数，并将其保存在 ...`,l:"JavaScript/core/closure.html",a:"javascript-闭包"},"65.1":{t:"创建闭包\r",p:`要创建一个闭包，通常需要在一个函数内部定义另一个函数，并将其返回。返回的函数就是闭包，它可以访问其外部函数中的变量和参数。
function outerFunction() {
  var outer ...`,l:"JavaScript/core/closure.html#创建闭包",a:"创建闭包"},"65.2":{t:"捕获外部变量\r",p:`闭包可以捕获并访问其外部函数的变量，即使外部函数已经执行完毕。这使得闭包可以在不同的上下文中使用和保留外部变量的状态。
function counter() {
  var count = 0

   ...`,l:"JavaScript/core/closure.html#捕获外部变量",a:"捕获外部变量"},"65.3":{t:"保护数据\r",p:`通过使用闭包，可以创建私有变量，这些变量无法从外部访问，只能通过内部函数提供的公共接口访问和修改。
function createPerson(name) {
  var age = 0

  fun ...`,l:"JavaScript/core/closure.html#保护数据",a:"保护数据"},"65.4":{t:"实际用途\r",p:`

封装私有变量和方法：通过使用闭包，可以创建私有变量和方法，将其封装在函数内部，只暴露公共接口给外部。这种方式可以避免全局命名冲突，并提供了一种模块化的封装方式。


创建工厂函数：通过使用闭包，可 ...`,l:"JavaScript/core/closure.html#实际用途",a:"实际用途"},"65.5":{t:"注意事项\r",p:`

闭包会导致内存占用增加，因为外部函数的变量和作用域在闭包中被保留，即使外部函数执行完毕也不会被释放。因此，在使用闭包时要注意内存管理，避免过度使用闭包导致内存泄漏。


闭包中的变量是引用传递的， ...`,l:"JavaScript/core/closure.html#注意事项",a:"注意事项"},"66.0":{t:"# JavaScript 深浅拷贝\r",p:"\r",l:"JavaScript/core/copy.html",a:"javascript-深浅拷贝"},"66.1":{t:"浅拷贝\r",p:`浅拷贝是创建一个新对象，新对象的属性值是原始对象属性值的引用。也就是说，新对象和原始对象共享相同的引用类型属性，对其中一个对象的修改会影响到另一个对象。
在 JavaScript 中，可以使用一些简单 ...`,l:"JavaScript/core/copy.html#浅拷贝",a:"浅拷贝"},"66.2":{t:"深拷贝\r",p:`深拷贝是创建一个新对象，新对象的属性值与原始对象的属性值完全独立，二者互不影响。
在 JavaScript 中，由于对象的属性可能是引用类型，所以需要递归复制对象的所有属性，包括嵌套的对象和数组。以下 ...`,l:"JavaScript/core/copy.html#深拷贝",a:"深拷贝"},"67.0":{t:"# JavaScript 函数柯里化\r",p:"\r",l:"JavaScript/core/currying.html",a:"javascript-函数柯里化"},"67.1":{t:"什么是函数柯里化\r",p:"JavaScript 函数柯里化是一种将多个参数的函数转化为一系列接受单个参数的函数的过程。通过函数柯里化，可以将原始函数分解为多个嵌套的函数，每个函数都接收一个参数，并返回一个新函数等待接收下一个参 ...",l:"JavaScript/core/currying.html#什么是函数柯里化",a:"什么是函数柯里化"},"67.2":{t:"函数柯里化的优点和应用场景\r",p:`

参数复用和定制：通过柯里化，可以将函数的一部分参数预先设置，然后在后续调用时只传递剩余的参数。这使得函数的复用和定制变得更加灵活和方便。


延迟执行：通过柯里化，可以将函数的执行延迟到后续的调用 ...`,l:"JavaScript/core/currying.html#函数柯里化的优点和应用场景",a:"函数柯里化的优点和应用场景"},"67.3":{t:"实现函数柯里化的方法\r",p:`在 JavaScript 中实现柯里化函数的方法有多种。下面是几种常见的实现方式：
`,l:"JavaScript/core/currying.html#实现函数柯里化的方法",a:"实现函数柯里化的方法"},"67.4":{t:"1. 使用闭包递归\r",p:`function curry(func) {
  return function curried(...args) {
    if (args.length &gt;= func.length) { ...`,l:"JavaScript/core/currying.html#_1-使用闭包递归",a:"_1-使用闭包递归"},"67.5":{t:"2. 使用递归和占位符\r",p:`function curry(func) {
  return function curried(...args) {
    if (args.includes(curry.placeholder) ...`,l:"JavaScript/core/currying.html#_2-使用递归和占位符",a:"_2-使用递归和占位符"},"67.6":{t:"3. 使用箭头函数和递归\r",p:`const curry = (func) =&gt; {
  const curried = (...args) =&gt;
    args.length &gt;= func.length ? f ...`,l:"JavaScript/core/currying.html#_3-使用箭头函数和递归",a:"_3-使用箭头函数和递归"},"68.0":{t:"# JavaScript 节流和防抖\r",p:`
在 JavaScript 中，节流（Throttling）和防抖（Debouncing）是两种常见的性能优化技术，用于限制函数的执行频率。它们可以帮助控制事件处理函数的触发次数，以减少资源消耗和提升 ...`,l:"JavaScript/core/debounce.html",a:"javascript-节流和防抖"},"68.1":{t:"节流\r",p:`节流函数适用事件：

window 的 resize、scroll
mousedown、mousemove
keyup、keydown ...

`,l:"JavaScript/core/debounce.html#节流",a:"节流"},"68.2":{t:"定义\r",p:`节流是一种控制函数执行频率的技术。当一个函数被频繁调用时，节流可以限制函数在一定时间间隔内只执行一次。
节流的实现思路是设置一个定时器，在函数被调用时先检查定时器是否存在。如果定时器不存在，则立即执行 ...`,l:"JavaScript/core/debounce.html#定义",a:"定义"},"68.3":{t:"其他写法\r",p:`
使用时间戳写法，事件会立即执行，停止触发后没有办法再次执行

function throttled1(fn, delay = 500) {
  let oldtime = Date.now()
   ...`,l:"JavaScript/core/debounce.html#其他写法",a:"其他写法"},"68.4":{t:"防抖\r",p:`防抖函数适用事件：

window 的 resize、scroll
mousedown、mousemove、keyup、keydown
表单事件 ...

`,l:"JavaScript/core/debounce.html#防抖",a:"防抖"},"68.5":{t:"定义\r",p:`防抖是一种控制函数执行频率的技术。当一个函数被频繁调用时，防抖可以延迟函数的执行，直到某个连续的时间段内没有新的函数调用发生。
防抖的实现思路是设置一个定时器，在函数被调用时先清除之前的定时器，并设置 ...`,l:"JavaScript/core/debounce.html#定义",a:"定义"},"68.6":{t:"立即执行\r",p:`防抖如果需要立即执行，可加入第三个参数用于判断，实现如下：
function debounce(func, wait, immediate) {
  let timeout

  return fun ...`,l:"JavaScript/core/debounce.html#立即执行",a:"立即执行"},"68.7":{t:"用法\r",p:`
导入或定义防抖|节流函数

function debounce(func, delay) {
  let timerId
  return function (...args) {
    clea ...`,l:"JavaScript/core/debounce.html#用法",a:"用法"},"69.0":{t:"# 数组去重\r",p:`const arr = [1, 1, '1', 17, true, true, false, false, 'true', 'a', {}, {}]
// =&gt; [1, '1', 17, tru ...`,l:"JavaScript/core/duplicate.html",a:"数组去重"},"69.1":{t:"1. 使用 set\r",p:`const array = [1, 2, 2, 3, 3, 4, 5, 5]

const uniqueArray = [...new Set(array)]

console.log(uniqueA ...`,l:"JavaScript/core/duplicate.html#_1-使用-set",a:"_1-使用-set"},"69.2":{t:"2. for 循环\r",p:`const unique = (arr) =&gt; {
  let len = arr.length
  for (let i = 0; i &lt; len; i++) {
    for (le ...`,l:"JavaScript/core/duplicate.html#_2-for-循环",a:"_2-for-循环"},"69.3":{t:"3. 使用 indexOf\r",p:`const unique = (arr) =&gt; {
  const res = []
  for (let i = 0; i &lt; arr.length; i++) {
    if (re ...`,l:"JavaScript/core/duplicate.html#_3-使用-indexof",a:"_3-使用-indexof"},"69.4":{t:"4. 使用 include\r",p:`const unique = (arr) =&gt; {
  const res = []
  for (let i = 0; i &lt; arr.length; i++) {
    if (!r ...`,l:"JavaScript/core/duplicate.html#_4-使用-include",a:"_4-使用-include"},"69.5":{t:"5. 使用 filter\r",p:`const unique = (arr) =&gt; {
  return arr.filter((item, index) =&gt; {
    return arr.indexOf(item)  ...`,l:"JavaScript/core/duplicate.html#_5-使用-filter",a:"_5-使用-filter"},"69.6":{t:"6. 使用 Map\r",p:`const unique = (arr) =&gt; {
  const map = new Map()
  const res = []
  for (let i = 0; i &lt; arr.l ...`,l:"JavaScript/core/duplicate.html#_6-使用-map",a:"_6-使用-map"},"70.0":{t:"# 数组扁平化\r",p:`
数组扁平化是指将一个多维数组变为一个一维数组

const arr = [1, [2, [3, [4, 5]]], 6]
// =&gt; [1, 2, 3, 4, 5, 6]

`,l:"JavaScript/core/flattening.html",a:"数组扁平化"},"70.1":{t:"1. 使用 flat()\r",p:`const res1 = arr.flat()
// 使用Infinity，无论多少层都将扁平化为一维数组。
const res1 = arr.flat(Infinity)

`,l:"JavaScript/core/flattening.html#_1-使用-flat",a:"_1-使用-flat"},"70.2":{t:"2. 利用正则\r",p:`const res2 = JSON.stringify(arr).replace(/\\[|\\]/g, '').split(',')

// 优化
const res3 = JSON.parse('[' ...`,l:"JavaScript/core/flattening.html#_2-利用正则",a:"_2-利用正则"},"70.3":{t:"3. 使用 reduce\r",p:`const flatten = (arr) =&gt; {
  return arr.reduce((pre, cur) =&gt; {
    return pre.concat(Array.isA ...`,l:"JavaScript/core/flattening.html#_3-使用-reduce",a:"_3-使用-reduce"},"70.4":{t:"4. 函数递归\r",p:`const res5 = []
const fn = (arr) =&gt; {
  for (let i = 0; i &lt; arr.length; i++) {
    if (Array.i ...`,l:"JavaScript/core/flattening.html#_4-函数递归",a:"_4-函数递归"},"71.0":{t:"# JavaScript Promise\r",p:`Promise是一种异步编程的解决方案，它可以避免回调地狱，使代码更加简洁易读。Promise对象代表一个异步操作的最终完成或失败，并返回一个值。
在 JavaScript 中，Promise有三种状 ...`,l:"JavaScript/core/promise.html",a:"javascript-promise"},"71.1":{t:"创建 Promise\r",p:`Promise 可以通过 new Promise() 构造函数来创建。它接收一个带有两个参数的回调函数，回调函数包含两个参数：resolve 和 reject。
const promise = new ...`,l:"JavaScript/core/promise.html#创建-promise",a:"创建-promise"},"71.2":{t:"处理 Promise 结果\r",p:`通过调用 Promise 实例的 .then() 方法可以处理异步操作成功的结果，通过调用 .catch() 方法可以处理异步操作失败的结果。
promise
  .then((value) =&gt ...`,l:"JavaScript/core/promise.html#处理-promise-结果",a:"处理-promise-结果"},"71.3":{t:"Promise 链式调用\r",p:`Promise 的一个重要特性是可以通过链式调用来串联多个异步操作。通过在 .then() 方法中返回新的 Promise 实例，可以将多个异步操作连接起来。
promise
  .then((val ...`,l:"JavaScript/core/promise.html#promise-链式调用",a:"promise-链式调用"},"71.4":{t:"Promise.all()\r",p:"Promise.all() 方法接收一个 Promise 实例数组，返回一个新的 Promise 实例。该新实例在数组中的所有 Promise 实例都成功完成时才会成功，并将所有 Promise 实例 ...",l:"JavaScript/core/promise.html#promise-all",a:"promise-all"},"71.5":{t:"使用 `Promise` 封装一个 Ajax\r",p:`下面是一个使用 Promise 封装的基本 Ajax 请求的示例：
function ajax(url, method, data) {
  return new Promise((resolve,  ...`,l:"JavaScript/core/promise.html#使用-promise-封装一个-ajax",a:"使用-promise-封装一个-ajax"},"72.0":{t:"# JavaScript 原型\r",p:"\r",l:"JavaScript/core/prototype.html",a:"javascript-原型"},"72.1":{t:"原型\r",p:`原型是 JavaScript 中每个对象的基础。每个 JavaScript 对象都有一个原型对象，它是一个包含属性和方法的对象。这个原型对象可以被其他对象继承，从而实现属性和方法的共享。
在 Java ...`,l:"JavaScript/core/prototype.html#原型",a:"原型"},"72.2":{t:"原型链\r",p:`原型链是一个对象和它的原型对象之间的连接。当你访问一个对象的属性或方法时，JavaScript 会首先查找该对象本身是否有这个属性或方法，如果没有，它会沿着原型链向上查找，直到找到为止。
functi ...`,l:"JavaScript/core/prototype.html#原型链",a:"原型链"},"72.3":{t:"原型对象\r",p:`每个 JavaScript 对象都有一个关联的原型对象。你可以通过 __proto__ 属性来访问对象的原型对象。例如：
const person = { name: 'John' }
console ...`,l:"JavaScript/core/prototype.html#原型对象",a:"原型对象"},"72.4":{t:"原型继承\r",p:`原型继承是 JavaScript 中对象之间共享属性和方法的一种方式。当一个对象继承了另一个对象的原型时，它可以访问该原型对象上的属性和方法。
让我们再次看一个例子：
function Animal( ...`,l:"JavaScript/core/prototype.html#原型继承",a:"原型继承"},"72.5":{t:"JavaScript 中的原型继承方式\r",p:`JavaScript 中有多种方式来实现原型继承，让我们一一了解这些方式。
`,l:"JavaScript/core/prototype.html#javascript-中的原型继承方式",a:"javascript-中的原型继承方式"},"72.6":{t:"1. 构造函数和原型链\r",p:`这是最常见的原型继承方式。它使用构造函数来创建对象属性，同时使用原型链来共享方法。在前面的例子中，我们已经看到了这种方式的示例。
function Animal(name) {
  this.name ...`,l:"JavaScript/core/prototype.html#_1-构造函数和原型链",a:"_1-构造函数和原型链"},"72.7":{t:"2. Object.create()\r",p:`Object.create() 方法是一种更简单的方式来创建一个对象并指定其原型。它接受一个原型对象作为参数，然后返回一个新对象，该对象的原型就是传入的原型对象。
const animal = {
  ...`,l:"JavaScript/core/prototype.html#_2-object-create",a:"_2-object-create"},"72.8":{t:"3. 类继承\r",p:`ES6 引入了类（class）的概念，它提供了一种更简单的方式来实现原型继承。类可以使用 extends 关键字继承另一个类的属性和方法。
class Animal {
  constructor(n ...`,l:"JavaScript/core/prototype.html#_3-类继承",a:"_3-类继承"},"72.9":{t:"4. Object.setPrototypeOf()\r",p:`Object.setPrototypeOf() 方法允许你在运行时更改对象的原型。这个方法接受两个参数：要更改原型的对象和新的原型对象。
const animal = {
  eat: functio ...`,l:"JavaScript/core/prototype.html#_4-object-setprototypeof",a:"_4-object-setprototypeof"},"72.10":{t:"原型继承与传统继承的区别\r",p:`JavaScript 中的原型继承与传统面向对象编程语言中的继承有一些重要区别。以下是一些主要区别：
`,l:"JavaScript/core/prototype.html#原型继承与传统继承的区别",a:"原型继承与传统继承的区别"},"72.11":{t:"1. 动态性\r",p:`JavaScript 的原型继承是动态的，这意味着你可以在运行时更改对象的原型。这种灵活性可以带来很多优势，但也需要小心使用，以避免不必要的复杂性。
`,l:"JavaScript/core/prototype.html#_1-动态性",a:"_1-动态性"},"72.12":{t:"2. 原型链\r",p:`JavaScript 中的继承是通过原型链来实现的，这意味着一个对象可以继承多个原型对象的属性和方法。这种多重继承的能力是传统继承中不常见的。
`,l:"JavaScript/core/prototype.html#_2-原型链",a:"_2-原型链"},"72.13":{t:"3. 对象与类\r",p:`传统面向对象编程语言通常使用类来定义对象的结构和行为，而 JavaScript 使用构造函数和原型对象。这种不同的方式可以导致不同的编程风格和理念。
`,l:"JavaScript/core/prototype.html#_3-对象与类",a:"_3-对象与类"},"72.14":{t:"使用原型的最佳实践\r",p:`在使用原型时，有一些最佳实践可以帮助你编写更清晰、更可维护的代码：
`,l:"JavaScript/core/prototype.html#使用原型的最佳实践",a:"使用原型的最佳实践"},"72.15":{t:"1. 避免直接修改内建对象的原型\r",p:`虽然你可以修改内建对象的原型，但最好不要这样做，因为它可能会导致意外的行为和不稳定性。如果需要扩展内建对象的功能，可以创建一个自定义的工具函数或对象，而不是修改原型。
`,l:"JavaScript/core/prototype.html#_1-避免直接修改内建对象的原型",a:"_1-避免直接修改内建对象的原型"},"72.16":{t:"2. 将方法添加到原型上\r",p:`将方法添加到原型上而不是在构造函数内部定义方法，可以节省内存，因为所有对象实例共享同一个方法。这样可以降低内存使用，特别是当有大量对象实例时。
`,l:"JavaScript/core/prototype.html#_2-将方法添加到原型上",a:"_2-将方法添加到原型上"},"72.17":{t:"3. 注意原型链中的属性和方法覆盖\r",p:`当在子对象上定义与父对象相同名称的属性或方法时，它会覆盖父对象上的属性或方法。因此，在命名属性和方法时要小心，以避免不必要的覆盖。
`,l:"JavaScript/core/prototype.html#_3-注意原型链中的属性和方法覆盖",a:"_3-注意原型链中的属性和方法覆盖"},"72.18":{t:"4. 使用 Object.create()来创建对象\r",p:`Object.create() 方法提供了一种更灵活的方式来创建对象，并指定其原型。它可以帮助你更清晰地定义对象之间的继承关系。
`,l:"JavaScript/core/prototype.html#_4-使用-object-create-来创建对象",a:"_4-使用-object-create-来创建对象"},"73.0":{t:"# 详解数组中的 reduce 方法\r",p:`reduce()是 JavaScript 数组的一个高阶函数，它用于对数组中的元素进行累积操作，将数组缩减为单个值。
通过reduce()方法，我们可以对数组中的每个元素进行自定义的累积运算，最终得到 ...`,l:"JavaScript/core/reduce.html",a:"详解数组中的-reduce-方法"},"73.1":{t:"语法如下\r",p:`array.reduce(callbackfn, initialValue)


callbackfn 是回调函数，它接受四个参数：前一个值（prev）、当前值（currentValue）、当前索引（ ...`,l:"JavaScript/core/reduce.html#语法如下",a:"语法如下"},"73.2":{t:"示例\r",p:"\r",l:"JavaScript/core/reduce.html#示例",a:"示例"},"73.3":{t:"（1）计算数组累积结果\r",p:`
演示如何使用reduce()方法来计算数组中所有元素的和：

const numbers = [1, 2, 3, 4]

const sum = numbers.reduce((prev, cur) ...`,l:"JavaScript/core/reduce.html#_1-计算数组累积结果",a:"_1-计算数组累积结果"},"73.4":{t:"（2）计算数组中每个元素出现的次数\r",p:`var arr = ['one', 'two', 'two', 'three', 'two', 'six', 'four', 'five', 'four', 'six']

var newArr =  ...`,l:"JavaScript/core/reduce.html#_2-计算数组中每个元素出现的次数",a:"_2-计算数组中每个元素出现的次数"},"73.5":{t:"（3）数组去重\r",p:`let arr = [1, 2, 3, 4, 4, 1]
let newArr = arr.reduce((pre, cur) =&gt; {
  if (!pre.includes(cur)) {
 ...`,l:"JavaScript/core/reduce.html#_3-数组去重",a:"_3-数组去重"},"73.6":{t:"（4）数组扁平化 二维转一维\r",p:`let arr = [
  [0, 1],
  [2, 3],
  [4, 5]
]
let newArr = arr.reduce((pre, cur) =&gt; {
  return pre.c ...`,l:"JavaScript/core/reduce.html#_4-数组扁平化-二维转一维",a:"_4-数组扁平化-二维转一维"},"73.7":{t:"（5）数组扁平化 多维转一维\r",p:`let arr = [
  [0, 1],
  [2, 3],
  [4, [5, 6, 7]]
]
const newArr = function (arr) {
  return arr.redu ...`,l:"JavaScript/core/reduce.html#_5-数组扁平化-多维转一维",a:"_5-数组扁平化-多维转一维"},"73.8":{t:"（6）对象属性求和\r",p:`var result = [
  {
    subject: 'math',
    score: 10
  },
  {
    subject: 'chinese',
    score: 20 ...`,l:"JavaScript/core/reduce.html#_6-对象属性求和",a:"_6-对象属性求和"},"73.9":{t:"注意事项\r",p:`::: tip 注意


reduce()方法适用于对数组的每个元素执行同一个累积操作，并将结果返回为单个值的情况。


在使用reduce()方法时，建议始终提供initialValue来明确指定累 ...`,l:"JavaScript/core/reduce.html#注意事项",a:"注意事项"},"74.0":{t:"# JavaScript 作用域\r",p:`作用域是指变量和函数在代码中可访问的范围。JavaScript 中有两种主要的作用域类型：全局作用域和局部作用域。
`,l:"JavaScript/core/scope.html",a:"javascript-作用域"},"74.1":{t:"全局作用域\r",p:`全局作用域是指在代码的任何地方都可访问的变量和函数。在全局作用域中声明的变量和函数可以被代码中的任何地方访问。
var globalVariable = 'Global'

function glob ...`,l:"JavaScript/core/scope.html#全局作用域",a:"全局作用域"},"74.2":{t:"局部作用域\r",p:`局部作用域是指在特定代码块（如函数、循环或条件语句）内部声明的变量和函数。这些变量和函数只能在其声明的代码块内部访问。
function outerFunction() {
  var outerVa ...`,l:"JavaScript/core/scope.html#局部作用域",a:"局部作用域"},"74.3":{t:"作用域链\r",p:"作用域链是指 JavaScript 引擎在查找变量时的嵌套作用域链条。当访问一个变量时，JavaScript 引擎首先在当前作用域的变量对象中查找，如果找不到，就会向上一级作用域继续查找，直到找到该变 ...",l:"JavaScript/core/scope.html#作用域链",a:"作用域链"},"74.4":{t:"词法作用域\r",p:`JavaScript 中的作用域是通过代码的结构和位置来确定的，而不是通过运行时的状态。这被称为词法作用域。函数在定义时就确定了自己的作用域，而不是在调用时。
var variable = 'Glob ...`,l:"JavaScript/core/scope.html#词法作用域",a:"词法作用域"},"75.0":{t:"# DOM 节点\r",p:"\r",l:"JavaScript/DOM/DOM节点.html",a:"dom-节点"},"75.1":{t:"插入节点\r",p:`在已有的 DOM 节点中插入新的 DOM 节点时，需要关注两个关键因素：首先要得到新的 DOM 节点，其次在哪个位置插入这个节点。


createElement 动态创建任意 DOM 节点


cl ...`,l:"JavaScript/DOM/DOM节点.html#插入节点",a:"插入节点"},"75.2":{t:"删除节点\r",p:`删除现有的 DOM 节点，也需要关注两个因素：首先由父节点删除子节点，其次是要删除哪个子节点。
removeChild 删除节点时一定是由父子关系。
&lt;body&gt;
  &lt;!-- 点击 ...`,l:"JavaScript/DOM/DOM节点.html#删除节点",a:"删除节点"},"75.3":{t:"查找节点\r",p:`DOM 树中的任意节点都不是孤立存在的，它们要么是父子关系，要么是兄弟关系，不仅如此，我们可以依据节点之间的关系查找节点。
`,l:"JavaScript/DOM/DOM节点.html#查找节点",a:"查找节点"},"75.4":{t:"父子关系\r",p:`
childNodes 获取全部的子节点，回车换行会被认为是空白文本节点
children 只获取元素类型节点

&lt;body&gt;
  &lt;button class=&quot;btn1& ...`,l:"JavaScript/DOM/DOM节点.html#父子关系",a:"父子关系"},"75.5":{t:"兄弟关系\r",p:`
previousSibling 获取前一个节点，以相对位置查找节点，实际应用中非常灵活。
nextSibling 获取后一个节点，以相对位置查找节点，实际应用中非常灵活。

&lt;body&gt; ...`,l:"JavaScript/DOM/DOM节点.html#兄弟关系",a:"兄弟关系"},"76.0":{t:"# JavaScript DOM\r",p:"\r",l:"JavaScript/DOM/index.html",a:"javascript-dom"},"76.1":{t:"概念\r",p:"DOM（Document Object Model）是一种用于表示和操作 HTML、XML 等文档结构的编程接口。它将文档表示为一个树状结构，每个节点都是文档中的一个元素、属性、文本或其他类型的内容。 ...",l:"JavaScript/DOM/index.html#概念",a:"概念"},"76.2":{t:"DOM 树\r",p:`&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;UTF ...`,l:"JavaScript/DOM/index.html#dom-树",a:"dom-树"},"76.3":{t:"DOM 节点\r",p:`节点是文档树的组成部分，每一个节点都是一个 DOM 对象，主要分为元素节点、属性节点、文本节点等。

【元素节点】其实就是 HTML 标签，如上图中 head、div、body 等都属于元素节点。
【 ...`,l:"JavaScript/DOM/index.html#dom-节点",a:"dom-节点"},"76.4":{t:"document\r",p:`document 是 JavaScript 内置的专门用于 DOM 的对象，该对象包含了若干的属性和方法，document 是学习 DOM 的核心。


::: tip
DOM 提供了丰富的功能和方法 ...`,l:"JavaScript/DOM/index.html#document",a:"document"},"77.0":{t:"# DOM 事件处理\r",p:`DOM 事件处理是 JavaScript 中常用的一项功能，它允许你监听和响应用户与网页元素之间的交互。下面是一些常见的方法和技巧来处理 DOM 事件：
`,l:"JavaScript/DOM/事件处理.html",a:"dom-事件处理"},"77.1":{t:"事件\r",p:`事件是编程语言中的术语，它是用来描述程序的行为或状态的，一旦行为或状态发生改变，便立即调用一个函数。
例如：用户使用【鼠标点击】网页中的一个按钮、用户使用【鼠标拖拽】网页中的一张图片
`,l:"JavaScript/DOM/事件处理.html#事件",a:"事件"},"77.2":{t:"事件监听\r",p:`::: tip
结合 DOM 使用事件时，需要为 DOM 对象添加事件监听，等待事件发生（触发）时，便立即调用一个函数。
addEventListener 是 DOM 对象专门用来添加事件监听的方法， ...`,l:"JavaScript/DOM/事件处理.html#事件监听",a:"事件监听"},"77.3":{t:"事件移除\r",p:`当我们不再需要一个事件监听器时，应该将其从元素上移除，以避免不必要的事件处理。可以使用以下方法来移除事件监听器：
element.removeEventListener('eventName', ev ...`,l:"JavaScript/DOM/事件处理.html#事件移除",a:"事件移除"},"77.4":{t:"事件类型\r",p:"\r",l:"JavaScript/DOM/事件处理.html#事件类型",a:"事件类型"},"77.5":{t:"鼠标事件\r",p:`鼠标事件是指跟鼠标操作相关的事件，如单击、双击、移动等。



事件名
作用




click
当用户点击鼠标左键时触发。


dblclick
当用户双击鼠标左键时触发。


mousedown
 ...`,l:"JavaScript/DOM/事件处理.html#鼠标事件",a:"鼠标事件"},"77.6":{t:"键盘事件\r",p:`const input = document.querySelector('input')
// 1. 键盘事件
// input.addEventListener('keydown', functi ...`,l:"JavaScript/DOM/事件处理.html#键盘事件",a:"键盘事件"},"77.7":{t:"焦点事件\r",p:`const input = document.querySelector('input')
input.addEventListener('focus', function () {
  consol ...`,l:"JavaScript/DOM/事件处理.html#焦点事件",a:"焦点事件"},"77.8":{t:"文本框输入事件\r",p:`
input 事件：当用户在文本框中输入、删除或修改文本时触发。无论是键盘输入、粘贴、剪切还是使用其他输入方法，只要文本框内容发生变化，就会触发 input 事件。
change 事件：当文本框内容发 ...`,l:"JavaScript/DOM/事件处理.html#文本框输入事件",a:"文本框输入事件"},"77.9":{t:"事件对象\r",p:`
事件处理程序的第一个参数是事件对象 event，它包含有关事件的信息，例如事件类型、目标元素等。你可以在事件处理程序中使用这些信息来执行逻辑操作。

const btn = document.que ...`,l:"JavaScript/DOM/事件处理.html#事件对象",a:"事件对象"},"77.10":{t:"事件冒泡和事件捕获\r",p:`
事件冒泡：默认情况下，事件会从触发它的元素向上冒泡到祖先元素。你可以使用 event.stopPropagation() 方法来停止事件冒泡。

&lt;body&gt;
  &lt;h3&gt;事 ...`,l:"JavaScript/DOM/事件处理.html#事件冒泡和事件捕获",a:"事件冒泡和事件捕获"},"77.11":{t:"常见事件类型\r",p:`以下是一些常见的 DOM 事件类型：


鼠标事件：click、mouseover、mouseout、mousemove 等。


键盘事件：keyup、keydown、keypress 等。


表 ...`,l:"JavaScript/DOM/事件处理.html#常见事件类型",a:"常见事件类型"},"77.12":{t:"事件委托\r",p:"JavaScript 事件委托是一种利用事件冒泡原理来简化事件处理的技术。通过将事件监听器绑定到一个父元素上，然后利用事件冒泡机制，从父元素中捕获和处理子元素触发的事件。这样可以减少事件处理程序的数量 ...",l:"JavaScript/DOM/事件处理.html#事件委托",a:"事件委托"},"78.0":{t:"# DOM 创建和操作元素\r",p:`
createElement(): 创建新的元素节点。
appendChild(): 将一个节点添加为另一个节点的子节点。
removeChild(): 删除指定的子节点。
setAttribute( ...`,l:"JavaScript/DOM/创建和操作元素.html",a:"dom-创建和操作元素"},"78.1":{t:"创建元素\r",p:`使用 createElement 方法创建新元素：
const newElement = document.createElement('tagName')

其中 tagName 是你想要创建的元素 ...`,l:"JavaScript/DOM/创建和操作元素.html#创建元素",a:"创建元素"},"78.2":{t:"设置元素属性和内容\r",p:`设置元素的属性：使用 setAttribute 方法：
element.setAttribute('attributeName', 'attributeValue')

设置元素的文本内容：使用 te ...`,l:"JavaScript/DOM/创建和操作元素.html#设置元素属性和内容",a:"设置元素属性和内容"},"78.3":{t:"操作元素的父子关系\r",p:`将新元素添加到父元素中：使用 appendChild 方法：
parentElement.appendChild(newElement)

这将把 newElement 添加为 parentEleme ...`,l:"JavaScript/DOM/创建和操作元素.html#操作元素的父子关系",a:"操作元素的父子关系"},"79.0":{t:"# DOM 样式和类操作\r",p:`在 JavaScript 中，可以使用 DOM（文档对象模型）来操作元素的样式和类。以下是一些常用的方法和技巧：
`,l:"JavaScript/DOM/样式和类操作.html",a:"dom-样式和类操作"},"79.1":{t:"样式操作\r",p:`

修改元素的内联样式：使用 style 对象来访问和修改元素的样式属性。
element.style.backgroundColor = 'red'

这里的 backgroundColor 是你要 ...`,l:"JavaScript/DOM/样式和类操作.html#样式操作",a:"样式操作"},"79.2":{t:"类操作\r",p:`

添加类名：使用 classList 属性的 add 方法。
element.classList.add('className')



移除类名：使用 classList 属性的 remove 方 ...`,l:"JavaScript/DOM/样式和类操作.html#类操作",a:"类操作"},"80.0":{t:"# DOM 获取和修改元素\r",p:`
getElementById(): 根据元素的 ID 获取元素节点。
getElementsByClassName(): 根据类名获取元素节点集合。
getElementsByTagName():  ...`,l:"JavaScript/DOM/获取和修改元素.html",a:"dom-获取和修改元素"},"80.1":{t:"获取元素\r",p:`通过 ID 获取元素：使用 getElementById 方法，传入元素的 ID。
const element = document.getElementById('elementId')

通过类名 ...`,l:"JavaScript/DOM/获取和修改元素.html#获取元素",a:"获取元素"},"80.2":{t:"修改元素\r",p:`修改元素的文本内容：使用 textContent 属性或 innerText 属性。
element.textContent = 'New content'

// 或者
element.innerT ...`,l:"JavaScript/DOM/获取和修改元素.html#修改元素",a:"修改元素"},"81.0":{t:"# JavaScript Cookie\r",p:"Cookie 是一种在客户端浏览器上存储数据的机制，允许开发者在用户计算机中存储和检索有关网站的信息。Cookie 是由服务器发送到浏览器的小型文本文件，然后浏览器会将 Cookie 存储在用户的计算 ...",l:"JavaScript/storage/cookie.html",a:"javascript-cookie"},"81.1":{t:"设置 Cookie\r",p:`可以使用 document.cookie 属性来设置 Cookie。document.cookie 属性是一个字符串，包含一个或多个以分号分隔的键值对。
document.cookie = 'user ...`,l:"JavaScript/storage/cookie.html#设置-cookie",a:"设置-cookie"},"81.2":{t:"获取 Cookie\r",p:`可以使用 document.cookie 属性来获取存储在浏览器中的所有 Cookie。
var cookies = document.cookie
console.log(cookies)

doc ...`,l:"JavaScript/storage/cookie.html#获取-cookie",a:"获取-cookie"},"81.3":{t:"删除 Cookie\r",p:`可以通过将 Cookie 的过期时间设置为过去的时间来删除 Cookie。
document.cookie = 'username=; expires=Thu, 01 Jan 1970 00:00:0 ...`,l:"JavaScript/storage/cookie.html#删除-cookie",a:"删除-cookie"},"81.4":{t:"注意事项\r",p:`

每个域名下的 Cookie 是相互独立的，不同域名之间的 Cookie 是隔离的。


document.cookie 返回的是一个字符串，包含当前域名下的所有 Cookie。需要自行解析和处理字 ...`,l:"JavaScript/storage/cookie.html#注意事项",a:"注意事项"},"82.0":{t:"# JavaScript localStorage\r",p:"localStorage 是 Web Storage API 提供的一种本地存储机制，允许开发者在浏览器中存储和检索持久化的键值对数据。与 sessionStorage 不同，localStorage ...",l:"JavaScript/storage/localStorage.html",a:"javascript-localstorage"},"82.1":{t:"存储数据\r",p:"可以使用 localStorage.setItem(key, value) 方法将数据存储到 localStorage 中。其中，key 是要存储的数据的键，value 是对应的值。存储的值必须是字符 ...",l:"JavaScript/storage/localStorage.html#存储数据",a:"存储数据"},"82.2":{t:"获取数据\r",p:`可以使用 localStorage.getItem(key) 方法根据键从 localStorage 中检索数据。如果键不存在，返回 null。
var username = localStorage ...`,l:"JavaScript/storage/localStorage.html#获取数据",a:"获取数据"},"82.3":{t:"更新数据\r",p:`可以通过重新设置相同的键来更新 localStorage 中的数据。
localStorage.setItem('age', '26')

`,l:"JavaScript/storage/localStorage.html#更新数据",a:"更新数据"},"82.4":{t:"删除数据\r",p:`可以使用 localStorage.removeItem(key) 方法来删除指定键的数据。
localStorage.removeItem('age')

`,l:"JavaScript/storage/localStorage.html#删除数据",a:"删除数据"},"82.5":{t:"清除所有数据\r",p:`可以使用 localStorage.clear() 方法来删除 localStorage 中的所有数据。
localStorage.clear()

`,l:"JavaScript/storage/localStorage.html#清除所有数据",a:"清除所有数据"},"82.6":{t:"注意事项\r",p:`
localStorage 存储的值必须是字符串类型。如果需要存储其他数据类型（如对象或数组），可以使用 JSON.stringify() 方法将其转换为字符串存储，然后在需要时使用 JSON.par ...`,l:"JavaScript/storage/localStorage.html#注意事项",a:"注意事项"},"83.0":{t:"# JavaScript sessionStorage\r",p:"sessionStorage 是 Web Storage API 提供的一种本地存储机制，允许开发者在浏览器中存储和检索会话级别的键值对数据。与 localStorage 不同，sessionStor ...",l:"JavaScript/storage/sessionStorage.html",a:"javascript-sessionstorage"},"83.1":{t:"存储数据\r",p:"可以使用 sessionStorage.setItem(key, value) 方法将数据存储到 sessionStorage 中。其中，key 是要存储的数据的键，value 是对应的值。存储的值必 ...",l:"JavaScript/storage/sessionStorage.html#存储数据",a:"存储数据"},"83.2":{t:"获取数据\r",p:`可以使用 sessionStorage.getItem(key) 方法根据键从 sessionStorage 中检索数据。如果键不存在，返回 null。
var username = sessionS ...`,l:"JavaScript/storage/sessionStorage.html#获取数据",a:"获取数据"},"83.3":{t:"更新数据\r",p:`可以通过重新设置相同的键来更新 sessionStorage 中的数据。
sessionStorage.setItem('age', '26')

`,l:"JavaScript/storage/sessionStorage.html#更新数据",a:"更新数据"},"83.4":{t:"删除数据\r",p:`可以使用 sessionStorage.removeItem(key) 方法来删除指定键的数据。
sessionStorage.removeItem('age')

`,l:"JavaScript/storage/sessionStorage.html#删除数据",a:"删除数据"},"83.5":{t:"清除所有数据\r",p:`可以使用 sessionStorage.clear() 方法来删除 sessionStorage 中的所有数据。
sessionStorage.clear()

`,l:"JavaScript/storage/sessionStorage.html#清除所有数据",a:"清除所有数据"},"83.6":{t:"注意事项\r",p:`
sessionStorage 存储的值必须是字符串类型。如果需要存储其他数据类型（如对象或数组），可以使用 JSON.stringify() 方法将其转换为字符串存储，然后在需要时使用 JSON.p ...`,l:"JavaScript/storage/sessionStorage.html#注意事项",a:"注意事项"},"84.0":{t:"# 内置对象 Date\r",p:"\r",l:"JavaScript/内置对象/Date.html",a:"内置对象-date"},"84.1":{t:"Date 方法\r",p:`


方法
描述




getDate()
获取日期（月份中的日期），返回值为 1 到 31 之间的整数。


getDay()
获取星期几，返回值为 0（表示星期日）到 6（表示星期六）之间的整数 ...`,l:"JavaScript/内置对象/Date.html#date-方法",a:"date-方法"},"84.2":{t:"创建日期\r",p:`Date 对象用于处理日期和时间。
可以通过 new 关键词来定义 Date 对象。以下代码定义了名为 myDate 的 Date 对象：
有四种方式初始化日期:
new Date();
new Da ...`,l:"JavaScript/内置对象/Date.html#创建日期",a:"创建日期"},"84.3":{t:"设置日期\r",p:`通过使用针对日期对象的方法，我们可以很容易地对日期进行操作。
在下面的例子中，我们为日期对象设置了一个特定的日期 (2050 年 1 月 10 日)：
var myDate = new Date()
 ...`,l:"JavaScript/内置对象/Date.html#设置日期",a:"设置日期"},"84.4":{t:"时间戳\r",p:`时间戳是指 1970 年 01 月 01 日 00 时 00 分 00 秒起至现在的总秒数或毫秒数，它是一种特殊的计量时间的方式。

注：ECMAScript 中时间戳是以毫秒计的。

获取时间戳的方 ...`,l:"JavaScript/内置对象/Date.html#时间戳",a:"时间戳"},"84.5":{t:"两个日期比较\r",p:`var x = new Date()
x.setFullYear(2100, 0, 14)
var today = new Date()

if (x &gt; today) {
  alert('今 ...`,l:"JavaScript/内置对象/Date.html#两个日期比较",a:"两个日期比较"},"85.0":{t:"# JavaScript 内置对象\r",p:`内置对象：就是指这个语言自带的一些对象，供开发者使用，这些对象提供了一些常用或者基本而必要的功能（属性和方法），用于处理各种不同类型的数据和操作。
::: tip 简介
JavaScript 的内置对 ...`,l:"JavaScript/内置对象/index.html",a:"javascript-内置对象"},"85.1":{t:"JavaScript 的内置对象：\r",p:`


内置对象
对象说明




Object
基础对象


Array
数组


String
字符串对象


Number
数值对象


Boolean
布尔对象


Date
日期时间


Ma ...`,l:"JavaScript/内置对象/index.html#javascript-的内置对象",a:"javascript-的内置对象"},"85.2":{t:"Object\r",p:`Object 是 JavaScript 的基础对象，其他对象都继承自它。Object 提供了一系列通用的方法，如对象的创建、属性的设置和获取等。它是构建其他对象的基石。
`,l:"JavaScript/内置对象/index.html#object",a:"object"},"85.3":{t:"Array\r",p:`Array 是用于表示和操作数组的对象。它提供了一系列的方法来操作和处理数据集合，如添加、删除、查询、排序等。Array 的灵活性使得它在处理列表和集合数据时非常便利。
`,l:"JavaScript/内置对象/index.html#array",a:"array"},"85.4":{t:"String\r",p:`String 是用于表示和操作字符串的对象。它提供了许多字符串相关的方法，如拼接、查找、替换等。这些方法可以帮助我们处理文本数据，进行字符串操作和处理。
`,l:"JavaScript/内置对象/index.html#string",a:"string"},"85.5":{t:"Number\r",p:`Number 是用于表示和操作数字的对象。它提供了一系列数字相关的方法，如四舍五入、转换为字符串、计算等。Number 可以进行基本的数学计算，还可以用于日期和时间处理。
`,l:"JavaScript/内置对象/index.html#number",a:"number"},"85.6":{t:"Boolean\r",p:`Boolean 是表示和操作布尔值的对象，包括 true 和 false 两个值。它提供了逻辑运算和条件判断的功能，用于控制流程和决策。
`,l:"JavaScript/内置对象/index.html#boolean",a:"boolean"},"85.7":{t:"Date\r",p:`Date 是用于表示日期和时间的对象。它提供了一系列的方法来操作日期和时间，如获取当前时间、设置时间、格式化等。Date 可以用于处理时间相关的任务，如计算时间差、添加或减去日期等。
`,l:"JavaScript/内置对象/index.html#date",a:"date"},"85.8":{t:"Math\r",p:`Math 是用于进行数学计算的对象。它提供了一系列数学运算方法，如求绝对值、计算平方根、生成随机数等。Math 可以用于复杂的数值计算和处理。
`,l:"JavaScript/内置对象/index.html#math",a:"math"},"85.9":{t:"RegExp\r",p:`RegExp 是用于进行正则表达式匹配的对象。它提供了一系列与正则表达式相关的方法，如匹配、替换等。RegExp 可以用于文本匹配、分割、替换等复杂的文本处理任务。
除了上述常用的内置对象外，还有一些 ...`,l:"JavaScript/内置对象/index.html#regexp",a:"regexp"},"86.0":{t:"# 内置对象 Math\r",p:"Math是JavaScript的一个内置对象，它提供了一些数学属性和方法，可以对数字进行计算（用于 Number 类型）。 Math和其他全局对象不同，它不是一个构造器，Math的所有方法和属性都是静 ...",l:"JavaScript/内置对象/Math.html",a:"内置对象-math"},"86.1":{t:"属性\r",p:`
Math.PI，获取圆周率

// 圆周率
console.log(Math.PI)

`,l:"JavaScript/内置对象/Math.html#属性",a:"属性"},"86.2":{t:"方法\r",p:"\r",l:"JavaScript/内置对象/Math.html#方法",a:"方法"},"86.3":{t:"Math.abs()\r",p:`Math.abs()函数，返回一个数的绝对值
Math.abs(-10)
// 10

`,l:"JavaScript/内置对象/Math.html#math-abs",a:"math-abs"},"86.4":{t:"Math.random()\r",p:`Math.random()函数，返回一个浮点，伪随机数范围从 0 到小于 1，从 0 往上不包括 1。
// 0 ~ 1 之间的随机数, 包含 0 不包含 1
Math.random()

`,l:"JavaScript/内置对象/Math.html#math-random",a:"math-random"},"86.5":{t:"Math.ceil()\r",p:`Math.ceil()函数，返回大于或等于一个给定数的最小整数。
// 舍弃小数部分，整数部分加1
Math.ceil(3.4)

`,l:"JavaScript/内置对象/Math.html#math-ceil",a:"math-ceil"},"86.6":{t:"Math.floor()\r",p:`Math.floor()方法，返回小于或等于一个给定数字的最大整数
// 舍弃小数部分，整数部分不变
Math.floor(4.68)

`,l:"JavaScript/内置对象/Math.html#math-floor",a:"math-floor"},"86.7":{t:"Math.round()\r",p:`Math.round()，返回的是一个数字四舍五入的整数。
// 取整，四舍五入原则
Math.round(5.46539)
Math.round(4.849)

`,l:"JavaScript/内置对象/Math.html#math-round",a:"math-round"},"86.8":{t:"Math.min()\r",p:`Math.min()方法，是可以返回指定一组数据中最小值。
// 找出最小值
Math.min(24, 18, 6, 19, 21)

`,l:"JavaScript/内置对象/Math.html#math-min",a:"math-min"},"86.9":{t:"Math.max()\r",p:`Math.max()方法，是可以返回指定一组数据中最大值。
// 找出最大值
Math.max(10, 21, 7, 24, 13)

`,l:"JavaScript/内置对象/Math.html#math-max",a:"math-max"},"86.10":{t:"Math.pow()\r",p:`Math.pow()方法，返回基数(base)的指数(exponent)次幂。
// 求某个数的多少次方
Math.pow(4, 2) // 求 4 的 2 次方
Math.pow(2, 3) //  ...`,l:"JavaScript/内置对象/Math.html#math-pow",a:"math-pow"},"86.11":{t:"Math.sqrt()\r",p:`Math.sqrt()方法，返回的是一个数的平方根。
// 求某数的平方根
Math.sqrt(16) // 4

`,l:"JavaScript/内置对象/Math.html#math-sqrt",a:"math-sqrt"},"86.12":{t:"Math.sin()\r",p:`Math.sin()函数，返回一个值的正弦值。
Math.sin((90 Math.PI) / 180)
// 1

`,l:"JavaScript/内置对象/Math.html#math-sin",a:"math-sin"},"86.13":{t:"Math.cos()\r",p:`Math.cos()函数，返回一个值的余弦值。
Math.cos((360 Math.PI) / 180) // 1

Math.cos(0) // 1

`,l:"JavaScript/内置对象/Math.html#math-cos",a:"math-cos"},"86.14":{t:"Math.trunc()\r",p:`Math.trunc()函数，返回的是一个数的整数部分，不管正数还是负数，直接去掉小数点及之后的部分。
Math.trunc(13.37)
// 13
Math.trunc(42.84)
// 42
 ...`,l:"JavaScript/内置对象/Math.html#math-trunc",a:"math-trunc"},"87.0":{t:"# 内置对象 Number\r",p:"\r",l:"JavaScript/内置对象/Number.html",a:"内置对象-number"},"87.1":{t:"属性\r",p:`
Number.MAX_VALUE：表示 JavaScript 中能表示的最大数值，约为 1.79 × 10^308。
Number.MIN_VALUE：表示 JavaScript 中能表示的最小正数 ...`,l:"JavaScript/内置对象/Number.html#属性",a:"属性"},"87.2":{t:"方法\r",p:`

Number.isNaN(num)：判断给定的值是否为NaN（非数值）。如果是NaN，则返回true，否则返回false。


Number.isFinite(num)：判断给定的值是否为有限数值 ...`,l:"JavaScript/内置对象/Number.html#方法",a:"方法"},"88.0":{t:"# 内置对象 RegExp\r",p:"\r",l:"JavaScript/内置对象/RegExp.html",a:"内置对象-regexp"},"88.1":{t:"什么是 RegExp？\r",p:"RegExp（正则表达式）是一种用于匹配和操作字符串模式的强大工具。它是一种模式匹配的语法，可以用来搜索、替换和提取字符串中的特定部分。在 JavaScript 中，RegExp 是一个内置的对象类型 ...",l:"JavaScript/内置对象/RegExp.html#什么是-regexp",a:"什么是-regexp"},"88.2":{t:"正则表达式基础语法\r",p:`在 JavaScript 中，正则表达式可以使用字面量形式或构造函数形式来创建。
`,l:"JavaScript/内置对象/RegExp.html#正则表达式基础语法",a:"正则表达式基础语法"},"88.3":{t:"字面量形式\r",p:`使用斜杠（/）将正则表达式模式包围起来，后面可以跟上一些修饰符（如 g、i、m）。
const pattern = /abc/

`,l:"JavaScript/内置对象/RegExp.html#字面量形式",a:"字面量形式"},"88.4":{t:"构造函数形式\r",p:`使用 RegExp 构造函数创建正则表达式，它接收两个参数：模式字符串和可选的修饰符字符串。
const pattern = new RegExp('abc')

`,l:"JavaScript/内置对象/RegExp.html#构造函数形式",a:"构造函数形式"},"88.5":{t:"元字符\r",p:`
.：匹配除换行符之外的任何单个字符。
^：匹配字符串的开头。
$：匹配字符串的结尾。
\\*：匹配前面的元素零次或多次。
+：匹配前面的元素一次或多次。
?：匹配前面的元素零次或一次。
[]：定义字符 ...`,l:"JavaScript/内置对象/RegExp.html#元字符",a:"元字符"},"88.6":{t:"正则表达式修饰符\r",p:`修饰符用于在正则表达式中添加额外的规则，影响匹配的行为。以下是常用的修饰符：

g：全局匹配，找到所有匹配项而不仅仅是第一个。
i：不区分大小写匹配。
m：多行匹配，允许 ^ 和 $ 来匹配字符串的开 ...`,l:"JavaScript/内置对象/RegExp.html#正则表达式修饰符",a:"正则表达式修饰符"},"88.7":{t:"常用的正则表达式模式\r",p:`以下是一些常用的正则表达式模式示例：

匹配字母或数字字符：/[a-zA-Z0-9]/
匹配多个字母或数字字符：/[a-zA-Z0-9]+/
匹配数字：/\\d/
匹配非数字：/\\D/
匹配空格字符：/ ...`,l:"JavaScript/内置对象/RegExp.html#常用的正则表达式模式",a:"常用的正则表达式模式"},"88.8":{t:"正则表达式方法\r",p:`JavaScript 的字符串对象提供了一些与正则表达式相关的方法来执行匹配、搜索和替换操作。
以下是一些常用的方法：

match()：在字符串中搜索匹配正则表达式的结果，并返回一个数组或 null ...`,l:"JavaScript/内置对象/RegExp.html#正则表达式方法",a:"正则表达式方法"},"88.9":{t:"正则表达式的分组和捕获\r",p:`正则表达式还支持使用圆括号进行分组和捕获。通过使用圆括号将模式的一部分括起来，可以创建子模式，并将匹配到的子串捕获到一个分组中。
以下是一些常用的分组和捕获的示例：

使用括号进行分组：(abc)+  ...`,l:"JavaScript/内置对象/RegExp.html#正则表达式的分组和捕获",a:"正则表达式的分组和捕获"},"88.10":{t:"正则表达式标志\r",p:`除了修饰符外，JavaScript 正则表达式还支持标志（Flags），用于提供更多的匹配选项。
以下是常用的正则表达式标志：

g：全局匹配，找到所有匹配项而不仅仅是第一个。
i：不区分大小写匹配。 ...`,l:"JavaScript/内置对象/RegExp.html#正则表达式标志",a:"正则表达式标志"},"88.11":{t:"应用场景\r",p:`正则表达式在 JavaScript 中具有广泛的应用场景，例如：

表单验证：使用正则表达式验证用户输入的表单数据，如邮箱、电话号码、密码等。
字符串替换：使用正则表达式进行文本替换、格式化或删除特定 ...`,l:"JavaScript/内置对象/RegExp.html#应用场景",a:"应用场景"},"89.0":{t:"# 继承、封装和多态\r",p:"\r",l:"JavaScript/面向对象/char.html",a:"继承、封装和多态"},"89.1":{t:"继承（Inheritance）：\r",p:`继承是一种对象间的关系，它允许一个对象（称为子类或派生类）继承另一个对象（称为父类或基类）的属性和方法。子类继承了父类的特性，可以通过继承来复用代码，减少重复编写。
在 JavaScript 中，可以 ...`,l:"JavaScript/面向对象/char.html#继承-inheritance",a:"继承-inheritance"},"89.2":{t:"封装（Encapsulation）：\r",p:`封装是一种将数据和方法包裹在一个单一实体中的概念，使得外部无法直接访问对象的内部实现细节。这样的设计有助于隐藏对象的复杂性，只暴露必要的接口，提高代码的可维护性和安全性。
在 JavaScript 中 ...`,l:"JavaScript/面向对象/char.html#封装-encapsulation",a:"封装-encapsulation"},"89.3":{t:"多态（Polymorphism）：\r",p:`多态是一种允许不同对象对同一方法做出不同响应的特性。这意味着可以使用相同的方法名，但针对不同对象实现不同的行为。多态有助于实现代码的灵活性和可扩展性。
在 JavaScript 中，由于其动态类型特性 ...`,l:"JavaScript/面向对象/char.html#多态-polymorphism",a:"多态-polymorphism"},"90.0":{t:"# 类和构造函数\r",p:"在 JavaScript 中，类是一种用于创建对象的模板或蓝图，而构造函数是用于创建类的实例的特殊函数。它们是面向对象编程的两种不同方式，但在 ES6（ECMAScript 6）之后，JavaScri ...",l:"JavaScript/面向对象/class.html",a:"类和构造函数"},"90.1":{t:"构造函数\r",p:"在 ES5 及其之前的版本中，JavaScript 使用构造函数来创建对象。构造函数本质上是一个普通的函数，但通常使用new关键字来实例化对象。构造函数内部使用this关键字来引用新创建的对象，并定义 ...",l:"JavaScript/面向对象/class.html#构造函数",a:"构造函数"},"90.2":{t:"类\r",p:`在 ES6 及以上的版本中，JavaScript 引入了class关键字，使得类的定义更加简洁明了。类定义了对象的结构和行为，而对象则是类的实例。类的方法在原型上定义，因此实例共享相同的方法。
示例： ...`,l:"JavaScript/面向对象/class.html#类",a:"类"},"91.0":{t:"# JavaScript 面向对象\r",p:"\r",l:"JavaScript/面向对象/index.html",a:"javascript-面向对象"},"91.1":{t:"是什么？\r",p:`JavaScript 面向对象是一种编程范式，其中程序被组织为一组对象，每个对象都有自己的状态和行为。在面向对象编程中，对象是数据和操作数据的方法的封装单元，它们通过相互之间的交互来完成特定的任务。
`,l:"JavaScript/面向对象/index.html#是什么",a:"是什么"},"91.2":{t:"特点：\r",p:`

对象： 对象是面向对象编程的核心概念。对象是一个复合的数据类型，它可以包含属性（也称为数据成员）和方法（也称为函数成员）。


类： 类是对象的模板或蓝图，它定义了对象将具有的属性和方法。类是一种 ...`,l:"JavaScript/面向对象/index.html#特点",a:"特点"},"92.0":{t:"# 实例对象与方法\r",p:"\r",l:"JavaScript/面向对象/new.html",a:"实例对象与方法"},"92.1":{t:"创建对象\r",p:"\r",l:"JavaScript/面向对象/new.html#创建对象",a:"创建对象"},"92.2":{t:"利用 `new Object` 创建对象\r",p:`var person = new Person()
person.name = '张三'
person.age = 18
person.sex = '男'
person.sayHi = functio ...`,l:"JavaScript/面向对象/new.html#利用-new-object-创建对象",a:"利用-new-object-创建对象"},"92.3":{t:"利用字面量创建对象\r",p:`var person = {
  name: '张三',
  age: 18,
  sex: '男',
  sayHi: function () {
    alert('大家好啊~')
  }
}
 ...`,l:"JavaScript/面向对象/new.html#利用字面量创建对象",a:"利用字面量创建对象"},"92.4":{t:"利用构造函数创建对象\r",p:`构造函数：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。
::: tip 注意
 ...`,l:"JavaScript/面向对象/new.html#利用构造函数创建对象",a:"利用构造函数创建对象"},"92.5":{t:"常用方法\r",p:`
Object.assign(target, …sources)：复制一个或多个对象的属性到目标对象。
Object.create(proto, [propertiesObject])：创建一个新对象 ...`,l:"JavaScript/面向对象/new.html#常用方法",a:"常用方法"},"92.6":{t:"Object.assign(target, …sources)\r",p:`const obj1 = { a: 1 }
const obj2 = { b: 2 }
const obj3 = { c: 3 }
const mergedObj = Object.assign(ob ...`,l:"JavaScript/面向对象/new.html#object-assign-target-sources",a:"object-assign-target-sources"},"92.7":{t:"Object.create(proto, [propertiesObject])\r",p:`const myProto = { greeting: 'Hello' }
const newObj = Object.create(myProto)
console.log(newObj.greet ...`,l:"JavaScript/面向对象/new.html#object-create-proto-propertiesobject",a:"object-create-proto-propertiesobject"},"92.8":{t:"Object.entries(obj)\r",p:`const obj = { a: 1, b: 2, c: 3 }
const entries = Object.entries(obj)
console.log(entries) // [[&quot ...`,l:"JavaScript/面向对象/new.html#object-entries-obj",a:"object-entries-obj"},"92.9":{t:"Object.freeze(obj)\r",p:`const obj = { name: 'John' }

`,l:"JavaScript/面向对象/new.html#object-freeze-obj",a:"object-freeze-obj"},"92.10":{t:"Object.freeze(obj)\r",p:`obj.name = 'Jane' // 修改无效，不会影响原对象
console.log(obj.name) // John

`,l:"JavaScript/面向对象/new.html#object-freeze-obj",a:"object-freeze-obj"},"92.11":{t:"Object.getOwnPropertyDescriptor(obj, prop)\r",p:`const obj = { name: 'John' }
const descriptor = Object.getOwnPropertyDescriptor(obj, 'name')
console ...`,l:"JavaScript/面向对象/new.html#object-getownpropertydescriptor-obj-prop",a:"object-getownpropertydescriptor-obj-prop"},"92.12":{t:"Object.getOwnPropertyNames(obj)\r",p:`const obj = { name: 'John', age: 30 }
const propNames = Object.getOwnPropertyNames(obj)
console.log( ...`,l:"JavaScript/面向对象/new.html#object-getownpropertynames-obj",a:"object-getownpropertynames-obj"},"92.13":{t:"Object.getOwnPropertySymbols(obj)\r",p:`const sym = Symbol('mySymbol')
const obj = { [sym]: 'value' }
const symbols = Object.getOwnPropertyS ...`,l:"JavaScript/面向对象/new.html#object-getownpropertysymbols-obj",a:"object-getownpropertysymbols-obj"},"92.14":{t:"Object.getPrototypeOf(obj)\r",p:`const myProto = { greeting: 'Hello' }
const newObj = Object.create(myProto)
console.log(Object.getPr ...`,l:"JavaScript/面向对象/new.html#object-getprototypeof-obj",a:"object-getprototypeof-obj"},"92.15":{t:"Object.is(value1, value2)\r",p:`console.log(Object.is(5, 5)) // true
console.log(Object.is(0, -0)) // false
console.log(Object.is(Na ...`,l:"JavaScript/面向对象/new.html#object-is-value1-value2",a:"object-is-value1-value2"},"92.16":{t:"Object.keys(obj)\r",p:`const obj = { name: 'John', age: 30 }
const keys = Object.keys(obj)
console.log(keys) // [&quot;name ...`,l:"JavaScript/面向对象/new.html#object-keys-obj",a:"object-keys-obj"},"92.17":{t:"Object.seal(obj)\r",p:`const obj = { name: 'John' }

`,l:"JavaScript/面向对象/new.html#object-seal-obj",a:"object-seal-obj"},"92.18":{t:"Object.seal(obj)\r",p:`obj.age = 30 // 添加属性无效，不会影响原对象
delete obj.name // 删除属性无效，不会影响原对象
console.log(obj.name) // John
conso ...`,l:"JavaScript/面向对象/new.html#object-seal-obj",a:"object-seal-obj"},"92.19":{t:"Object.values(obj)\r",p:`const obj = { name: 'John', age: 30 }
const values = Object.values(obj)
console.log(values) // [&quo ...`,l:"JavaScript/面向对象/new.html#object-values-obj",a:"object-values-obj"},"92.20":{t:"Object.hasOwnProperty(prop)\r",p:`const obj = { name: 'John' }
console.log(obj.hasOwnProperty('name')) // true
console.log(obj.hasOwnP ...`,l:"JavaScript/面向对象/new.html#object-hasownproperty-prop",a:"object-hasownproperty-prop"},"93.0":{t:"# JavaScript 原型和原型链\r",p:`
JavaScript 原型和原型链是面向对象编程中的重要概念，用于实现继承和共享属性和方法。

`,l:"JavaScript/面向对象/prototype.html",a:"javascript-原型和原型链"},"93.1":{t:"原型（Prototype）\r",p:"在 JavaScript 中，每个对象都有一个特殊的属性__proto__（在 ES6 及以上版本中，可以使用Object.getPrototypeOf()来访问原型），它指向该对象的原型对象。原型对 ...",l:"JavaScript/面向对象/prototype.html#原型-prototype",a:"原型-prototype"},"93.2":{t:"原型链（Prototype Chain）\r",p:"原型链是由对象的原型对象构成的链式结构。当我们访问对象的属性或方法时，如果对象本身没有找到，则会继续在原型链上查找，直到找到为止。原型链的最终节点是Object.prototype，它是所有对象的根原 ...",l:"JavaScript/面向对象/prototype.html#原型链-prototype-chain",a:"原型链-prototype-chain"},"93.3":{t:"使用原型的好处\r",p:`

共享属性和方法： 原型允许多个对象共享相同的属性和方法，这样可以节省内存空间。


继承： 通过原型链，我们可以实现继承，子对象可以继承父对象的属性和方法。


动态更新： 原型上的属性和方法是动 ...`,l:"JavaScript/面向对象/prototype.html#使用原型的好处",a:"使用原型的好处"},"93.4":{t:"注意事项\r",p:`
尽量避免直接修改原型对象，以免对其他对象产生意外的影响。
使用Object.create()和Object.setPrototypeOf()等方法来设置对象的原型，而不是直接修改__proto__属 ...`,l:"JavaScript/面向对象/prototype.html#注意事项",a:"注意事项"},"94.0":{t:"# JavaScript 严格模式\r",p:"JavaScript 严格模式（Strict Mode）是一种在 JavaScript 中启用更严格解析和错误处理的模式。它旨在帮助开发者编写更安全、规范、优化和可靠的代码，并避免一些常见的错误。严格 ...",l:"JavaScript/面向对象/strict.html",a:"javascript-严格模式"},"95.0":{t:"# this 关键字\r",p:"\r",l:"JavaScript/面向对象/this.html",a:"this-关键字"},"95.1":{t:"执行期上下文\r",p:`当函数执行时（准确来说，是在函数发生预编译的前一刻），会创建一个执行期上下文的内部对象。一个执行期上下文定义了一个函数执行时的环境。
每调用一次函数，就会创建一个新的上下文对象，他们之间是相互独立且独 ...`,l:"JavaScript/面向对象/this.html#执行期上下文",a:"执行期上下文"},"95.2":{t:"this 指向\r",p:`解析器在调用函数每次都会向函数内部传递进一个隐含的参数，这个隐含的参数就是 this，this 指向的是一个对象，这个对象我们称为函数执行的 上下文对象。
`,l:"JavaScript/面向对象/this.html#this-指向",a:"this-指向"},"95.3":{t:"ES5 函数内 this 的指向【非常重要】\r",p:`在 ES5 语法中，根据函数的调用方式的不同，this 会指向不同的对象：

1、以函数的形式（包括普通函数、定时器函数、立即执行函数）调用时，this 的指向永远都是 window。比如fun(); ...`,l:"JavaScript/面向对象/this.html#es5-函数内-this-的指向【非常重要】",a:"es5-函数内-this-的指向【非常重要】"},"95.4":{t:"ES6 箭头函数中 this 的指向\r",p:`ES6 中的箭头函数并不使用上面的准则，而是会继承外层函数调用的 this 绑定（无论 this 绑定到什么）。
var obj = {
  foo: function () {
    var ar ...`,l:"JavaScript/面向对象/this.html#es6-箭头函数中-this-的指向",a:"es6-箭头函数中-this-的指向"},"95.5":{t:"改变函数内部的 this 指向\r",p:`JS 专门为我们提供了一些方法来改变函数内部的 this 指向。常见的方法有 call()、apply()、bind() 方法。
`,l:"JavaScript/面向对象/this.html#改变函数内部的-this-指向",a:"改变函数内部的-this-指向"},"95.6":{t:"call()\r",p:"\r",l:"JavaScript/面向对象/this.html#call",a:"call"},"95.7":{t:"call() 方法的作用\r",p:`call() 方法的作用：可以调用一个函数，与此同时，它还可以改变这个函数内部的 this 指向。
call() 方法的另一个应用：可以实现继承。之所以能实现继承，其实是利用了上面的作用。
语法：
f ...`,l:"JavaScript/面向对象/this.html#call-方法的作用",a:"call-方法的作用"},"95.8":{t:"call() 方法举例\r",p:`举例 1、通过 call() 调用函数：
const obj1 = {
  nickName: 'zhangsan',
  age: 28
}
function fn1() {
  console.l ...`,l:"JavaScript/面向对象/this.html#call-方法举例",a:"call-方法举例"},"95.9":{t:"apply() 方法\r",p:"\r",l:"JavaScript/面向对象/this.html#apply-方法",a:"apply-方法"},"95.10":{t:"apply() 方法的作用\r",p:`apply() 方法的作用：可以调用一个函数，与此同时，它还可以改变这个函数内部的 this 指向。这一点，和 call()类似。
apply() 方法的应用： 由于 apply()需要传递数组，所以 ...`,l:"JavaScript/面向对象/this.html#apply-方法的作用",a:"apply-方法的作用"},"95.11":{t:"apply() 方法举例\r",p:`举例、通过 apply() 改变 this 指向：
var obj1 = {
  nickName: 'zhangsan',
  age: 28
}

function fn1(a) {
  cons ...`,l:"JavaScript/面向对象/this.html#apply-方法举例",a:"apply-方法举例"},"95.12":{t:"apply() 方法的巧妙应用：求数组的最大值\r",p:`我们知道，如果想要求数组中元素的最大值，数组本身是没有自带方法的。那怎么办呢？
虽然数组里没有获取最大值的方法，但是数值里有 Math.max(数字1，数字2，数字3) 方法，可以获取多个数值中的最大 ...`,l:"JavaScript/面向对象/this.html#apply-方法的巧妙应用-求数组的最大值",a:"apply-方法的巧妙应用-求数组的最大值"},"95.13":{t:"bind() 方法\r",p:"\r",l:"JavaScript/面向对象/this.html#bind-方法",a:"bind-方法"},"95.14":{t:"bind() 方法的作用\r",p:`bind() 方法不会调用函数，但是可以改变函数内部的 this 指向。
把 call()、apply()、bind()这三个方法做一下对比，你会发现：实际开发中， bind() 方法使用得最为频繁。 ...`,l:"JavaScript/面向对象/this.html#bind-方法的作用",a:"bind-方法的作用"},"96.0":{t:"# 前端导航\r",p:`&lt;!--
`,l:"nav/index.html",a:"前端导航"},"96.1":{t:" ",p:"",l:"nav/index.html#",a:""},"96.2":{t:"常用工具 -->\r",p:"&lt;NavLinks v-for=&quot;{title,items} in NAV_DATA&quot; :title='title' :items=&quot;items&quot;/&gt ...",l:"nav/index.html#常用工具",a:"常用工具"},"97.0":{t:"# Axios\r",p:"\r",l:"others/axios/index.html",a:"axios"},"97.1":{t:"什么是axios？\r",p:`Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。
`,l:"others/axios/index.html#什么是axios",a:"什么是axios"},"97.2":{t:"安装\r",p:`使用npm：
npm install axios

使用cdn：


`,l:"others/axios/index.html#安装",a:"安装"},"97.3":{t:"使用\r",p:`
执行GET请求

let name = 'zs'
axios.get(\`/api/xxxx?name=\${name}\`)
  .then(function (result) {
    consol ...`,l:"others/axios/index.html#使用",a:"使用"},"97.4":{t:"拦截器\r",p:`拦截器，我们大致可以分为两类， 一类是 请求接口前的统一处理（请求拦截） 、 一类是 请求接口后的统一处理（响应拦截）

请求拦截

请求调整
用户标识


响应拦截

网络错误处理
授权错误处理
普 ...`,l:"others/axios/index.html#拦截器",a:"拦截器"},"97.5":{t:"错误处理\r",p:`axios.get('/user/12345')
  .catch(function (error) {
    if (error.response) {
      // 发出请求后，服务器用状态 ...`,l:"others/axios/index.html#错误处理",a:"错误处理"},"98.0":{t:"# 封装 axios\r",p:"\r",l:"others/axios/封装axios.html",a:"封装-axios"},"98.1":{t:"1.封装目的\r",p:`实现一个简单的封装，主要实现以下目的：

实现请求、响应拦截器功能
api 集中式管理
请求头设置，一般可以在请求头中携带公共的参数：token
可以简化服务器返回的数据，处理 http 网络错误

`,l:"others/axios/封装axios.html#_1-封装目的",a:"_1-封装目的"},"98.2":{t:"2.初始化 axios 实例\r",p:`import axios from 'axios'
let apiBaseUrl = ''
const service = axios.create({
  baseURL: apiBaseUrl,  ...`,l:"others/axios/封装axios.html#_2-初始化-axios-实例",a:"_2-初始化-axios-实例"},"98.3":{t:"3.设置请求拦截\r",p:`// 创建请求拦截
service.interceptors.request.use(
  (config) =&gt; {
    // 如果开启 token 认证
    if (serverCo ...`,l:"others/axios/封装axios.html#_3-设置请求拦截",a:"_3-设置请求拦截"},"98.4":{t:"4.设置响应拦截\r",p:`// 创建响应拦截
service.interceptors.response.use(
  (res) =&gt; {
    let data = res.data
    // 处理自己的业务逻 ...`,l:"others/axios/封装axios.html#_4-设置响应拦截",a:"_4-设置响应拦截"},"98.5":{t:"5.封装常见的方法\r",p:`//get
export function getAction(url, parameter) {
  return service({
    url: url,
    method: 'get' ...`,l:"others/axios/封装axios.html#_5-封装常见的方法",a:"_5-封装常见的方法"},"98.6":{t:"6.使用\r",p:`示例：
let param = {
    username:'zs',
    password:'123456'
}

// 定义接口方法
const login = (params)=&gt;p ...`,l:"others/axios/封装axios.html#_6-使用",a:"_6-使用"},"98.7":{t:"相关文章\r",p:`关于 Axios 的再再再封装，总是会有所不一样
十分钟封装一个好用的 axios，省时又省力他不香吗
前端架构带你 封装 axios，一次封装终身受益「美团后端连连点赞」
`,l:"others/axios/封装axios.html#相关文章",a:"相关文章"},"99.0":{t:"# Git基本命令使用\r",p:"\r",l:"others/git/git.html",a:"git基本命令使用"},"99.1":{t:"账户配置\r",p:`
配置全局账户，对所有 Git 仓库有效

git config --global user.name 'Your Name'
git config --global user.email 'Your ...`,l:"others/git/git.html#账户配置",a:"账户配置"},"99.2":{t:"本地基本操作\r",p:"\r",l:"others/git/git.html#本地基本操作",a:"本地基本操作"},"99.3":{t:"初始化本地库\r",p:`git init

`,l:"others/git/git.html#初始化本地库",a:"初始化本地库"},"99.4":{t:"查看状态\r",p:`git status

`,l:"others/git/git.html#查看状态",a:"查看状态"},"99.5":{t:"添加暂存区 git add\r",p:`
将当前目录及其子目录下所有变更添加到暂存区

git add .


将本地库所有变更添加到暂存区

git add -A


指定文件添加暂存区

git add file1 file2 ...
 ...`,l:"others/git/git.html#添加暂存区-git-add",a:"添加暂存区-git-add"},"99.6":{t:"提交本地库 git commit\r",p:`
提交所有变更

git commit
# or
git commit -m '日志信息' -a


提交当前目录及其子目录的变更

git commit -m '日志信息' .


提交指定文件

 ...`,l:"others/git/git.html#提交本地库-git-commit",a:"提交本地库-git-commit"},"99.7":{t:"比较差异 git diff\r",p:`
比较工作区和暂存区的所有差异，只能查看旧文件的变更（包括修改和删除），不能查看新文件（因为新文件还为被 git 追踪）

git diff


比较指定文件工作区和暂存区的差异

git diff  ...`,l:"others/git/git.html#比较差异-git-diff",a:"比较差异-git-diff"},"99.8":{t:"查看日志信息 git log\r",p:`
查看简要日志信息

git reflog


查看详细日志信息

git log


查看极简日志信息

git log --oneline


查看最近 n 次的版本信息

git log -n
 ...`,l:"others/git/git.html#查看日志信息-git-log",a:"查看日志信息-git-log"},"99.9":{t:"分支命令\r",p:"\r",l:"others/git/git.html#分支命令",a:"分支命令"},"99.10":{t:"创建分支\r",p:`
基于当前分支创建分支

git branch 新分支


基于指定分支创建分支

git branch 新分支 已有分支


基于某个 commit 创建分支

git branch 新分支 com ...`,l:"others/git/git.html#创建分支",a:"创建分支"},"99.11":{t:"查看本地分支\r",p:`git branch -v

`,l:"others/git/git.html#查看本地分支",a:"查看本地分支"},"99.12":{t:"删除分支\r",p:`
安全删除本地分支

git branch -d 分支


强制删除本地分支

git branch -D 分支

`,l:"others/git/git.html#删除分支",a:"删除分支"},"99.13":{t:"切换分支\r",p:`git checkout 分支名

`,l:"others/git/git.html#切换分支",a:"切换分支"},"99.14":{t:"合并分支\r",p:`merge 和 rebase的区别有待学习实践 :worried:

将 A 分支合并到当前分支，且为 merge 创建 commit

git merge A


将 A 分支合并到 B 分支，且为 ...`,l:"others/git/git.html#合并分支",a:"合并分支"},"99.15":{t:"版本穿梭与回滚\r",p:`
工作区指定文件恢复成和暂存区一样

git checkout file1 file2 ...

# tips in the Git Bash
# use &quot;git restore &lt; ...`,l:"others/git/git.html#版本穿梭与回滚",a:"版本穿梭与回滚"},"99.16":{t:"修改 commit 记录\r",p:`
往最后一次 commit 追加记录，而不新建 commit - reference

git commit --amend


合并 commit 记录 - reference

git rebas ...`,l:"others/git/git.html#修改-commit-记录",a:"修改-commit-记录"},"99.17":{t:"远程仓库交互\r",p:"\r",l:"others/git/git.html#远程仓库交互",a:"远程仓库交互"},"99.18":{t:"git remote\r",p:`
查看所有远程仓库地址别名

git remote -v


为远程仓库起别名

git remote add 别名 地址


删除远程仓库别名

git remote remove 别名


修改别 ...`,l:"others/git/git.html#git-remote",a:"git-remote"},"99.19":{t:"git clone\r",p:`
克隆远程仓库到本地

git clone 地址


克隆远程仓库指定分支到本地

git clone -b 远程仓库分支名 地址

`,l:"others/git/git.html#git-clone",a:"git-clone"},"99.20":{t:"git pull\r",p:`
拉取远程分支，并与本地分支合并

git pull 别名 分支名

`,l:"others/git/git.html#git-pull",a:"git-pull"},"99.21":{t:"git push\r",p:`
推送本地指定分支到仓库指定分支

git push 别名 本地分支:远程分支


如果远程分支被省略，表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建 ...`,l:"others/git/git.html#git-push",a:"git-push"},"100.0":{t:"# git安装\r",p:"\r",l:"others/git/install.html",a:"git安装"},"100.1":{t:"**1.Git官网下载安装git客户端：https://git-scm.com/downloads/**\r",p:`\r
\r
\r`,l:"others/git/install.html#_1-git官网下载安装git客户端-https-git-scm-com-downloads",a:"_1-git官网下载安装git客户端-https-git-scm-com-downloads"},"100.2":{t:"**2.安装完成后，在空白处点鼠标右键选择“Git Bush Here” ，打开git bash命令窗口**\r",p:`\r
\r
\r`,l:"others/git/install.html#_2-安装完成后-在空白处点鼠标右键选择-git-bush-here-打开git-bash命令窗口",a:"_2-安装完成后-在空白处点鼠标右键选择-git-bush-here-打开git-bash命令窗口"},"100.3":{t:"**3.配置用户名和邮箱**\r",p:`git config —global user.name “xxx”
git config —global user.email “xxxx@xxx.com”
配置后结果：git config --l ...`,l:"others/git/install.html#_3-配置用户名和邮箱",a:"_3-配置用户名和邮箱"},"100.4":{t:"4.执行命令生成ssh pub_key\r",p:`ssh-keygen -t rsa -C &quot;XXXX@XXX.com&quot;

直接按三次回车，会生成 id_rsa.pub 文件，这个文件一般在C盘的.ssh目录下。
`,l:"others/git/install.html#_4-执行命令生成ssh-pub-key",a:"_4-执行命令生成ssh-pub-key"},"100.5":{t:"**5.打开生成后的id_rsa.pub文件，copy内容到git ssh个人设置**\r",p:`!image-20230222160826601
!image-20230222161109182
`,l:"others/git/install.html#_5-打开生成后的id-rsa-pub文件-copy内容到git-ssh个人设置",a:"_5-打开生成后的id-rsa-pub文件-copy内容到git-ssh个人设置"},"100.6":{t:"**6.本地拉取代码**\r",p:`就可以克隆ssh地址了
`,l:"others/git/install.html#_6-本地拉取代码",a:"_6-本地拉取代码"},"100.7":{t:"TortoiseGit安装\r",p:`TortoiseGit安装和配置详细说明
`,l:"others/git/install.html#tortoisegit安装",a:"tortoisegit安装"},"101.0":{t:"# 基本类型\r",p:"\r",l:"others/TypeScript/basic.html",a:"基本类型"},"101.1":{t:"字符串类型\r",p:`// 普通声明
let a: string = '123'

// 也可以使用es6的字符串模板
let str: string = \`ddd\${a}\`

`,l:"others/TypeScript/basic.html#字符串类型",a:"字符串类型"},"101.2":{t:"数字类型\r",p:`// 支持十六进制、十进制、八进制和二进制。
let notANumber: number = NaN //NaN
let num: number = 123.321 //普通数字
let infin ...`,l:"others/TypeScript/basic.html#数字类型",a:"数字类型"},"101.3":{t:"布尔类型\r",p:`let b1: boolean = true //可以直接使用布尔值
let b2: boolean = false //也可以通过函数返回布尔值

let b2: boolean = Boolean ...`,l:"others/TypeScript/basic.html#布尔类型",a:"布尔类型"},"101.4":{t:"数组\r",p:`TypeScript 像 JavaScript 一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 []，表示由此类型元素组成的一个数组：
let list: numbe ...`,l:"others/TypeScript/basic.html#数组",a:"数组"},"101.5":{t:"元组 Tuple\r",p:`元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。如果一个方法需要返回多个值，可以把这多个值作为元组返回，而不需要创建额外的类来表示。
比如：可以定义一对值分别为string和num ...`,l:"others/TypeScript/basic.html#元组-tuple",a:"元组-tuple"},"101.6":{t:"枚举\r",p:`enum类型是对 JavaScript 标准数据类型的一个补充。使用枚举类型可以为一组数值赋予友好的名字。
枚举的值可以是数字，也可以是字符串。

数字枚举

enum Types {
  Red = ...`,l:"others/TypeScript/basic.html#枚举",a:"枚举"},"101.7":{t:"Any 任意类型\r",p:`没有强制限定哪种类型，随时切换类型都可以 我们可以对 any 进行任何操作，不需要检查类型
let value: Any
value = true // OK
value = 42 // OK
val ...`,l:"others/TypeScript/basic.html#any-任意类型",a:"any-任意类型"},"101.8":{t:"Void\r",p:`可以用 void 表示没有任何返回值的函数
function voidFn(): void {
  console.log('test void')
  // return // 不能带有return ...`,l:"others/TypeScript/basic.html#void",a:"void"},"101.9":{t:"Null 和 Undefined\r",p:`let u: undefined = undefined //定义undefined
let n: null = null //定义null

默认情况下 null 和 undefined 是所有类型 ...`,l:"others/TypeScript/basic.html#null-和-undefined",a:"null-和-undefined"},"101.10":{t:"Never\r",p:`never 类型表示的是那些永不存在的值的类型。
// 返回never的函数必须存在无法达到的终点

// 因为必定抛出异常，所以 error 将不会有返回值
function error(messa ...`,l:"others/TypeScript/basic.html#never",a:"never"},"101.11":{t:"Never 与 Void 的差异\r",p:`//void类型只是没有返回值 但本身不会出错
function Void(): void {
  console.log()
}

//只会抛出异常没有返回值
function Never(): n ...`,l:"others/TypeScript/basic.html#never-与-void-的差异",a:"never-与-void-的差异"},"101.12":{t:"联合类型\r",p:`联合类型用|分隔，表示取值可以为多种类型中的一种
// a可以为数字或者布尔类型，不能为字符串类型，
// 因为定义的联合类型只有数字和布尔值并没有字符串
let a:num|boolean
a =  ...`,l:"others/TypeScript/basic.html#联合类型",a:"联合类型"},"101.13":{t:"交叉类型\r",p:`交叉类型就是跟联合类型相反，用&amp;操作符表示，交叉类型就是两个类型必须存在
interface People {
  age: number,
  height： number
}
interf ...`,l:"others/TypeScript/basic.html#交叉类型",a:"交叉类型"},"101.14":{t:"类型断言\r",p:"通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScrip ...",l:"others/TypeScript/basic.html#类型断言",a:"类型断言"},"102.0":{t:"# 类\r",p:"ES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到 ...",l:"others/TypeScript/class.html",a:"类"},"102.1":{t:"基本实例\r",p:`// 类的基本定义与使用
class Person{
  // 声明属性
    name:string
    age:number

    // 构造方法
    constructor(nam ...`,l:"others/TypeScript/class.html#基本实例",a:"基本实例"},"102.2":{t:"继承\r",p:`在TypeScript 里，我们可以使用常用的面向对象模式。 基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类。
// 类的继承
class Animal {
  run (distan ...`,l:"others/TypeScript/class.html#继承",a:"继承"},"102.3":{t:"类的修饰符\r",p:`总共有三个 public private protected
`,l:"others/TypeScript/class.html#类的修饰符",a:"类的修饰符"},"102.4":{t:"默认为 public\r",p:`使用public修饰符 可以让你定义的变量 内部访问 也可以外部访问 如果不写默认就是public
`,l:"others/TypeScript/class.html#默认为-public",a:"默认为-public"},"102.5":{t:"理解 private\r",p:`使用private修饰符 代表定义的变量私有的只能在内部访问 不能在外部访问
`,l:"others/TypeScript/class.html#理解-private",a:"理解-private"},"102.6":{t:"理解 protected\r",p:`使用protected修饰符 代表定义的变量私有的只能在内部和继承的子类中访问 不能在外部访问
class Person{
    public name:string
    private age ...`,l:"others/TypeScript/class.html#理解-protected",a:"理解-protected"},"102.7":{t:"readonly 修饰符\r",p:`你可以使用 readonly 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。
class Person {
  readonly name: string = 'abc'
   ...`,l:"others/TypeScript/class.html#readonly-修饰符",a:"readonly-修饰符"},"102.8":{t:"static 静态属性 和 静态方法\r",p:`我们用static 定义的属性 不可以通过this 去访问 只能通过类名去调用
class Person {
  public name: string;
  static age: number = ...`,l:"others/TypeScript/class.html#static-静态属性-和-静态方法",a:"static-静态属性-和-静态方法"},"102.9":{t:"interface 定义 类\r",p:`ts interface 定义类 使用关键字 implements 后面跟interface的名字多个用逗号隔开 继承还是用extends

interface PersonClass {
    g ...`,l:"others/TypeScript/class.html#interface-定义-类",a:"interface-定义-类"},"102.10":{t:"存储器\r",p:`TypeScript 支持通过 getters/setters 来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问。
下面来看如何把一个简单的类改写成使用 get 和 set。 首先，我们 ...`,l:"others/TypeScript/class.html#存储器",a:"存储器"},"102.11":{t:"抽象类\r",p:`抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化，只能实例化实现了所有抽象方法的子类。 不同于接口，抽象类可以包含成员的实现细节。
abstract: 用abstract关键字声明的类叫做抽 ...`,l:"others/TypeScript/class.html#抽象类",a:"抽象类"},"103.0":{t:"# 函数\r",p:`
函数涉及的类型实际上指的是：函数参数和返回值的类型

`,l:"others/TypeScript/function.html",a:"函数"},"103.1":{t:"函数的类型\r",p:`js的函数
// 命名函数
function add(x, y) {
  return x + y
}

// 匿名函数 箭头函数
let myAdd = (x, y) =&gt; {
  retur ...`,l:"others/TypeScript/function.html#函数的类型",a:"函数的类型"},"103.2":{t:"可选参数`?`\r",p:`通过?表示该参数为可选参数
function add(x: number, y?: number): number {
  return y ? x + y : x;
}


const fn = ( ...`,l:"others/TypeScript/function.html#可选参数",a:"可选参数"},"103.3":{t:"默认参数\r",p:`function add(x: number, y: number = 20): number {
  return x + y;
}
add(10)  // 30

`,l:"others/TypeScript/function.html#默认参数",a:"默认参数"},"103.4":{t:"剩余参数\r",p:"必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在 JavaScript 里，你可以使用 arguments 来访问所有 ...",l:"others/TypeScript/function.html#剩余参数",a:"剩余参数"},"103.5":{t:"函数重载\r",p:`重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。
// 重载函数声明
function add (x: string, y: string): string
function add (x ...`,l:"others/TypeScript/function.html#函数重载",a:"函数重载"},"104.0":{t:"# 泛型\r",p:`
指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定具体类型的一种特性。

`,l:"others/TypeScript/generic.html",a:"泛型"},"104.1":{t:"函数泛型\r",p:"\r",l:"others/TypeScript/generic.html#函数泛型",a:"函数泛型"},"104.2":{t:"给函数加上类型\r",p:`下面这是两个函数，除了类型的不同，实现的功能是一样的。
function num(a: number, b: number): Array&lt;number&gt; {
  return [a, b ...`,l:"others/TypeScript/generic.html#给函数加上类型",a:"给函数加上类型"},"104.3":{t:"使用泛型优化\r",p:`语法为函数名字后面跟一个&lt;参数名&gt; 参数名可以随便写 例如我这儿写了 T
当我们使用这个函数的时候把参数的类型传进去就可以了 （也就是动态类型）
function Add&lt;T&gt; ...`,l:"others/TypeScript/generic.html#使用泛型优化",a:"使用泛型优化"},"104.4":{t:"多个泛型参数的函数\r",p:`一个函数可以定义多个泛型参数
function swap&lt;K, V&gt;(a: K, b: V): [K, V] {
  return [a, b]
}
const result = swap ...`,l:"others/TypeScript/generic.html#多个泛型参数的函数",a:"多个泛型参数的函数"},"104.5":{t:"泛型接口\r",p:`在定义接口时, 为接口中的属性或方法定义泛型类型 
在使用接口时, 再指定具体的泛型类型
interface KeyValue&lt;T,U&gt; {
  key: T;
  value: U;
} ...`,l:"others/TypeScript/generic.html#泛型接口",a:"泛型接口"},"104.6":{t:"泛型类\r",p:`在定义类时, 为类中的属性或方法定义泛型类型 在创建类的实例时, 再指定特定的泛型类型
class clacArray&lt;T&gt;{
    private arr:T[] = [];

    ...`,l:"others/TypeScript/generic.html#泛型类",a:"泛型类"},"104.7":{t:"泛型约束\r",p:`我们期望在一个泛型的变量上面，获取其length参数，但是，有的数据类型是没有length属性的
// 没有泛型约束
function getLen&lt;T&gt;(arg:T) {
  retur ...`,l:"others/TypeScript/generic.html#泛型约束",a:"泛型约束"},"105.0":{t:"# 初识TypeScript\r",p:`
TypeScript中文网

`,l:"others/TypeScript/index.html",a:"初识typescript"},"105.1":{t:"TS是什么？\r",p:`TS：是TypeScript的简称，是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。
`,l:"others/TypeScript/index.html#ts是什么",a:"ts是什么"},"105.2":{t:"TS和JS的关系\r",p:`对比于JS，TS是JS的超集，简单的说就是在 JavaScript 的基础上加入了类型系统，让每个参数都有明确的意义，从而带来了更加智能的提示。
相对于JS而言，TS属于强类型语言，所以对于项目而言， ...`,l:"others/TypeScript/index.html#ts和js的关系",a:"ts和js的关系"},"105.3":{t:"TS和JS的区别\r",p:`
JavaScript 属于动态编程语言，而ts 属于静态编程语言。

js：边解释边执行，错误只有在运行的时候才能发现
ts：先编译再执行，在写的时候就会发现错误了（ts不能直接执行，需要先编译成  ...`,l:"others/TypeScript/index.html#ts和js的区别",a:"ts和js的区别"},"105.4":{t:"TypeScript的优缺点\r",p:"",l:"others/TypeScript/index.html#typescript的优缺点",a:"typescript的优缺点"},"105.5":{t:"优点\r",p:`
增强代码的可维护性，尤其在大型项目的时候效果显著
友好地在编辑器里提示错误，编译阶段就能检查类型发现大部分错误
支持最新的JavaScript新特特性
周边生态繁荣，vue3已全面支持 typesc ...`,l:"others/TypeScript/index.html#优点",a:"优点"},"105.6":{t:"缺点\r",p:`
需要一定的学习成本
和一些插件库的兼容并不是特别完美，如以前在 vue2 项目里使用 typescript就并不是那么顺畅
增加前期开发的成本，毕竟你需要写更多的代码（但是便于后期的维护）

`,l:"others/TypeScript/index.html#缺点",a:"缺点"},"105.7":{t:"安装\r",p:`# 安装 typescript
npm install -g typescript
//或者
yarn global add typescript

# 查看版本
tsc -v

# 编译
tsc i ...`,l:"others/TypeScript/index.html#安装",a:"安装"},"105.8":{t:"监视编译和在node下运行typescript\r",p:"",l:"others/TypeScript/index.html#监视编译和在node下运行typescript",a:"监视编译和在node下运行typescript"},"105.9":{t:"一、使用tsc -w进行随时热更新watch\r",p:`tsc -w

`,l:"others/TypeScript/index.html#一、使用tsc-w进行随时热更新watch",a:"一、使用tsc-w进行随时热更新watch"},"105.10":{t:"二、使用ts-node直接运行ts的node项目\r",p:`首先全局安装ts-node
npm install -g ts-node

直接进行ts-node 启动文件名
`,l:"others/TypeScript/index.html#二、使用ts-node直接运行ts的node项目",a:"二、使用ts-node直接运行ts的node项目"},"106.0":{t:"# 接口和对象类型\r",p:`
TypeScript 的核心原则之一是对值所具有的结构进行类型检查。我们使用接口（Interfaces）来定义对象的类型。接口是对象的状态(属性)和行为(方法)的抽象(描述)

`,l:"others/TypeScript/interface.html",a:"接口和对象类型"},"106.1":{t:"对象的类型\r",p:`在typescript中，我们定义对象的方式要用关键字interface（接口），我的理解是使用interface来定义一种约束，让数据的结构满足约束的格式。定义方式如下：
//这样写是会报错的 因为 ...`,l:"others/TypeScript/interface.html#对象的类型",a:"对象的类型"},"106.2":{t:"重名interface 会合并\r",p:`interface A{name:string}
interface A{age:number}

let a:A = {
    name:'zs',
    age:18
}

`,l:"others/TypeScript/interface.html#重名interface-会合并",a:"重名interface-会合并"},"106.3":{t:"继承\r",p:`interface A {
    name:stirng
}
interface B extends A {
    age:number
}

let obj:B = {
    age:18,
 ...`,l:"others/TypeScript/interface.html#继承",a:"继承"},"106.4":{t:"可选属性 使用`?`操作符\r",p:`可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。
可选属性的含义是该属性可以不存在，带有可选属性的接口与普通的接口定义差不多，在可选属性名字定义的后面 ...`,l:"others/TypeScript/interface.html#可选属性-使用-操作符",a:"可选属性-使用-操作符"},"106.5":{t:"任意属性\r",p:`需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：
//在这个例子当中我们看到接口中并没有定义C但是并没有报错
//应为我们定义了[propName: string ...`,l:"others/TypeScript/interface.html#任意属性",a:"任意属性"},"106.6":{t:"只读属性 readonly\r",p:`readonly只读属性是不允许被赋值的，只能读取
//这样写是会报错的
//应为a是只读的不允许重新赋值
interface Person {
    b?: string,
    readonl ...`,l:"others/TypeScript/interface.html#只读属性-readonly",a:"只读属性-readonly"},"106.7":{t:"添加函数\r",p:`interface Person {
    cb:()=&gt;void
}
const person: Person = {
    cb:()=&gt;{
        console.log ...`,l:"others/TypeScript/interface.html#添加函数",a:"添加函数"},"107.0":{t:"# 对象类型\r",p:`这里所说的对象类型，就是我们常说的函数、{}、数组、类
`,l:"others/TypeScript/object.html",a:"对象类型"},"107.1":{t:"object,Object 和类型\r",p:`
object

object 类型用于表示所有的非原始类型，即我们不能把 number、string、boolean、symbol 等 原始类型赋值给 object。在严格模式下，null 和 un ...`,l:"others/TypeScript/object.html#",a:""},"108.0":{t:"# tsconfig.json 配置文件\r",p:`{
  &quot;compilerOptions&quot;: {
    /* 基本选项 */

    // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5' ...`,l:"others/TypeScript/tsconfig.html",a:"tsconfig-json-配置文件"},"109.0":{t:"# 类型推论|类型别名\r",p:`\r
\r`,l:"others/TypeScript/type.html",a:"类型推论-类型别名"},"109.1":{t:"类型推论\r",p:`TypeScript里，在有些没有明确指出类型的地方，类型推论会帮助提供类型。
/* 定义变量时赋值了, 推断为对应的类型 */
let n1 = 10 // number
// 相当于 let n1 ...`,l:"others/TypeScript/type.html#类型推论",a:"类型推论"},"109.2":{t:"类型别名\r",p:`type 关键字（可以给一个类型定义一个名字）多用于复合类型

定义类型别名

type s = string

let str:s = &quot;abcd&quot;

console.log(s ...`,l:"others/TypeScript/type.html#类型别名",a:"类型别名"},"110.0":{t:"# vue3 项目配置文档\r",p:"\r",l:"project/configuration.html",a:"vue3-项目配置文档"},"110.1":{t:"一、搭建后台管理系统模板\r",p:"\r",l:"project/configuration.html#一、搭建后台管理系统模板",a:"一、搭建后台管理系统模板"},"110.2":{t:"1.1 项目初始化\r",p:"搭建一个 vue3 版本的后台管理系统，一个项目要有统一的规范，需要使用 eslint+stylelint+prettier 来对我们的代码质量做检测和修复，需要使用 husky 来做 commit  ...",l:"project/configuration.html#_1-1-项目初始化",a:"_1-1-项目初始化"},"110.3":{t:"1.1.1 环境准备\r",p:`
node 16+
pnpm 8.3.1

`,l:"project/configuration.html#_1-1-1-环境准备",a:"_1-1-1-环境准备"},"110.4":{t:"1.1.2 初始化项目\r",p:`本项目使用 vite 进行构建，vite 官方中文文档参考：cn.vitejs.dev/guide/
pnpm:performant npm ，意味“高性能的 npm”。pnpm由 npm/yarn  ...`,l:"project/configuration.html#_1-1-2-初始化项目",a:"_1-1-2-初始化项目"},"110.5":{t:"1.2 项目配置\r",p:"\r",l:"project/configuration.html#_1-2-项目配置",a:"_1-2-项目配置"},"110.6":{t:"一、eslint 配置\r",p:`eslint 中文官网:http://eslint.cn/
ESLint 最初是由Nicholas C. Zakas 于 2013 年 6 月创建的开源项目。它的目标是提供一个插件化的javascri ...`,l:"project/configuration.html#一、eslint-配置",a:"一、eslint-配置"},"110.7":{t:"1.1.1 vue3 环境代码校验插件\r",p:`# 让所有与prettier规则存在冲突的Eslint rules失效，并使用prettier进行代码检查
&quot;eslint-config-prettier&quot;: &quot;^8.6 ...`,l:"project/configuration.html#_1-1-1-vue3-环境代码校验插件",a:"_1-1-1-vue3-环境代码校验插件"},"110.8":{t:"1.1.2 修改.eslintrc.cjs 配置文件\r",p:`// @see https://eslint.bootcss.com/docs/rules/

module.exports = {
  env: {
    browser: true,
    e ...`,l:"project/configuration.html#_1-1-2-修改-eslintrc-cjs-配置文件",a:"_1-1-2-修改-eslintrc-cjs-配置文件"},"110.9":{t:"2.5 集成 sass\r",p:"我们目前在组件内部已经可以使用 scss 样式,因为在配置 styleLint 工具的时候，项目当中已经安装过 sass sass-loader,因此我们再组件内可以使用 scss 语法！！！需要加上 ...",l:"project/configuration.html#_2-5-集成-sass",a:"_2-5-集成-sass"},"110.10":{t:"2.6 mock 数据\r",p:`安装依赖:https://www.npmjs.com/package/vite-plugin-mock
pnpm install -D vite-plugin-mock mockjs

在 vite. ...`,l:"project/configuration.html#_2-6-mock-数据",a:"_2-6-mock-数据"},"110.11":{t:"2.7 axios 二次封装\r",p:`在开发项目的时候避免不了与后端进行交互,因此我们需要使用 axios 插件实现发送网络请求。在开发项目的时候
我们经常会把 axios 进行二次封装。
目的:
1:使用请求拦截器，可以在请求拦截器中处 ...`,l:"project/configuration.html#_2-7-axios-二次封装",a:"_2-7-axios-二次封装"},"110.12":{t:"2.8 API 接口统一管理\r",p:`在开发项目的时候,接口可能很多需要统一管理。在 src 目录下去创建 api 文件夹去统一管理项目的接口；
比如:下面方式
//统一管理咱们项目用户相关的接口

import request from ...`,l:"project/configuration.html#_2-8-api-接口统一管理",a:"_2-8-api-接口统一管理"},"111.0":{t:"Nginx 部署刷新 404 问题\r",p:`location / {
root   C:\\Users....;
index  index.html index.htm;
try_files $uri $uri/ @Qrouter; // 加上这 ...`,l:"server/linux/nginx.html",a:"nginx-部署刷新-404-问题"},"111.1":{t:"Nginx部署项目\r",p:`1、 yarn build打包项目
2、 打开nginx.conf文件，配置对应的信息
3、 检查配置文件是否配置成功
nginx -t -c D:\\nginx-1.16.1\\conf\\nginx.c ...`,l:"server/linux/nginx.html#nginx部署项目",a:"nginx部署项目"},"112.0":{t:"# MySQL 数据库的常用命令\r",p:`MySQL 数据库的常用命令包括管理数据库和表的命令、数据操作命令以及授权和权限管理命令。下面列出了一些常用的 MySQL 命令：
`,l:"server/mysql/command.html",a:"mysql-数据库的常用命令"},"112.1":{t:"管理数据库和表的命令\r",p:`
CREATE DATABASE database_name;：创建一个新的数据库。
DROP DATABASE database_name;：删除一个数据库。
USE database_name;： ...`,l:"server/mysql/command.html#管理数据库和表的命令",a:"管理数据库和表的命令"},"112.2":{t:"数据操作命令\r",p:`
INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...);：向表中插入数据。
SELECT column ...`,l:"server/mysql/command.html#数据操作命令",a:"数据操作命令"},"112.3":{t:"授权和权限管理命令\r",p:`
GRANT privileges ON database_name.table_name TO 'username'@'hostname';：授予用户特定数据库或表的权限。
REVOKE privi ...`,l:"server/mysql/command.html#授权和权限管理命令",a:"授权和权限管理命令"},"113.0":{t:"# MySQL 字段的数据类型\r",p:`MySQL 提供了多种数据类型，用于定义表中列（字段）的数据类型。每个数据类型都有特定的存储需求和可接受的值范围。以下是 MySQL 中常用的数据类型：
`,l:"server/mysql/dataType.html",a:"mysql-字段的数据类型"},"113.1":{t:"整数类型\r",p:`
TINYINT：一个非常小的整数，范围为-128 到 127（有符号）或 0 到 255（无符号）。
SMALLINT：较小的整数，范围为-32,768 到 32,767（有符号）或 0 到 65, ...`,l:"server/mysql/dataType.html#整数类型",a:"整数类型"},"113.2":{t:"浮点数类型\r",p:`
FLOAT：单精度浮点数，范围为-3.402823466E+38 到-1.175494351E-38、0 和 1.175494351E-38 到 3.402823466E+38。
DOUBLE：双精 ...`,l:"server/mysql/dataType.html#浮点数类型",a:"浮点数类型"},"113.3":{t:"字符串类型\r",p:`
CHAR：固定长度的字符串，最大长度为 255 个字符。
VARCHAR：可变长度的字符串，最大长度为 65535 个字符。
TEXT：用于存储较长文本数据的字符串类型，最大长度为 65535 个字 ...`,l:"server/mysql/dataType.html#字符串类型",a:"字符串类型"},"113.4":{t:"日期和时间类型\r",p:`
DATE：存储日期，格式为'YYYY-MM-DD'。
TIME：存储时间，格式为'HH:MM:SS'。
DATETIME：存储日期和时间，格式为'YYYY-MM-DD HH:MM:SS'。
TIME ...`,l:"server/mysql/dataType.html#日期和时间类型",a:"日期和时间类型"},"113.5":{t:"其他常用类型\r",p:`
BOOLEAN：存储布尔值（true 或 false）。
ENUM：存储枚举值，从一个预定义的值列表中选择一个值。
SET：存储一个或多个预定义的值。

::: tip
除了上述常见的数据类型，My ...`,l:"server/mysql/dataType.html#其他常用类型",a:"其他常用类型"},"114.0":{t:"数据库概述\r",p:`数据库是用于组织和存储大量结构化数据的集合。它是一种数据管理系统，允许用户定义、创建、操作和控制访问数据的方法。数据库的设计和使用旨在提供高效的数据存储、快速的数据检索和安全的数据管理。
数据库通常由 ...`,l:"server/mysql/index.html",a:"数据库概述"},"114.1":{t:"MySQL介绍\r",p:"MySQL是一种开源的关系型数据库管理系统，由瑞典公司MySQL AB开发并最终由Oracle Corporation收购。MySQL被广泛用于各种规模的应用程序和网站，因其易用性、性能和可靠性而受到 ...",l:"server/mysql/index.html#mysql介绍",a:"mysql介绍"},"115.0":{t:"# 安装Mysql",p:"",l:"server/mysql/install.html",a:"安装mysql"},"116.0":{t:"# MySQL 基本使用\r",p:`MySQL 的基本使用包括连接到 MySQL 服务器、创建数据库、创建表、插入数据、查询数据、更新数据和删除数据等操作。下面是 MySQL 的基本使用步骤：
`,l:"server/mysql/operation.html",a:"mysql-基本使用"},"116.1":{t:"1. 连接到 MySQL 服务器\r",p:`使用 MySQL 客户端工具（如命令行客户端或图形化客户端工具）连接到 MySQL 服务器。

命令行客户端：打开命令行终端，运行命令mysql -u username -p，其中username是您 ...`,l:"server/mysql/operation.html#_1-连接到-mysql-服务器",a:"_1-连接到-mysql-服务器"},"116.2":{t:"2. 创建数据库\r",p:`在 MySQL 中创建一个新的数据库，用于存储数据。
CREATE DATABASE database_name;

将database_name替换为您希望创建的数据库的名称。
`,l:"server/mysql/operation.html#_2-创建数据库",a:"_2-创建数据库"},"116.3":{t:"3. 选择数据库\r",p:`使用以下命令选择要在其中执行操作的数据库。
USE database_name;

将database_name替换为您要使用的数据库的名称。
`,l:"server/mysql/operation.html#_3-选择数据库",a:"_3-选择数据库"},"116.4":{t:"4. 创建表\r",p:`在所选的数据库中创建一个新的表，定义表的列和数据类型。
CREATE TABLE table_name (
  column1 datatype,
  column2 datatype,
  ...
 ...`,l:"server/mysql/operation.html#_4-创建表",a:"_4-创建表"},"116.5":{t:"5. 插入数据\r",p:`使用以下命令向表中插入数据。
INSERT INTO table_name (column1, column2, ...)
VALUES (value1, value2, ...);

将table_ ...`,l:"server/mysql/operation.html#_5-插入数据",a:"_5-插入数据"},"116.6":{t:"6. 查询数据\r",p:`使用 SELECT 语句从表中检索数据。
SELECT column1, column2, ...
FROM table_name
WHERE condition;

将column1、column2 ...`,l:"server/mysql/operation.html#_6-查询数据",a:"_6-查询数据"},"116.7":{t:"7. 更新数据\r",p:`使用 UPDATE 语句更新表中的数据。
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
 ...`,l:"server/mysql/operation.html#_7-更新数据",a:"_7-更新数据"},"116.8":{t:"8. 删除数据\r",p:`使用 DELETE 语句从表中删除数据。
DELETE FROM table_name
WHERE condition;

将table_name替换为要删除数据的表的名称，condition替换为删 ...`,l:"server/mysql/operation.html#_8-删除数据",a:"_8-删除数据"},"117.0":{t:"# 使用 node 做一个简单的爬虫\r",p:"\r",l:"server/nodejs/crawler.html",a:"使用-node-做一个简单的爬虫"},"117.1":{t:"1. 初始化项目\r",p:`npm init -y

`,l:"server/nodejs/crawler.html#_1-初始化项目",a:"_1-初始化项目"},"117.2":{t:"2. 安装插件 cheerio\r",p:`npm install cheerio

Cheerio 解析标记并提供用于遍历/操作结果数据结构的 API。它不会像网络浏览器那样解释结果。具体来说，它不会生成视觉渲染、应用 CSS、加载外部资源或 ...`,l:"server/nodejs/crawler.html#_2-安装插件-cheerio",a:"_2-安装插件-cheerio"},"117.3":{t:"3. 访问要爬取的网站\r",p:`
爬取豆瓣网 https://movie.douban.com/top250
!img
根据浏览器检查元素区，要爬取的内容
!img

`,l:"server/nodejs/crawler.html#_3-访问要爬取的网站",a:"_3-访问要爬取的网站"},"117.4":{t:"4。 创建 index.js 文件并编写代码\r",p:`// 引入模块
const https = require('https')
const cheerio = require('cheerio')
const fs = require('fs')

 ...`,l:"server/nodejs/crawler.html#_4。-创建-index-js-文件并编写代码",a:"_4。-创建-index-js-文件并编写代码"},"117.5":{t:"5. 运行脚本\r",p:`node index.js

`,l:"server/nodejs/crawler.html#_5-运行脚本",a:"_5-运行脚本"},"117.6":{t:"6. 爬取成功\r",p:`!img
这时会多出来一个名叫files.json的 json 文件
里面就是爬取出来的内容了
[
  {
    &quot;title&quot;: &quot;肖申克的救赎 / The Shaw ...`,l:"server/nodejs/crawler.html#_6-爬取成功",a:"_6-爬取成功"},"118.0":{t:"# Express\r",p:`官网传送门

基于 Node.js 平台，快速、开放、极简的 Web 开发框架

Express 是用于快速创建服务器的第三方模块。
`,l:"server/nodejs/Express.html",a:"express"},"118.1":{t:"Express 初体验\r",p:"\r",l:"server/nodejs/Express.html#express-初体验",a:"express-初体验"},"118.2":{t:"基本使用\r",p:`安装 Express：
npm install express

创建服务器，监听客户端请求，并返回内容：
const express = require('express')
// 创建 web 服 ...`,l:"server/nodejs/Express.html#基本使用",a:"基本使用"},"118.3":{t:"托管静态资源\r",p:`
通过 express.static() 方法可创建静态资源服务器，向外开放访问静态资源。
Express 在指定的静态目录中查找文件，并对外提供资源的访问路径，存放静态文件的目录名不会出现在 URL ...`,l:"server/nodejs/Express.html#托管静态资源",a:"托管静态资源"},"118.4":{t:"Express 路由\r",p:`创建路由模块：
// router.js

const express = require('express')
// 创建路由对象
const router = express.Router()

 ...`,l:"server/nodejs/Express.html#express-路由",a:"express-路由"},"118.5":{t:"Express 中间件\r",p:`
中间件是指流程的中间处理环节
服务器收到请求后，可先调用中间件进行预处理
中间件是一个函数，包含 req, res, next 三个参数，next() 参数把流转关系交给下一个中间件或路由

中间件 ...`,l:"server/nodejs/Express.html#express-中间件",a:"express-中间件"},"118.6":{t:"全局中间件\r",p:`
通过 app.use() 定义的中间件为全局中间件

const express = require('express')
const app = express()

// 定义第一个全局中间件
 ...`,l:"server/nodejs/Express.html#全局中间件",a:"全局中间件"},"118.7":{t:"局部中间件\r",p:`const express = require('express')
const app = express()

// 定义中间件函数
const mw1 = (req, res, next) =& ...`,l:"server/nodejs/Express.html#局部中间件",a:"局部中间件"},"118.8":{t:"中间件分类\r",p:`
应用级别的中间件


通过 app.use() 或 app.get() 或 app.post() ，绑定到 app 实例上的中间件


路由级别的中间件


绑定到 express.Router() ...`,l:"server/nodejs/Express.html#中间件分类",a:"中间件分类"},"118.9":{t:"CORS 跨域资源共享\r",p:"\r",l:"server/nodejs/Express.html#cors-跨域资源共享",a:"cors-跨域资源共享"},"118.10":{t:"cors 中间件解决跨域\r",p:`
安装中间件：npm install cors
导入中间件：const cors = require('cors')
配置中间件：app.use(cors())

`,l:"server/nodejs/Express.html#cors-中间件解决跨域",a:"cors-中间件解决跨域"},"118.11":{t:"CORS\r",p:`
CORS（Cross-Origin Resource Sharing，跨域资源共享）解决跨域，是通过 HTTP 响应头决定浏览器是否阻止前端 JS 代码跨域获取资源
浏览器的同源安全策略默认会阻止网 ...`,l:"server/nodejs/Express.html#cors",a:"cors"},"118.12":{t:"CORS 常见响应头\r",p:`
Access-Control-Allow-Origin：制定了允许访问资源的外域 URL

res.setHeader('Access-Control-Allow-Origin', 'http:// ...`,l:"server/nodejs/Express.html#cors-常见响应头",a:"cors-常见响应头"},"118.13":{t:"CORS 请求分类\r",p:"\r",l:"server/nodejs/Express.html#cors-请求分类",a:"cors-请求分类"},"118.14":{t:"简单请求\r",p:`
请求方式：GET、POST、HEAD 三者之一
HTTP 头部信息不超过以下几种字段：无自定义头部字段、Accept、Accept-Language、Content-Language、DPR、Dow ...`,l:"server/nodejs/Express.html#简单请求",a:"简单请求"},"118.15":{t:"预检请求\r",p:`
请求方式为 GET、POST、HEAD 之外的请求 Method 类型
请求头中包含自定义头部字段
向服务器发送了 application/json 格式的数据

在浏览器与服务器正式通信之前，浏览 ...`,l:"server/nodejs/Express.html#预检请求",a:"预检请求"},"119.0":{t:"# Nodejs 介绍\r",p:`官网传送门
`,l:"server/nodejs/index.html",a:"nodejs-介绍"},"119.1":{t:"初识 Nodejs\r",p:`
Node.js® is an open-source, cross-platform JavaScript runtime environment.
Node.js® 是一个基于 Chrome V8 ...`,l:"server/nodejs/index.html#初识-nodejs",a:"初识-nodejs"},"119.2":{t:"Nodejs 的特点\r",p:`
异步、非阻塞 IO 模型
事件循环
单线程
总结：轻量和高效
Node.js 的性能和效率非常高。

传统的 Java 语言是一个请求开启一个线程，当请求处理完毕后就关闭这个线程。而 Node.js ...`,l:"server/nodejs/index.html#nodejs-的特点",a:"nodejs-的特点"},"119.3":{t:"使用 Node.js 时的劣势\r",p:`
程序运行不稳定，可能会出现服务不可用的情况
程序运行效率较低，每秒的请求数维持在一个较低的水平

`,l:"server/nodejs/index.html#使用-node-js-时的劣势",a:"使用-node-js-时的劣势"},"120.0":{t:"# Nodejs内置模块\r",p:"\r",l:"server/nodejs/innerModule.html",a:"nodejs内置模块"},"120.1":{t:"fs 文件系统模块\r",p:`
fs 模块中所有的操作都有两种形式可供选择:同步和异步
同步文件系统会阻塞程序的执行，也就是除非操作完毕，否则不会向下执行代码
异步文件系统不会阻塞程序的执行，而是在操作完成时，通过回调函数将结果返 ...`,l:"server/nodejs/innerModule.html#fs-文件系统模块",a:"fs-文件系统模块"},"120.2":{t:"读取文件\r",p:"\r",l:"server/nodejs/innerModule.html#读取文件",a:"读取文件"},"120.3":{t:"简单文件读取\r",p:`语法格式：
fs.readFile(path[, options], callback)


path：文件路径
options：配置选项，若是字符串则指定编码格式

encoding：编码格式
fl ...`,l:"server/nodejs/innerModule.html#简单文件读取",a:"简单文件读取"},"120.4":{t:"流式文件读取\r",p:`
简单文件读取的方式会一次性读取文件内容到内存中，若文件较大，会占用过多内存影响系统性能，且读取速度慢
大文件适合用流式文件读取，它会分多次将文件读取到内存中

var fs = require('f ...`,l:"server/nodejs/innerModule.html#流式文件读取",a:"流式文件读取"},"120.5":{t:"写入文件\r",p:"\r",l:"server/nodejs/innerModule.html#写入文件",a:"写入文件"},"120.6":{t:"简单文件写入\r",p:`语法格式：
fs.writeFile(file, data[, options], callback)


file：文件路径
data：写入内容
options：配置选项，包含 encoding,  ...`,l:"server/nodejs/innerModule.html#简单文件写入",a:"简单文件写入"},"120.7":{t:"流式文件写入\r",p:`// 同步、异步、简单文件的写入都不适合大文件的写入，性能较差，容易导致内存溢出
var fs = require('fs')

// 创建一个可写流
var ws = fs.createWriteS ...`,l:"server/nodejs/innerModule.html#流式文件写入",a:"流式文件写入"},"120.8":{t:"Buffer 缓冲区\r",p:`
Buffer 缓冲区文档


Buffer 的结构与数组类似，操作方法也与数组类似
数组不能存储二进制文件，Buffer 是专门存储二进制数据的
Buffer 存储的是二进制数据，显示时以 16 进 ...`,l:"server/nodejs/innerModule.html#buffer-缓冲区",a:"buffer-缓冲区"},"120.9":{t:"路径动态拼接问题 `__dirname`\r",p:`
在使用 fs 模块操作文件时，如果提供的操作路径是以 ./ 或 ../ 开头的相对路径时，容易出现路径动态拼接错误的问题
原因：代码在运行的时候，会以执行 node 命令时所处的目录，动态拼接出被操 ...`,l:"server/nodejs/innerModule.html#路径动态拼接问题-dirname",a:"路径动态拼接问题-dirname"},"120.10":{t:"其它操作\r",p:`验证路径是否存在：

fs.exists(path, callback)
fs.existsSync(path)

获取文件信息：

fs.stat(path, callback)
fs.stat(p ...`,l:"server/nodejs/innerModule.html#其它操作",a:"其它操作"},"120.11":{t:"path 路径模块\r",p:`path 模块是 Node.js 官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求。
`,l:"server/nodejs/innerModule.html#path-路径模块",a:"path-路径模块"},"120.12":{t:"路径拼接 `path.join()`\r",p:`const path = require('path')
const fs = require('fs')

// 注意 ../ 会抵消前面的路径
// ./ 会被忽略
const pathStr = ...`,l:"server/nodejs/innerModule.html#路径拼接-path-join",a:"路径拼接-path-join"},"120.13":{t:"获取路径中文件名 `path.basename()`\r",p:`使用 path.basename() 方法，可以获取路径中的最后一部分，常通过该方法获取路径中的文件名
path.basename(path[, ext])


path: 文件路径
ext: 文件扩 ...`,l:"server/nodejs/innerModule.html#获取路径中文件名-path-basename",a:"获取路径中文件名-path-basename"},"120.14":{t:"获取路径中文件扩展名 `path.extname()`\r",p:`const path = require('path')

const fpath = '/a/b/c/index.html'

const fext = path.extname(fpath)
co ...`,l:"server/nodejs/innerModule.html#获取路径中文件扩展名-path-extname",a:"获取路径中文件扩展名-path-extname"},"120.15":{t:"http 模块\r",p:`http 模块是 Node.js 官方提供的、用来创建 web 服务器的模块。
`,l:"server/nodejs/innerModule.html#http-模块",a:"http-模块"},"120.16":{t:"创建基本 Web 服务器\r",p:`const http = require('http')

// 创建 web 服务器实例
const server = http.createServer()

// 为服务器实例绑定 reques ...`,l:"server/nodejs/innerModule.html#创建基本-web-服务器",a:"创建基本-web-服务器"},"120.17":{t:"实现简陋路由效果\r",p:`const http = require('http')
const server = http.createServer()

server.on('request', (req, res) =&g ...`,l:"server/nodejs/innerModule.html#实现简陋路由效果",a:"实现简陋路由效果"},"121.0":{t:"# 模块化\r",p:"\r",l:"server/nodejs/module.html",a:"模块化"},"121.1":{t:"基本概念\r",p:"\r",l:"server/nodejs/module.html#基本概念",a:"基本概念"},"121.2":{t:"什么是模块化\r",p:`概念：

模块化是指解决一个复杂问题时，自顶向下逐层把系统划分为若干模块的过程，模块是可组合、分解和更换的单元。
模块化可提高代码的复用性和可维护性，实现按需加载。
模块的内部数据、实现是私有的, 只 ...`,l:"server/nodejs/module.html#什么是模块化",a:"什么是模块化"},"121.3":{t:"模块化的好处\r",p:`
避免命名空间的冲突
提高代码的复用性
提高维护性
更好的分离，实现按需加载

`,l:"server/nodejs/module.html#模块化的好处",a:"模块化的好处"},"121.4":{t:"Nodejs 中模块化\r",p:"\r",l:"server/nodejs/module.html#nodejs-中模块化",a:"nodejs-中模块化"},"121.5":{t:"Node.js 中模块的分类\r",p:`
内置模块
自定义模块
第三方模块

`,l:"server/nodejs/module.html#node-js-中模块的分类",a:"node-js-中模块的分类"},"121.6":{t:"Node.js 中的模块作用域\r",p:`
和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域
防止全局变量污染

`,l:"server/nodejs/module.html#node-js-中的模块作用域",a:"node-js-中的模块作用域"},"121.7":{t:"模块作用域的成员\r",p:`
自定义模块中都有一个 module 对象，存储了和当前模块有关的信息
在自定义模块中，可以使用 module.exports 对象，将模块内的成员共享出去，供外界使用。导入自定义模块时，得到的就是  ...`,l:"server/nodejs/module.html#模块作用域的成员",a:"模块作用域的成员"},"121.8":{t:"CommonJS 模块化规范\r",p:`
每个模块内部，module 变量代表当前模块
module 变量是一个对象，module.exports 是对外的接口
加载某个模块即加载该模块的 module.exports 属性

`,l:"server/nodejs/module.html#commonjs-模块化规范",a:"commonjs-模块化规范"},"121.9":{t:"模块加载机制\r",p:`模块第一次加载后会被缓存，即多次调用 require() 不会导致模块的代码被执行多次，提高模块加载效率。
`,l:"server/nodejs/module.html#模块加载机制",a:"模块加载机制"},"121.10":{t:"内置模块加载\r",p:`内置模块加载优先级最高。
`,l:"server/nodejs/module.html#内置模块加载",a:"内置模块加载"},"121.11":{t:"自定义模块加载\r",p:`加载自定义模块时，路径要以 ./ 或 ../ 开头，否则会作为内置模块或第三方模块加载。
导入自定义模块时，若省略文件扩展名，则 Node.js 会按顺序尝试加载文件：

按确切的文件名加载
补全 . ...`,l:"server/nodejs/module.html#自定义模块加载",a:"自定义模块加载"},"121.12":{t:"第三方模块加载\r",p:`
若导入第三方模块， Node.js 会从当前模块的父目录开始，尝试从 /node_modules 文件夹中加载第三方模块。
如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件 ...`,l:"server/nodejs/module.html#第三方模块加载",a:"第三方模块加载"},"121.13":{t:"目录作为模块加载\r",p:`当把目录作为模块标识符进行加载的时候，有三种加载方式：

在被加载的目录下查找 package.json 的文件，并寻找 main 属性，作为 require() 加载的入口
如果没有 package ...`,l:"server/nodejs/module.html#目录作为模块加载",a:"目录作为模块加载"},"121.14":{t:"npm 与包\r",p:"\r",l:"server/nodejs/module.html#npm-与包",a:"npm-与包"},"121.15":{t:"包\r",p:`Node.js 中的第三方模块又叫做包
不同于 Node.js 中的内置模块与自定义模块，包是由第三方个人或团队开发出来的，免费供所有人使用。Node.js 中的包都是免费且开源的。

由于 Node ...`,l:"server/nodejs/module.html#包",a:"包"},"121.16":{t:"npm 安装\r",p:`在项目中安装包的命令
npm install 包的元整名称
或者
npm i 包的元整名称

现在也有其他的包管理工具，如 yarn、pnpm，
下载安装速度是比 npm 要快的
`,l:"server/nodejs/module.html#npm-安装",a:"npm-安装"},"121.17":{t:"通过切换源解决 npm 的下包速度慢的问题\r",p:`npm config get registry  # 查看当前包镜像源
npm config get registry=http:registry.npm.taobao.org/ # 切换源头
npm ...`,l:"server/nodejs/module.html#通过切换源解决-npm-的下包速度慢的问题",a:"通过切换源解决-npm-的下包速度慢的问题"},"121.18":{t:"开发包\r",p:`
注册 npm 账号
初始化包的基本结构

新建文件夹（包名），新建如下三个文件




package.json (包管理配置文件)
index.js (包的入口文件)
README.md (包的说 ...`,l:"server/nodejs/module.html#开发包",a:"开发包"},"121.19":{t:"模块的加载机制\r",p:`模块在第一次加载后会被缓存，多次调用 require()模块的代码只会被执行一次。不论是内置模块、用户自定义模块、还是第三方模块，他们都会优先从缓存中加载，从而提高模块的加载效率。
`,l:"server/nodejs/module.html#模块的加载机制",a:"模块的加载机制"},"121.20":{t:"内置模块的加载机制\r",p:`
内置模块的加载优先级最高

`,l:"server/nodejs/module.html#内置模块的加载机制",a:"内置模块的加载机制"},"121.21":{t:"自定义模块的加载机制\r",p:`
使用 require()加载自定义模块时，必须指定以./或../开头的路径标识符。在加载自定义模块时，如果没有指定./或../这样的路径标识符，则 node 会把它当作内置模块或第三方模块进行加载。 ...`,l:"server/nodejs/module.html#自定义模块的加载机制",a:"自定义模块的加载机制"},"121.22":{t:"第三方模块的加载机制\r",p:`
如果传递给 require()的模块标识符不是一个内置模块，也没有以./或../开头，则 Nodejs 会从当前模块的父目录开始，尝试从/node_modules 文件夹中加载第三方模块
如果没有找 ...`,l:"server/nodejs/module.html#第三方模块的加载机制",a:"第三方模块的加载机制"},"121.23":{t:"目录作为模块\r",p:`
当把目录作为模块标识符，传递给 require()进行加载的时候，有三种加载方式

a. 在被加载的目录下查找一个叫做 package.json 的文件，并寻找 main 属性值作为 require ...`,l:"server/nodejs/module.html#目录作为模块",a:"目录作为模块"},"122.0":{t:"# 数据库和身份认证\r",p:"\r",l:"server/nodejs/mysql.html",a:"数据库和身份认证"},"122.1":{t:"Node 操作 mysql\r",p:"\r",l:"server/nodejs/mysql.html#node-操作-mysql",a:"node-操作-mysql"},"122.2":{t:"配置 mysql 模块\r",p:`
安装 mysql 模块

npm install mysql


建立连接

const mysql = require('mysql')

const db = mysql.createPool( ...`,l:"server/nodejs/mysql.html#配置-mysql-模块",a:"配置-mysql-模块"},"122.3":{t:"操作 mysql 数据库\r",p:`
查询数据

db.query('select * from users', (err, results) =&gt; {
  ...
})


插入数据

// ? 表示占位符
const sql  ...`,l:"server/nodejs/mysql.html#操作-mysql-数据库",a:"操作-mysql-数据库"},"122.4":{t:"Web 开发模式\r",p:"\r",l:"server/nodejs/mysql.html#web-开发模式",a:"web-开发模式"},"122.5":{t:"服务端渲染\r",p:`服务器发送给客户端的 HTML 页面，是在服务器通过字符串的拼接动态生成的。因此客户端不需要使用 Ajax 额外请求页面的数据。
app.get('/index.html', (req, res) = ...`,l:"server/nodejs/mysql.html#服务端渲染",a:"服务端渲染"},"122.6":{t:"前后端分离\r",p:`前后端分离的开发模式，依赖于 Ajax 技术的广泛应用。后端只负责提供 API 接口，前端使用 Ajax 调用接口。
优点：

开发体验好。前端专业页面开发，后端专注接口开发。
用户体验好。页面局部刷 ...`,l:"server/nodejs/mysql.html#前后端分离",a:"前后端分离"},"122.7":{t:"如何选择\r",p:`
企业级网站，主要功能是展示，没有复杂交互，且需要良好的 SEO，可考虑服务端渲染
后台管理项目，交互性强，无需考虑 SEO，可使用前后端分离
为同时兼顾首页渲染速度和前后端分离开发效率，可采用首屏服 ...`,l:"server/nodejs/mysql.html#如何选择",a:"如何选择"},"122.8":{t:"身份认证\r",p:"\r",l:"server/nodejs/mysql.html#身份认证",a:"身份认证"},"122.9":{t:"Session 认证机制\r",p:`服务端渲染推荐使用 Session 认证机制
`,l:"server/nodejs/mysql.html#session-认证机制",a:"session-认证机制"},"122.10":{t:"Session 工作原理\r",p:`!session
`,l:"server/nodejs/mysql.html#session-工作原理",a:"session-工作原理"},"122.11":{t:"Express 中使用 Session 认证\r",p:`
安装 express-session 中间件

npm install express-session


配置中间件

const session = require('express-sessi ...`,l:"server/nodejs/mysql.html#express-中使用-session-认证",a:"express-中使用-session-认证"},"122.12":{t:"JWT 认证机制\r",p:`前后端分离推荐使用 JWT（JSON Web Token）认证机制，是目前最流行的跨域认证解决方案
`,l:"server/nodejs/mysql.html#jwt-认证机制",a:"jwt-认证机制"},"122.13":{t:"JWT 工作原理\r",p:`Session 认证的局限性：

Session 认证机制需要配合 Cookie 才能实现。由于 Cookie 默认不支持跨域访问，所以，当涉及到前端跨域请求后端接口的时候，需要做很多额外的配置，才能 ...`,l:"server/nodejs/mysql.html#jwt-工作原理",a:"jwt-工作原理"},"122.14":{t:"Express 使用 JWT\r",p:`
安装


jsonwebtoken 用于生成 JWT 字符串
express-jwt 用于将 JWT 字符串解析还原成 JSON 对象

npm install jsonwebtoken expre ...`,l:"server/nodejs/mysql.html#express-使用-jwt",a:"express-使用-jwt"},"123.0":{t:"# npm 与 yarn 的命令对比\r",p:`下面是一个包含 npm 和 Yarn 命令对比的 Markdown 表格：



命令
npm
Yarn




初始化项目
npm init
yarn init


安装依赖项
npm instal ...`,l:"server/npm/command.html",a:"npm-与-yarn-的命令对比"},"124.0":{t:"# NPM：Node Package Manager（Node 包管理器）\r",p:"\r",l:"server/npm/index.html",a:"npm-node-package-manager-node-包管理器"},"124.1":{t:"什么是 npm？\r",p:`npm 是一个用于管理和共享 JavaScript 代码的工具。它是 Node.js 的默认包管理器，也是世界上最大的开源软件注册表。
npm 允许开发者轻松地安装、更新、卸载和共享 JavaScri ...`,l:"server/npm/index.html#什么是-npm",a:"什么是-npm"},"124.2":{t:"安装 npm\r",p:`npm 是随同 Node.js 一起安装的。当你安装 Node.js 时，npm 也会自动安装。
你可以通过在终端中运行以下命令来检查是否已安装 npm 并查看版本：
npm --version

如 ...`,l:"server/npm/index.html#安装-npm",a:"安装-npm"},"124.3":{t:"常用命令\r",p:`以下是一些常用的 npm 命令：

npm init：初始化一个新的 npm 项目，生成一个 package.json 文件。
npm install &lt;package-name&gt;：安装指 ...`,l:"server/npm/index.html#常用命令",a:"常用命令"},"124.4":{t:"package.json\r",p:`package.json 是每个 npm 项目的核心文件，其中包含了项目的配置信息、依赖项、脚本和其他元数据。
可以通过运行 npm init 命令来初始化一个新的项目，并生成 package.jso ...`,l:"server/npm/index.html#package-json",a:"package-json"},"124.5":{t:"使用依赖项\r",p:`使用 npm，你可以轻松地安装和管理项目的依赖项。在 package.json 文件的 dependencies 部分，你可以列出项目所需的包及其版本号。
当其他开发者获得你的项目时，他们可以使用 n ...`,l:"server/npm/index.html#使用依赖项",a:"使用依赖项"},"124.6":{t:"开发和发布包\r",p:`npm 不仅可以帮助你管理项目的依赖项，还可以帮助你开发和发布自己的包。
通过编写代码、创建 package.json 文件、定义脚本和使用 npm publish 命令，你可以将自己的包发布到 np ...`,l:"server/npm/index.html#开发和发布包",a:"开发和发布包"},"125.0":{t:"# 发布包到 npm 上\r",p:`本教程将向你展示如何发布自己的包到 npm 上。按照以下步骤进行操作：
`,l:"server/npm/publish.html",a:"发布包到-npm-上"},"125.1":{t:"步骤 1：注册 npm 账号\r",p:`如果你还没有 npm 账号，请访问 npm 官方网站（https://www.npmjs.com/）并注册一个账号。
`,l:"server/npm/publish.html#步骤-1-注册-npm-账号",a:"步骤-1-注册-npm-账号"},"125.2":{t:"步骤 2：初始化项目\r",p:`在你的项目目录中，打开终端，并执行以下命令来初始化项目：
npm init -y

`,l:"server/npm/publish.html#步骤-2-初始化项目",a:"步骤-2-初始化项目"},"125.3":{t:"步骤 3：编写代码\r",p:`在项目目录中，编写你的包的代码。可以创建一个或多个 JavaScript 文件，实现你的功能逻辑。
`,l:"server/npm/publish.html#步骤-3-编写代码",a:"步骤-3-编写代码"},"125.4":{t:"步骤 4：准备发布文件\r",p:`确保在你的项目中包含以下文件：

package.json：这个文件由 npm init 命令生成，并包含了你的包的基本信息。
README.md：这是你的包的说明文档，提供关于包的介绍、使用方法和示 ...`,l:"server/npm/publish.html#步骤-4-准备发布文件",a:"步骤-4-准备发布文件"},"125.5":{t:"步骤 5：发布包\r",p:`
使用终端登录到你的 npm 账号：

npm login

按照提示提供你的用户名、密码和邮箱。

执行以下命令发布你的包：

npm publish

这将会将你的包上传到 npm 仓库，并使其对 ...`,l:"server/npm/publish.html#步骤-5-发布包",a:"步骤-5-发布包"},"125.6":{t:"步骤 6：更新和维护\r",p:`如果你的包需要更新或有新的版本，你可以按照以下步骤进行更新和维护：


在你的项目中，修改代码并增加新的功能或修复 bug。


更新 package.json 文件中的版本号。


执行以下命令发布 ...`,l:"server/npm/publish.html#步骤-6-更新和维护",a:"步骤-6-更新和维护"},"125.7":{t:"步骤 7：使用你的包\r",p:`其他开发者可以使用以下命令来安装和使用你的包：
npm install &lt;package-name&gt;

将 &lt;package-name&gt; 替换为你的包的名称。
`,l:"server/npm/publish.html#步骤-7-使用你的包",a:"步骤-7-使用你的包"},"126.0":{t:"# yarn 的安装与使用\r",p:"\r",l:"server/npm/yarn.html",a:"yarn-的安装与使用"},"126.1":{t:"安装 Yarn\r",p:`在开始之前，请确保你已经安装了 Node.js。然后，可以按照以下步骤安装 Yarn：
通过包管理器安装 Yarn：
使用 npm（全局安装）： 打开终端并运行以下命令：
npm install -g ...`,l:"server/npm/yarn.html#安装-yarn",a:"安装-yarn"},"126.2":{t:"使用 Yarn\r",p:`安装 Yarn 后，你可以使用以下常用命令来管理依赖关系和执行其他操作：


初始化项目： 进入你的项目目录，并运行以下命令来初始化项目：
yarn init

这将引导你提供有关项目的一些信息，并生 ...`,l:"server/npm/yarn.html#使用-yarn",a:"使用-yarn"},"127.0":{t:"# 初始 Canvas\r",p:"\r",l:"visual/canvas/base/初识Canvas.html",a:"初始-canvas"},"127.1":{t:"什么是 canvas？\r",p:`
Canvas 是 HTML5 中的一个元素，允许使用 JavaScript 脚本在矩形区域中绘制图像、动画和其他复杂的视觉效果。它提供了许多 API，允许控制绘图区域、颜色、线条、文本、图像等多种元 ...`,l:"visual/canvas/base/初识Canvas.html#什么是-canvas",a:"什么是-canvas"},"127.2":{t:"一. Canvas 的基础知识\r",p:"\r",l:"visual/canvas/base/初识Canvas.html#一-canvas-的基础知识",a:"一-canvas-的基础知识"},"127.3":{t:"1.1 坐标系统\r",p:"Canvas 使用直角坐标系，原点坐标为（0, 0），x 轴向右延伸，y 轴向下延伸。可以通过 Canvas API 访问 x 轴和 y 轴上的位置以及宽度和高度等信息，通过为图形或其他元素设置 x  ...",l:"visual/canvas/base/初识Canvas.html#_1-1-坐标系统",a:"_1-1-坐标系统"},"127.4":{t:"1.2 绘图上下文\r",p:"Canvas 可以绘制 SVG 和其他类型的矢量图形，但在大多数情况下，使用 Canvas 的绘图上下文进行绘制是最基本和有效的方法。Canvas API 提供了两种基本的绘图上下文，2D 和 Web ...",l:"visual/canvas/base/初识Canvas.html#_1-2-绘图上下文",a:"_1-2-绘图上下文"},"127.5":{t:"1.3 绘图元素\r",p:"Canvas 提供了多种绘图元素，包括路径和图形、文本、图像、矩形和其他形状等。绘图元素可以通过 Canvas API 进行控制，可以简单地绘制圆形、矩形、线条等图形，也可以绘制更高级的元素，如 3D ...",l:"visual/canvas/base/初识Canvas.html#_1-3-绘图元素",a:"_1-3-绘图元素"},"127.6":{t:"二. 使用 Canvas 创造交互式效果\r",p:`除了基本的绘图功能之外，Canvas 还可以创造交互式效果，用来展示和操控数据、陈述观点、以及制作各种绚丽的视觉展示等。
例如，您可以通过 Canvas 在一个网页上创造一个交互式地图，让用户点击地图 ...`,l:"visual/canvas/base/初识Canvas.html#二-使用-canvas-创造交互式效果",a:"二-使用-canvas-创造交互式效果"},"127.7":{t:"三. 使用 Canvas 创造动画\r",p:"由于 Canvas 非常适合处理像素级别的控制，利用 JavaScript 脚本使 Canvas 绘制出具有动态效果的图像和视觉艺术也显得非常合适。通过 Canvas API，您可以控制图形元素的位移 ...",l:"visual/canvas/base/初识Canvas.html#三-使用-canvas-创造动画",a:"三-使用-canvas-创造动画"},"127.8":{t:"四. Canvas 的局限性\r",p:"Canvas 虽然在 HTML5 中提供了许多优势，但也存在一些限制。例如，不同的浏览器可能解释 Canvas API 时存在差异，因此需要在开发过程中进行跨浏览器的测试。此外，在处理大量的图像和其他 ...",l:"visual/canvas/base/初识Canvas.html#四-canvas-的局限性",a:"四-canvas-的局限性"},"128.0":{t:"# Canvas 图像变换\r",p:`以下方法用于图像变换。

CanvasRenderingContext2D.rotate()：图像旋转
CanvasRenderingContext2D.scale()：图像缩放
CanvasRend ...`,l:"visual/canvas/base/图像变换.html",a:"canvas-图像变换"},"128.1":{t:"1.rotate()\r",p:`CanvasRenderingContext2D.rotate()方法用于图像旋转。它接受一个弧度值作为参数，表示顺时针旋转的度数。
context.rotate((45 * Math.PI) / 1 ...`,l:"visual/canvas/base/图像变换.html#_1-rotate",a:"_1-rotate"},"128.2":{t:"2.scale()\r",p:"CanvasRenderingContext2D.scale()方法用于缩放图像。它接受两个参数，分别是x轴方向的缩放因子和y轴方向的缩放因子。默认情况下，一个单位就是一个像素，缩放因子可以缩放单位， ...",l:"visual/canvas/base/图像变换.html#_2-scale",a:"_2-scale"},"128.3":{t:"3.translate()\r",p:`CanvasRenderingContext2D.translate()方法用于平移图像。它接受两个参数，分别是 x 轴和 y 轴移动的距离（单位像素）。
context.fillRect(0, 0, ...`,l:"visual/canvas/base/图像变换.html#_3-translate",a:"_3-translate"},"128.4":{t:"4.transform()\r",p:`CanvasRenderingContext2D.transform()方法接受一个变换矩阵的六个元素作为参数，完成缩放、旋转、移动和倾斜等变形。
它的使用格式如下。
context.transfor ...`,l:"visual/canvas/base/图像变换.html#_4-transform",a:"_4-transform"},"128.5":{t:"5.setTransform()\r",p:`CanvasRenderingContext2D.setTransform()方法取消前面的图形变换，将画布恢复到该方法指定的状态。该方法的参数与transform()方法完全一致。
context. ...`,l:"visual/canvas/base/图像变换.html#_5-settransform",a:"_5-settransform"},"129.0":{t:"# Canvas 图像合成\r",p:`
在默认情况之下，如果在 Canvas 之中将某个物体（源）绘制在另一个物体（目标）之上，那么浏览器就会简单地把源特体的图像叠放在目标物体图像上面。


在 Canvas 中，把图像源和目标图像，通过 ...`,l:"visual/canvas/base/图像合成.html",a:"canvas-图像合成"},"129.1":{t:"属性\r",p:`


source-over
默认。在目标图像上显示源图像。




source-atop
在目标图像顶部显示源图像。源图像位于目标图像之外的部分是不可见的。


source-in
在目标图像中显 ...`,l:"visual/canvas/base/图像合成.html#属性",a:"属性"},"130.0":{t:"# Canvas 使用\r",p:"\r",l:"visual/canvas/base/基本使用.html",a:"canvas-使用"},"130.1":{t:"使用\r",p:"&lt;canvas id=&quot;canvas&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;您的浏览器不支持 Canvas&lt; ...",l:"visual/canvas/base/基本使用.html#使用",a:"使用"},"130.2":{t:"属性方法\r",p:`
strokeStyle 设置或返回描边颜色
fillStyle 设置或返回填充颜色
stroke() 描边已定义绘图（路径）
fill() 填充当前绘图（路径）
moveTo(x,y) 把路径移动到 ...`,l:"visual/canvas/base/基本使用.html#属性方法",a:"属性方法"},"131.0":{t:"# Canvas 样式控制\r",p:"\r",l:"visual/canvas/base/样式控制.html",a:"canvas-样式控制"},"131.1":{t:"1.线性\r",p:`以下的方法和属性控制线条的视觉特征。

CanvasRenderingContext2D.lineWidth：指定线条的宽度，默认为 1.0。
CanvasRenderingContext2D.lin ...`,l:"visual/canvas/base/样式控制.html#_1-线性",a:"_1-线性"},"131.2":{t:"2.渐变色\r",p:`以下方法用于设置渐变效果和图像填充效果。

CanvasRenderingContext2D.createLinearGradient()：定义线性渐变样式。
CanvasRenderingConte ...`,l:"visual/canvas/base/样式控制.html#_2-渐变色",a:"_2-渐变色"},"131.3":{t:"3.图像填充\r",p:`createPattern()方法定义一个图像填充样式，在指定方向上不断重复该图像，填充指定的区域。
context.createPattern(image, repetition)

该方法接受两个 ...`,l:"visual/canvas/base/样式控制.html#_3-图像填充",a:"_3-图像填充"},"131.4":{t:"4.阴影\r",p:`以下属性用于设置阴影。

CanvasRenderingContext2D.shadowBlur：阴影的模糊程度，默认为0。
CanvasRenderingContext2D.shadowColor： ...`,l:"visual/canvas/base/样式控制.html#_4-阴影",a:"_4-阴影"},"132.0":{t:"# Canvas 状态\r",p:`
save() 保存当前环境的状态。
restore() 返回之前保存过的路径状态和属性。

context.fillStyle = 'red'
context.fillRect(0, 0, 100, ...`,l:"visual/canvas/base/状态.html",a:"canvas-状态"},"133.0":{t:"# Canvas 绘制图形、图像、文字\r",p:"\r",l:"visual/canvas/base/绘制.html",a:"canvas-绘制图形、图像、文字"},"133.1":{t:"绘制图形\r",p:"\r",l:"visual/canvas/base/绘制.html#绘制图形",a:"绘制图形"},"133.2":{t:"绘制矩形\r",p:`//绘制矩形fillRect|strokeRect(位置x，位置y，宽度，高度)
context.strokeRect(150, 50, 100, 100) // 路径
context.fillRec ...`,l:"visual/canvas/base/绘制.html#绘制矩形",a:"绘制矩形"},"133.3":{t:"绘制圆弧\r",p:`
圆弧

// context.arc(圆心x,圆心y,半径,开始的角度,结束的角度)
// 顺时针false 逆时针true 默认值false
context.arc(300, 200, 50, 0 ...`,l:"visual/canvas/base/绘制.html#绘制圆弧",a:"绘制圆弧"},"133.4":{t:"绘制线段\r",p:`context.beginPath()
context.moveTo(100, 300)
context.lineTo(300, 300)
context.lineTo(200, 150)
conte ...`,l:"visual/canvas/base/绘制.html#绘制线段",a:"绘制线段"},"133.5":{t:"绘制图像\r",p:`
三种绘制图片的的方式

context.drawImage(image, dx, dy)
context.drawImage(image, dx, dy, dWidth, dHeight)
cont ...`,l:"visual/canvas/base/绘制.html#绘制图像",a:"绘制图像"},"133.6":{t:"绘制文本\r",p:`以下方法和属性用于绘制文本。

CanvasRenderingContext2D.fillText()：在指定位置绘制实心字符。
CanvasRenderingContext2D.strokeText ...`,l:"visual/canvas/base/绘制.html#绘制文本",a:"绘制文本"},"134.0":{t:"# Canvas 贝塞尔曲线\r",p:"\r",l:"visual/canvas/base/贝塞尔曲线.html",a:"canvas-贝塞尔曲线"},"134.1":{t:"绘制贝塞尔二次曲线\r",p:`
聊天框

context.moveTo(200, 300)
// quadraticCurveTo(控制点x,控制点y,终点x,终点y)
context.quadraticCurveTo(150,  ...`,l:"visual/canvas/base/贝塞尔曲线.html#绘制贝塞尔二次曲线",a:"绘制贝塞尔二次曲线"},"134.2":{t:"绘制贝塞尔三次曲线\r",p:`
爱心

context.moveTo(300, 120)
// bezierCurveTo(控制点1 x,控制点1 y,控制点2 x,控制点2 y,终点x,终点y)
context.bezierCu ...`,l:"visual/canvas/base/贝塞尔曲线.html#绘制贝塞尔三次曲线",a:"绘制贝塞尔三次曲线"},"135.0":{t:"# 刮刮乐\r",p:"\r",l:"visual/canvas/example/刮刮乐.html",a:"刮刮乐"},"135.1":{t:"示例\r",p:`&lt;Cbtn text='再来一次' @click='again' /&gt;
&lt;div style='height:400px'&gt;
&lt;Scratchcard v-if='sho ...`,l:"visual/canvas/example/刮刮乐.html#示例",a:"示例"},"135.2":{t:"代码\r",p:`&lt;div id=&quot;ggk&quot;&gt;谢谢惠顾&lt;/div&gt;
&lt;canvas id=&quot;myCanvas&quot; width=&quot;600&qu ...`,l:"visual/canvas/example/刮刮乐.html#代码",a:"代码"},"136.0":{t:"# 时钟\r",p:"\r",l:"visual/canvas/example/时钟.html",a:"时钟"},"136.1":{t:"示例\r",p:`&lt;Clock /&gt;
`,l:"visual/canvas/example/时钟.html#示例",a:"示例"},"136.2":{t:"代码\r",p:"\r",l:"visual/canvas/example/时钟.html#代码",a:"代码"},"136.3":{t:"js 实现\r",p:`var canvas = document.getElementById('canvas')
var context = canvas.getContext('2d')
function render ...`,l:"visual/canvas/example/时钟.html#js-实现",a:"js-实现"},"136.4":{t:"vue3 实现\r",p:`&lt;template&gt;
  &lt;div&gt;
    &lt;canvas ref=&quot;canvas&quot; width=&quot;600&quot; height=&q ...`,l:"visual/canvas/example/时钟.html#vue3-实现",a:"vue3-实现"},"137.0":{t:"# 梅花特效\r",p:`
参考视频教程

`,l:"visual/canvas/example/梅花特效.html",a:"梅花特效"},"137.1":{t:"示例\r",p:`&lt;Plum /&gt;
`,l:"visual/canvas/example/梅花特效.html#示例",a:"示例"},"137.2":{t:"代码\r",p:`&lt;template&gt;
  &lt;div&gt;
    &lt;canvas ref=&quot;canvas&quot; width=&quot;600&quot; height=&q ...`,l:"visual/canvas/example/梅花特效.html#代码",a:"代码"},"138.0":{t:"# 画板\r",p:"\r",l:"visual/canvas/example/画板.html",a:"画板"},"138.1":{t:"示例\r",p:`&lt;Draw /&gt;
`,l:"visual/canvas/example/画板.html#示例",a:"示例"},"138.2":{t:"代码\r",p:"\r",l:"visual/canvas/example/画板.html#代码",a:"代码"},"138.3":{t:"JS 实现\r",p:`&lt;button id=&quot;boldBtn&quot;&gt;粗线条&lt;/button&gt;
&lt;button id=&quot;thinBtn&quot;&gt;细线条&lt; ...`,l:"visual/canvas/example/画板.html#js-实现",a:"js-实现"},"138.4":{t:"Vue3 实现\r",p:`&lt;template&gt;
  &lt;div class=&quot;btns&quot;&gt;
    &lt;CBtn @click=&quot;boldBtn&quot; text=& ...`,l:"visual/canvas/example/画板.html#vue3-实现",a:"vue3-实现"},"139.0":{t:"<!-- # echarts -->\r",p:`该内容正在努力建设中 ......
`,l:"visual/echarts/index.html",a:"echarts"},"140.0":{t:"# PixiJs 事件交互\r",p:"\r",l:"visual/pixiJs/事件交互.html",a:"pixijs-事件交互"},"140.1":{t:"为精灵添加事件\r",p:`// 为精灵添加交互事件
sprite.interactive = true

// 精灵派加点击事件
sprite.on('click', (e) =&gt; {
  console.log(e,  ...`,l:"visual/pixiJs/事件交互.html#为精灵添加事件",a:"为精灵添加事件"},"140.2":{t:"为图形添加事件\r",p:`// 创建矩形
const rect = new PIXI.Graphics()
rect.beginFill(0xff0000)
rect.drawRect(300, 300, 150, 150)
 ...`,l:"visual/pixiJs/事件交互.html#为图形添加事件",a:"为图形添加事件"},"141.0":{t:"# 初识 PixiJs\r",p:`官方网站
`,l:"visual/pixiJs/初识PixiJs.html",a:"初识-pixijs"},"141.1":{t:"是什么\r",p:`
PixiJS 是一个基于 WebGL 和 Canvas 技术的快速、轻量级的 JavaScript 库，用于创建交互式 2D 图形和动画。它提供了简单易用的 API 和强大的渲染能力，使开发者能够轻 ...`,l:"visual/pixiJs/初识PixiJs.html#是什么",a:"是什么"},"141.2":{t:"特点\r",p:"\r",l:"visual/pixiJs/初识PixiJs.html#特点",a:"特点"},"141.3":{t:"1. 快速高效\r",p:`PixiJS 利用 WebGL 技术进行硬件加速渲染，能够处理大量的图形元素并实现流畅的动画效果。它还支持使用 Canvas 进行降级渲染，以确保在不支持 WebGL 的设备上也能正常运行。
`,l:"visual/pixiJs/初识PixiJs.html#_1-快速高效",a:"_1-快速高效"},"141.4":{t:"2. 简单易用\r",p:`PixiJS 提供了简洁而直观的 API，使开发者能够快速上手并高效地创建图形和动画。它具有一致的接口设计和详细的文档，方便开发者查阅和学习。
`,l:"visual/pixiJs/初识PixiJs.html#_2-简单易用",a:"_2-简单易用"},"141.5":{t:"3. 丰富的功能\r",p:`PixiJS 提供了一系列强大的功能，包括精灵(Sprite)、纹理(Texture)、滤镜(Filters)、事件处理等。开发者可以通过组合这些功能来创建复杂的交互式图形界面和游戏。
`,l:"visual/pixiJs/初识PixiJs.html#_3-丰富的功能",a:"_3-丰富的功能"},"141.6":{t:"4. 跨平台支持\r",p:`PixiJS 可以在现代浏览器上运行，并提供了针对移动设备的优化。它支持响应式设计，使开发者能够创建适应不同屏幕大小和分辨率的应用。
`,l:"visual/pixiJs/初识PixiJs.html#_4-跨平台支持",a:"_4-跨平台支持"},"141.7":{t:"用法示例\r",p:`下面是一个简单的 PixiJS 示例，展示了如何创建一个基本的场景并添加一个可交互的精灵：
// 创建一个场景
let app = new PIXI.Application({ width: 800, ...`,l:"visual/pixiJs/初识PixiJs.html#用法示例",a:"用法示例"},"142.0":{t:"# PixiJs 基本使用\r",p:"\r",l:"visual/pixiJs/基本使用.html",a:"pixijs-基本使用"},"142.1":{t:"使用\r",p:`&lt;template&gt;
  &lt;div&gt;&lt;/div&gt;
&lt;/template&gt;



`,l:"visual/pixiJs/基本使用.html#使用",a:"使用"},"142.2":{t:"Graphics 类详解\r",p:`// 导入pixi
import as PIXI from &quot;pixi.js&quot;;

// 创建应用
const app = new PIXI.Application({
	widt ...`,l:"visual/pixiJs/基本使用.html#graphics-类详解",a:"graphics-类详解"},"143.0":{t:"# PixiJs 文字与遮罩\r",p:"\r",l:"visual/pixiJs/文字与遮罩.html",a:"pixijs-文字与遮罩"},"143.1":{t:"添加文字\r",p:`// 导入pixi
import * as PIXI from &quot;pixi.js&quot;;

// 创建应用
const app = new PIXI.Application({
	wi ...`,l:"visual/pixiJs/文字与遮罩.html#添加文字",a:"添加文字"},"143.2":{t:"使用文字作为精灵的遮罩\r",p:`// 创建一个精灵
const sprite = PIXI.Sprite.from(
  'https://pic.rmb.bdstatic.com/05b0ea405c9e690ab51627853 ...`,l:"visual/pixiJs/文字与遮罩.html#使用文字作为精灵的遮罩",a:"使用文字作为精灵的遮罩"},"144.0":{t:"# 波纹涟漪效果\r",p:"\r",l:"visual/pixiJs/波纹涟漪效果.html",a:"波纹涟漪效果"},"144.1":{t:"代码\r",p:`&lt;template&gt;
  &lt;div&gt;&lt;/div&gt;
&lt;/template&gt;



`,l:"visual/pixiJs/波纹涟漪效果.html#代码",a:"代码"},"145.0":{t:"# PixiJs 滤镜特效\r",p:"\r",l:"visual/pixiJs/滤镜特效.html",a:"pixijs-滤镜特效"},"145.1":{t:"创建应用\r",p:`// 导入pixi
import * as PIXI from &quot;pixi.js&quot;;

// 创建应用
const app = new PIXI.Application({
	wi ...`,l:"visual/pixiJs/滤镜特效.html#创建应用",a:"创建应用"},"145.2":{t:"添加滤镜\r",p:`// 创建模糊滤镜
const blurFilter = new PIXI.BlurFilter()
// 设置模糊滤镜的模糊程度
blurFilter.blur = 10
// 将模糊滤镜添加到精灵 ...`,l:"visual/pixiJs/滤镜特效.html#添加滤镜",a:"添加滤镜"},"145.3":{t:"使用 pixi-filters 库\r",p:`npm install pixi-filters

// 创建轮廓滤镜
const outlineFilter = new OutlineFilter(5, 0xffff00) // 轮廓宽度，颜色
 ...`,l:"visual/pixiJs/滤镜特效.html#使用-pixi-filters-库",a:"使用-pixi-filters-库"},"146.0":{t:"# PixiJs 精灵与动画\r",p:"\r",l:"visual/pixiJs/精灵与动画.html",a:"pixijs-精灵与动画"},"146.1":{t:"1.创建应用\r",p:`// 导入pixi
import as PIXI from &quot;pixi.js&quot;;

// 创建应用
const app = new PIXI.Application({
	widt ...`,l:"visual/pixiJs/精灵与动画.html#_1-创建应用",a:"_1-创建应用"},"146.2":{t:"2.创建纹理与精灵\r",p:`// 创建一个纹理
const texture = PIXI.Texture.from('./vite.svg')

// 创建一个精灵
const sprite = new PIXI.Sprite( ...`,l:"visual/pixiJs/精灵与动画.html#_2-创建纹理与精灵",a:"_2-创建纹理与精灵"},"146.3":{t:"3.设置属性\r",p:`// 锚点
sprite.anchor.set(0.5, 0.5)

// 设置位置
sprite.x = app.screen.width / 2
sprite.y = app.screen.hei ...`,l:"visual/pixiJs/精灵与动画.html#_3-设置属性",a:"_3-设置属性"},"146.4":{t:"4.实现动画\r",p:`// ticker 实现动画
app.ticker.add((delta) =&gt; {
  sprite.rotation += 0.01 delta
})

`,l:"visual/pixiJs/精灵与动画.html#_4-实现动画",a:"_4-实现动画"},"147.0":{t:"# PixiJs 绘制图形\r",p:"\r",l:"visual/pixiJs/绘制图形.html",a:"pixijs-绘制图形"},"147.1":{t:"绘制椭圆\r",p:`const ellipse = new PIXI.Graphics()
ellipse.beginFill(0x66ccff)
ellipse.drawEllipse(0, 0, 164, 64)
e ...`,l:"visual/pixiJs/绘制图形.html#绘制椭圆",a:"绘制椭圆"},"147.2":{t:"绘制多边形\r",p:`const polygon = new PIXI.Graphics()
polygon.beginFill(0x660000)
// 参数一个数组，数组中的每一个元素是一个点的坐标，每两个元素是一个点 ...`,l:"visual/pixiJs/绘制图形.html#绘制多边形",a:"绘制多边形"},"147.3":{t:"创建圆角矩形\r",p:`const roundedRectangle = new PIXI.Graphics()
roundedRectangle.beginFill(0x66ccff, 0.9)

// 绘制圆角矩形 x  ...`,l:"visual/pixiJs/绘制图形.html#创建圆角矩形",a:"创建圆角矩形"},"147.4":{t:"绘制圆弧\r",p:`const arc = new PIXI.Graphics()
arc.beginFill(0x660000)
// arc(x坐标,y坐标,半径,其实角度,结束角度,顺/逆时针)
arc.arc(0 ...`,l:"visual/pixiJs/绘制图形.html#绘制圆弧",a:"绘制圆弧"},"147.5":{t:"绘制线段\r",p:`const line = new PIXI.Graphics()
line.lineStyle(10, 0x660000, 0.6) // 宽度，颜色，透明度
line.moveTo(0, 0)
li ...`,l:"visual/pixiJs/绘制图形.html#绘制线段",a:"绘制线段"},"148.0":{t:"# 谷歌恐龙小游戏\r",p:"\r",l:"visual/pixiJs/谷歌恐龙小游戏.html",a:"谷歌恐龙小游戏"},"148.1":{t:"素材图片\r",p:`!谷歌恐龙小游戏素材
`,l:"visual/pixiJs/谷歌恐龙小游戏.html#素材图片",a:"素材图片"},"148.2":{t:"代码\r",p:`&lt;template&gt;
  &lt;div&gt;app&lt;/div&gt;
&lt;/template&gt;



`,l:"visual/pixiJs/谷歌恐龙小游戏.html#代码",a:"代码"},"149.0":{t:"# PixiJs 资源管理\r",p:`
PIXI.Assets用于加载资源
使用PIXI.Container创建容器，对多个资源分组，设置容器属性即可应用到容器内的精灵

`,l:"visual/pixiJs/资源管理.html",a:"pixijs-资源管理"},"149.1":{t:"单次添加资源\r",p:`// 导入pixi
import as PIXI from &quot;pixi.js&quot;;

// 创建应用
const app = new PIXI.Application({
	widt ...`,l:"visual/pixiJs/资源管理.html#单次添加资源",a:"单次添加资源"},"149.2":{t:"一次添加多个资源\r",p:`// 导入pixi
import as PIXI from &quot;pixi.js&quot;;

// 创建应用
const app = new PIXI.Application({
	widt ...`,l:"visual/pixiJs/资源管理.html#一次添加多个资源",a:"一次添加多个资源"},"150.0":{t:"# SVG\r",p:"\r",l:"visual/svg/index.html",a:"svg"},"150.1":{t:"是什么\r",p:`
SVG 是 Scalable Vector Graphics 的缩写 意为可缩放矢量图形
SVG 是一个基于文本的开放网络标准，用来定义用于网络的矢量图形
SVG 图像在放大或改变尺寸的情况下其图形 ...`,l:"visual/svg/index.html#是什么",a:"是什么"},"150.2":{t:"基本图形\r",p:"\r",l:"visual/svg/index.html#基本图形",a:"基本图形"},"150.3":{t:"线条（line）\r",p:`&lt;svg&gt;
  &lt;!-- 不设置样式属性 style 是看不出效果的 --&gt;
  &lt;line x1=&quot;50&quot; x2=&quot;50&quot; y1 ...`,l:"visual/svg/index.html#线条-line",a:"线条-line"},"150.4":{t:"矩形（rect）\r",p:`&lt;svg&gt;
  &lt;rect x=&quot;400&quot; y=&quot;200&quot; width=&quot;150&quot; height=&quot;50&quo ...`,l:"visual/svg/index.html#矩形-rect",a:"矩形-rect"},"150.5":{t:"圆形（circle）\r",p:`&lt;svg&gt;
  &lt;circle cx=&quot;370&quot; cy=&quot;95&quot; r=&quot;50&quot; style=&quot;stroke:gr ...`,l:"visual/svg/index.html#圆形-circle",a:"圆形-circle"},"150.6":{t:"椭圆（cllipse）\r",p:`&lt;svg&gt;
  &lt;ellipse cx=&quot;100&quot; cy=&quot;100&quot; rx=&quot;100&quot; ry=&quot;50&quot; ...`,l:"visual/svg/index.html#椭圆-cllipse",a:"椭圆-cllipse"},"150.7":{t:"多边形（polygon）\r",p:`&lt;svg&gt;
  &lt;!-- 不设置样式属性style是看不出效果的 并且polygon默认为填充需要把fill属性设置为none --&gt;
  &lt;polygon
    po ...`,l:"visual/svg/index.html#多边形-polygon",a:"多边形-polygon"},"150.8":{t:"折线（polyline）\r",p:`&lt;svg&gt;
  &lt;polyline points=&quot;300 300,50 100,120 300,200,30&quot; fill-opacity=&quot;0&quo ...`,l:"visual/svg/index.html#折线-polyline",a:"折线-polyline"},"150.9":{t:"路径（path）\r",p:`&lt;svg&gt;
  &lt;path
    fill-opacity=&quot;0&quot;
    stroke=&quot;skyblue&quot;
    d=&quot;
   ...`,l:"visual/svg/index.html#路径-path",a:"路径-path"},"151.0":{t:"# 初识 ThreeJs\r",p:`
Three.js 学习指南
Three.js 中文官方文档

Three.js 是一种用于在 Web 浏览器中创建交互式 3D 图形的 JavaScript 库。它允许开发人员在 Web 应用程序中 ...`,l:"visual/threejs/base/index.html",a:"初识-threejs"},"152.0":{t:"# 渲染场景和物体\r",p:`\r
\r
\r`,l:"visual/threejs/base/渲染场景和物体.html",a:"渲染场景和物体"},"152.1":{t:"渲染第一个场景和物体\r",p:"\r",l:"visual/threejs/base/渲染场景和物体.html#渲染第一个场景和物体",a:"渲染第一个场景和物体"},"152.2":{t:"示例\r",p:`&lt;Scene1 /&gt;
`,l:"visual/threejs/base/渲染场景和物体.html#示例",a:"示例"},"152.3":{t:"代码\r",p:`:::code-group
&lt;&lt;&lt; @/visual/threejs/components/Scene1.vue[完整代码]
:::
`,l:"visual/threejs/base/渲染场景和物体.html#代码",a:"代码"},"152.4":{t:"轨道控制器查看物体\r",p:"\r",l:"visual/threejs/base/渲染场景和物体.html#轨道控制器查看物体",a:"轨道控制器查看物体"},"152.5":{t:"示例\r",p:`&lt;Scene2 /&gt;
`,l:"visual/threejs/base/渲染场景和物体.html#示例",a:"示例"},"152.6":{t:"导入轨道控制器\r",p:`import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'

`,l:"visual/threejs/base/渲染场景和物体.html#导入轨道控制器",a:"导入轨道控制器"},"152.7":{t:"创建轨道控制器\r",p:`// 创建轨道控制器
const controls = new OrbitControls(camera, renderer.domElement)

`,l:"visual/threejs/base/渲染场景和物体.html#创建轨道控制器",a:"创建轨道控制器"},"152.8":{t:"每一帧根据控制器更新画面\r",p:`function render() {
  //如果后期需要控制器带有阻尼效果，或者自动旋转等效果，就需要加入controls.update()
  controls.update()
  rende ...`,l:"visual/threejs/base/渲染场景和物体.html#每一帧根据控制器更新画面",a:"每一帧根据控制器更新画面"},"152.9":{t:"代码\r",p:`:::code-group
&lt;&lt;&lt; @/visual/threejs/components/Scene2.vue#snippet{js}[示例]
&lt;&lt;&lt; @/vis ...`,l:"visual/threejs/base/渲染场景和物体.html#代码",a:"代码"},"152.10":{t:"坐标轴辅助器\r",p:"\r",l:"visual/threejs/base/渲染场景和物体.html#坐标轴辅助器",a:"坐标轴辅助器"},"152.11":{t:"示例\r",p:`&lt;Scene /&gt;
`,l:"visual/threejs/base/渲染场景和物体.html#示例",a:"示例"},"152.12":{t:"代码\r",p:`:::code-group
&lt;&lt;&lt; @/visual/threejs/components/Scene.vue#snippet{js}[示例]
&lt;&lt;&lt; @/visu ...`,l:"visual/threejs/base/渲染场景和物体.html#代码",a:"代码"},"153.0":{t:"# 物体的缩放、位移和旋转\r",p:`\r
\r
\r`,l:"visual/threejs/base/缩放、位移和旋转.html",a:"物体的缩放、位移和旋转"},"153.1":{t:"缩放\r",p:`//例如设置x轴放大3倍、y轴方向放大2倍、z轴方向不变
cube.scale.set(3, 2, 1)
//单独设置某个轴的缩放
cube.scale.x = 3

`,l:"visual/threejs/base/缩放、位移和旋转.html#缩放",a:"缩放"},"153.2":{t:"位移\r",p:`cube.position.set(1, 2, 3)

//单独设置某个轴的位移
cube.position.x = 3

`,l:"visual/threejs/base/缩放、位移和旋转.html#位移",a:"位移"},"153.3":{t:"旋转\r",p:`//直接设置旋转属性，例如围绕x轴旋转90度
cube.rotation.x = -Math.PI / 4

//围绕x轴旋转45度
cube.rotation.set(-Math.PI / 4, 0 ...`,l:"visual/threejs/base/缩放、位移和旋转.html#旋转",a:"旋转"},"153.4":{t:"效果\r",p:`&lt;transForm /&gt;
`,l:"visual/threejs/base/缩放、位移和旋转.html#效果",a:"效果"},"153.5":{t:"代码\r",p:`:::code-group
&lt;&lt;&lt; @/visual/threejs/components/transForm.vue{45-58,77-87 vue:line-numbers}[完 ...`,l:"visual/threejs/base/缩放、位移和旋转.html#代码",a:"代码"},"154.0":{t:"# VitePress 从 0 开始搭建个人网站\r",p:`
lemon's blog 从无到有的过程
VitePress 官方网站
VitePress 中文网

`,l:"vitepress.html",a:"vitepress-从-0-开始搭建个人网站"},"154.1":{t:"一、 创建项目\r",p:`

在 gitbub 上新建项目，建议勾选 Add a README file


新建文件夹 blog
可以使用 npm，yarn，pnpm


`,l:"vitepress.html#一、-创建项目",a:"一、-创建项目"},"154.2":{t:"初始化项目\r",p:`npm init -y


安装 vitepress

yarn add --dev vitepress vue


package.json 添加 script

&quot;scripts&quo ...`,l:"vitepress.html#初始化项目",a:"初始化项目"},"154.3":{t:"npx 创建项目\r",p:`npx create-vitepress my-site

cd my-site
npm install  或 yarn install
npm run dev  或 yarn dev

`,l:"vitepress.html#npx-创建项目",a:"npx-创建项目"},"154.4":{t:"本地运行\r",p:`
运行

yarn docs:dev


打包

yarn docs:build

!img
`,l:"vitepress.html#本地运行",a:"本地运行"},"154.5":{t:"二、 基本配置\r",p:"\r",l:"vitepress.html#二、-基本配置",a:"二、-基本配置"},"154.6":{t:"目录结构\r",p:"在目录下新建 docs 文件夹，在其中新建.vitepress 文件夹和 config.js 文件，config.js 文件就是我们的配置文件，新建一个 index.html 作为我们的主页，在新建一 ...",l:"vitepress.html#目录结构",a:"目录结构"},"154.7":{t:"1. 配置首页\r",p:`vitepress 支持用户使用 yaml 配置页面的内容，在 docs/index.html 写下如下内容，更多配置请查看
---
layout: home

title: 选项卡标题
titleT ...`,l:"vitepress.html#_1-配置首页",a:"_1-配置首页"},"154.8":{t:"2. 配置网站\r",p:"\r",l:"vitepress.html#_2-配置网站",a:"_2-配置网站"},"154.9":{t:"配置导航栏部分\r",p:`在 config.js 中可以开始我们的配置，先写上如下内容，这是网站的标题和描述，标题会在浏览器标签上展示
export default defineConfig({
  base: '/docs/ ...`,l:"vitepress.html#配置导航栏部分",a:"配置导航栏部分"},"154.10":{t:"配置侧边栏部分\r",p:`themeConfig: {
  // ...省略前面的内容
  // 侧边栏
  sidebar: {
    &quot;/articles/other&quot;: [
      {
     ...`,l:"vitepress.html#配置侧边栏部分",a:"配置侧边栏部分"},"154.11":{t:"三、 部署到 github.io\r",p:`新建脚本文件 deploy.sh，与 docs 文件夹处于同一级
#!/usr/bin/env sh

# 确保脚本抛出遇到的错误
set -e

# 生成静态文件
yarn docs:build

 ...`,l:"vitepress.html#三、-部署到-github-io",a:"三、-部署到-github-io"}},n={previewLength:100,buttonLabel:"搜索",placeholder:"情输入关键词",allow:[],ignore:[]},r={INDEX_DATA:t,PREVIEW_LOOKUP:e,Options:n};export{r as default};
