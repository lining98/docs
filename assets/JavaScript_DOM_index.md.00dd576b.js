import{_ as e,c as a,o as t,V as i}from"./chunks/framework.b3911a66.js";const m=JSON.parse('{"title":"JavaScript DOM","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/DOM/index.md","filePath":"JavaScript/DOM/index.md","lastUpdated":1689326952000}'),o={name:"JavaScript/DOM/index.md"},l=i('<h1 id="javascript-dom" tabindex="-1">JavaScript DOM <a class="header-anchor" href="#javascript-dom" aria-label="Permalink to &quot;JavaScript DOM&quot;">​</a></h1><p>DOM（Document Object Model）是一种用于表示和操作 HTML、XML 等文档结构的编程接口。它将文档表示为一个树状结构，每个节点都是文档中的一个元素、属性、文本或其他类型的内容。</p><p>在 JavaScript 中，浏览器将 HTML 文档解析为 DOM 树，并提供了一组 API（应用程序编程接口）来访问和操作 DOM 树中的节点。这使得开发者可以使用 JavaScript 动态地修改网页的内容、样式和结构，以及响应用户的交互事件。</p><p>DOM 树的结构是层次化的，由多个节点组成。每个节点都有其特定的属性和方法，可以用于获取或修改节点的信息、添加、删除或移动节点等操作。以下是一些常用的 DOM 操作：</p><h2 id="获取和修改元素" tabindex="-1"><strong>获取和修改元素</strong>： <a class="header-anchor" href="#获取和修改元素" aria-label="Permalink to &quot;**获取和修改元素**：&quot;">​</a></h2><ul><li><code>getElementById()</code>: 根据元素的 ID 获取元素节点。</li><li><code>getElementsByClassName()</code>: 根据类名获取元素节点集合。</li><li><code>getElementsByTagName()</code>: 根据标签名获取元素节点集合。</li><li><code>querySelector()</code>: 根据选择器获取匹配的第一个元素节点。</li><li><code>querySelectorAll()</code>: 根据选择器获取匹配的所有元素节点。</li><li><code>innerHTML</code>: 获取或设置元素的 HTML 内容。</li><li><code>textContent</code>: 获取或设置元素的文本内容。</li></ul><h2 id="创建和操作元素" tabindex="-1"><strong>创建和操作元素</strong>： <a class="header-anchor" href="#创建和操作元素" aria-label="Permalink to &quot;**创建和操作元素**：&quot;">​</a></h2><ul><li><code>createElement()</code>: 创建新的元素节点。</li><li><code>appendChild()</code>: 将一个节点添加为另一个节点的子节点。</li><li><code>removeChild()</code>: 删除指定的子节点。</li><li><code>setAttribute()</code>: 设置元素的属性值。</li><li><code>getAttribute()</code>: 获取元素的属性值。</li></ul><h2 id="事件处理" tabindex="-1"><strong>事件处理</strong>： <a class="header-anchor" href="#事件处理" aria-label="Permalink to &quot;**事件处理**：&quot;">​</a></h2><ul><li><code>addEventListener()</code>: 添加事件监听器。</li><li><code>removeEventListener()</code>: 移除事件监听器。</li><li>事件处理函数：响应事件的函数，可以通过事件对象获取相关信息。</li></ul><h2 id="样式和类操作" tabindex="-1"><strong>样式和类操作</strong>： <a class="header-anchor" href="#样式和类操作" aria-label="Permalink to &quot;**样式和类操作**：&quot;">​</a></h2><ul><li><code>style</code>: 获取或设置元素的样式属性。</li><li><code>classList</code>: 获取元素的类列表，可用于添加、删除或切换类。</li></ul><p>DOM 提供了丰富的功能和方法，使开发者能够通过 JavaScript 与网页进行交互和动态操作。通过 DOM，可以实现动态修改网页内容、实时更新页面、处理用户输入和交互等操作，使得 JavaScript 成为了 Web 开发中不可或缺的一部分。</p>',13),c=[l];function r(d,n,s,p,h,u){return t(),a("div",null,c)}const M=e(o,[["render",r]]);export{m as __pageData,M as default};
